FRONTEND

Main docs
/* Avatar settings */
.avatar_nav {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 0px;
}

.avatar_nav img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.avatar_nav2 {
    width: 60px; 
    height: 70px; 
    flex-shrink: 0; 
}

.avatar_nav2 img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 10%;
}

.letra_avatar {
    color: black;
    text-decoration: none;
    text-transform: capitalize;
    text-align: center;
}

/* Courses */
.course_image_settings {
    width: 80px;
    margin-bottom: 10px;
}


import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));


<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Athletic Vibes</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="images/header_logo.jpg">

  <!-- iziToast -->
  <link rel="stylesheet" href="css/iziToast.min.css">

  <!-- themify-icons -->
  <link rel="stylesheet" href="assets1/css/themify-icons.css">

  <!-- Froala -->
  <link href="./node_modules/froala-editor/css/froala_editor.pkgd.min.css" rel="stylesheet">

</head>

<body style="background-color: #bcb4bc !important;">
  <app-root></app-root>

  <!-- Scripts -->
  <script src="js/iziToast.min.js"></script>
</body>
</html>

App components

import { Routes } from '@angular/router';
import { HomeComponent } from './components/home/home.component';
import { LoginComponent } from './components/login/login.component';
import { SignupComponent } from './components/signup/signup.component';
import { UserEditComponent } from './components/user-edit/user-edit.component';
import { CourseNewComponent } from './components/course-new/course-new.component';
import { CourseEditComponent } from './components/course-edit/course-edit.component';
import { CategoryListComponent } from './components/category-list/category-list.component';
import { CategoryNewComponent } from './components/category-new/category-new.component';
import { CategoryEditComponent } from './components/category-edit/category-edit.component';
import { CartComponent } from './components/cart/cart.component';
import { VideoNewComponent } from './components/video-new/video-new.component';
import { CourseDetailComponent } from './components/course-detail/course-detail.component';
import { VideoEditComponent } from './components/video-edit/video-edit.component';
import { VideoDetailComponent } from './components/video-detail/video-detail.component';
import { LearningComponent } from './components/learning/learning.component';
// guards
import { identityGuard } from './guards/identity.guard';

export const routes: Routes = [
    {
        path: '',
        component: HomeComponent
    },
    {
        path: 'home',
        component: HomeComponent
    },
    {
        path: 'login',
        component: LoginComponent
    },
    {
        path: 'signup',
        component: SignupComponent
    },
    {
        path: 'logout/:sure',
        component: LoginComponent, 
        canActivate: [identityGuard]
    },
    {
        path: 'settings',
        component: UserEditComponent,
        canActivate: [identityGuard]
    },
    {
        path: 'create-course',
        component: CourseNewComponent,
        canActivate: [identityGuard]
    },
    {
        path: 'course-edit/:id',
        component: CourseEditComponent,
        canActivate: [identityGuard]
    },
    {
        path: 'categories',
        component: CategoryListComponent,
        canActivate: [identityGuard]
    },
    {
        path: 'create-category',
        component: CategoryNewComponent,
        canActivate: [identityGuard]
    },
    {
        path: 'category-edit/:id',
        component: CategoryEditComponent,
        canActivate: [identityGuard]
    },
    {
        path: 'cart',
        component: CartComponent,
        canActivate: [identityGuard]
    },
    {
        path: 'create-video/:id',
        component: VideoNewComponent,
        canActivate: [identityGuard]
    },
    {
        path: 'course/:id',
        component: CourseDetailComponent
    },
    {
        path: 'video-edit/:id',
        component: VideoEditComponent,
        canActivate: [identityGuard]
    },
    {
        path: 'video-detail/:id',
        component: VideoDetailComponent,
        canActivate: [identityGuard]
    },
    {
        path: 'category/:id',
        component: HomeComponent
    },
    {
        path: 'search/:text',
        component: HomeComponent
    },
    {
        path: 'learning',
        component: LearningComponent,
        canActivate: [identityGuard]
    },
    {
        path: '**',
        component: HomeComponent
    }
];


import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';
import { provideCharts, withDefaultRegisterables } from 'ng2-charts';
import { routes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }), 
    provideRouter(routes),
    provideHttpClient(),
    provideCharts(withDefaultRegisterables())
  ]
};


import { Component, OnInit, ViewChild, AfterViewInit, ElementRef } from '@angular/core';
import { RouterOutlet, Router } from '@angular/router';
import { CategoryService } from './services/category.service';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { UserService } from './services/user.service';
import { ProgressService } from './services/progress.service';
import { GLOBAL } from './services/global';
import { CartService } from './services/cart.service';
import { ChartData, ChartEvent, ChartType } from 'chart.js';
import { BaseChartDirective } from 'ng2-charts';
import { ChangeDetectorRef } from '@angular/core';
import { FormsModule } from '@angular/forms';
import * as AOS from 'aos';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet, CommonModule, RouterModule, BaseChartDirective, FormsModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
  providers: [CategoryService, CartService]
})
export class AppComponent implements OnInit, AfterViewInit {
  title = 'Front-end';

  public identity:any;
  public token:any;
  public url:any;
  public url_front:any;
  public categories: any = [];

  // cart
  public courses: any;
  public quantity: any;
  public quantities: any;
  public total: any;
  public cart_courses: any;

  // search
  isSearchActive = false;
  text: string = '';

  // chart graph
  public ChartData: ChartData<'doughnut'> = {
    datasets: [
      { data: [],
        backgroundColor: ['#007bff', '#6c757d'],
        borderColor: ['#007bff', '#6c757d'],
        hoverBackgroundColor: ['#007bff', '#6c757d'],
      }
    ]
  };
  public ChartType: ChartType = 'doughnut';

  // events of the chart
  public chartClicked({ event, active }: { event: ChartEvent, active: {}[] }): void {
    console.log(event, active);
  }
  public chartHovered({ event, active }: { event: ChartEvent, active: {}[] }): void {
    console.log(event, active);
  }

  constructor(
    private categoryService: CategoryService,
    public userService: UserService,
    private cartService: CartService,
    private progressService: ProgressService,
    private _router: Router,
    private cdr: ChangeDetectorRef
  ) {
    this.url = GLOBAL.url;
    this.url_front = GLOBAL.url_front;
    this.loadUser();
  }

  @ViewChild(BaseChartDirective) chart: BaseChartDirective | undefined;
  @ViewChild('searchInput') searchInput!: ElementRef<HTMLInputElement>;
  
  ngOnInit(): void {
    this.getCategories();

    this.identity = this.userService.getIdentity();
    if(this.token) {
      this.indexCart();
    }

    document.onreadystatechange = function () {
      if (document.readyState == "complete") {
        AOS.init();
      }
    }

    this.progressService.progress$.subscribe(progress => {
      const progressPercentage = progress || 0;
      const remaining = 100 - progressPercentage;
      this.ChartData = {
        labels: [],
        datasets: [
          { 
            data: [progressPercentage, remaining],
            backgroundColor: ['#3c342c', '#bcb4bc'],
            borderColor: ['#3c342c', '#bcb4bc'],
            hoverBackgroundColor: ['#3c342c', '#bcb4bc'],
          }
        ]
      };
    
      if (this.chart) {
        this.chart.update();
      }
      this.cdr.detectChanges();
    });
    
    this.isSearchActive = false;
    this.text = '';
  }

  ngAfterViewInit() {
    this.cdr.detectChanges();
  }

  loadUser() {
    this.identity = this.userService.getIdentity();
    this.token = this.userService.getToken();
    if (Object.keys(this.identity).length === 0 || typeof this.identity === undefined) {
      this.identity = false;
    }
  }

  getCategories() {
    this.categoryService.getCategories().subscribe(
      res => {
        if (res.status == 'success') {
          this.categories = res.categories
        }
      },
      err => console.error(err)
    );
  }

  indexCart() {
    this.cartService.index(this.token).subscribe(
      res => {
        if (res.status == 'success') {
          this.courses = res.courses;
          this.quantity = res.cont;
          this.quantities = res.quantities;
          this.total = res.total;
          this.cart_courses = res.carts;
          
          localStorage.setItem('cart', JSON.stringify(this.quantity));
        }
      },
      err => console.error(err)
    )
  }

  // delete cart
  deleteCart(id: any){
    this.cartService.delete(this.token, id).subscribe(
      response => {
        this.indexCart();
      },
      error => {
        console.log(error);
      }
    );
  }

  // search
  toggleSearch() {
    this.isSearchActive = !this.isSearchActive;

    if (this.isSearchActive) {
      setTimeout(() => {
        this.searchInput.nativeElement.focus();
      });
    }
  }

  search() {
    const trimmed = this.text.trim();
    if (!trimmed) {
      return;
    }

    this._router.navigate(['/search', trimmed]);

    this.isSearchActive = false;
    this.text = '';
  }
}


<section>
    <!-- Header -->
    <header>
        <div class='container'>
            <div class="row">
                <div class="col">
                    <nav class="navbar navbar-expand-lg navbar-dark">
                        <div class="container-fluid">
                            <!-- Logo -->
                            <a class="navbar-brand" routerLink="/home">
                                <img src="images/header_logo.jpg" alt="Logo" width="100" height="80" class="rounded">
                            </a>

                            <!-- Toggler para móviles -->
                            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                                <span class="navbar-toggler-icon"></span>
                            </button>

                            <!-- Contentent  -->
                            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                                <!-- Left menu -->
                                <ul class="navbar-nav me-auto mb-2 mb-lg-0" *ngIf="categories">
                                    
                                    <!-- Search -->
                                    <li class="nav-item-search">
                                        <div class="search" [class.active]="isSearchActive">
                                            <input #searchInput type="text" class="input-search" placeholder="Search..." [(ngModel)]="text" (keyup.enter)="search()"/>
                                            <button class="btn-search" (click)="toggleSearch()">
                                                <i class="ti-search"></i>
                                            </button>
                                        </div>
                                    </li>
                                </ul>
                                
                                <!-- Right Menu -->
                                <ul class="navbar-nav ms-auto align-items-center">
                                    <!-- Learning dropdown -->
                                    <li class="nav-item menu" *ngIf="identity.sub">
                                        <div class="category_item">
                                            <a [routerLink]="['/learning']" class="nav-link category_link">
                                                <span>Learning</span>
                                                <svg viewBox="0 0 360 360" xml:space="preserve">
                                                    <g>
                                                        <path d="M325.607,79.393c-5.857-5.857-15.355-5.858-21.213,0.001l-139.39,139.393L25.607,79.393 c-5.857-5.857-15.355-5.858-21.213,0.001c-5.858,5.858-5.858,15.355,0,21.213l150.004,150c2.813,2.813,6.628,4.393,10.606,4.393 s7.794-1.581,10.606-4.394l149.996-150C331.465,94.749,331.465,85.251,325.607,79.393z"></path>
                                                    </g>
                                                </svg>
                                            </a>
                                            <div class="category_menu">
                                                <div class="category_drop_item">
                                                    <div class="chart-container">
                                                        <div class="chart-graph">
                                                            <canvas baseChart [data]="ChartData" [type]="ChartType" width="100" height="100"></canvas>
                                                        </div>
                                                        <div class="chart-labels">
                                                            <div><span class="label-box completed"></span> Completed: {{ ChartData.datasets[0].data[0] }}%</div>
                                                            <div><span class="label-box pending"></span> Pending: {{ ChartData.datasets[0].data[1] }}%</div>
                                                        </div>
                                                    </div>
                                                    <div style="width: 100%; color: #333; margin-top: 10px; display: flex; align-items: center; justify-content: center;">
                                                        <a [routerLink]="['/learning']" role="button" class="category_drop_link">
                                                            <span>Go to my courses</span>
                                                        </a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </li>

                                    <!-- Categories dropdown -->
                                    <li class="nav-item menu">
                                        <div class="category_item">
                                            <a href="#" class="nav-link category_link">
                                                <span>Categories</span>
                                                <svg viewBox="0 0 360 360" xml:space="preserve">
                                                    <g>
                                                        <path d="M325.607,79.393c-5.857-5.857-15.355-5.858-21.213,0.001l-139.39,139.393L25.607,79.393 c-5.857-5.857-15.355-5.858-21.213,0.001c-5.858,5.858-5.858,15.355,0,21.213l150.004,150c2.813,2.813,6.628,4.393,10.606,4.393 s7.794-1.581,10.606-4.394l149.996-150C331.465,94.749,331.465,85.251,325.607,79.393z"></path>
                                                    </g>
                                                </svg>
                                            </a>
                                            <div class="category_menu">
                                                <div class="category_drop_item" *ngFor="let category of categories">
                                                    <a href="#" class="category_drop_link" [routerLink]="['/category', category.id]">{{ category.name }}</a>
                                                </div>
                                            </div>
                                        </div>
                                    </li>
                                    <!-- Cart -->
                                    <li class="nav-item menu" *ngIf="identity && identity.sub">
                                        <div class="category_item">
                                            <a class="nav-link category_link cart-icon" href="#">
                                                <i class="ti-shopping-cart" style="font-size: 25px;"></i>
                                                <svg viewBox="0 0 360 360" xml:space="preserve">
                                                    <g>
                                                        <path d="M325.607,79.393c-5.857-5.857-15.355-5.858-21.213,0.001l-139.39,139.393L25.607,79.393 c-5.857-5.857-15.355-5.858-21.213,0.001c-5.858,5.858-5.858,15.355,0,21.213l150.004,150c2.813,2.813,6.628,4.393,10.606,4.393 s7.794-1.581,10.606-4.394l149.996-150C331.465,94.749,331.465,85.251,325.607,79.393z"></path>
                                                    </g>
                                                </svg>
                                            </a>
                                            <div class="category_menu cart-menu">
                                                <!-- Cart Content -->
                                                <div class="category_drop_item" *ngIf="courses && courses.length > 0">
                                                    <div *ngFor="let course of courses; let i = index" class="category_drop_link d-flex align-items-center">
                                                        <div *ngIf="course.image">
                                                            <a [routerLink]="['/course-detail', course.id]">
                                                                <img src="{{ url + 'courses/image/' + course.image }}" class="img-thumbnail" width="80" height="70">
                                                            </a>
                                                        </div>
                                                        <div class="flex-grow-1">
                                                            <h6 class="mb-0">{{ course.name }}</h6>
                                                            <span>${{ course.current_price }} x {{ quantities ? quantities[i] : 1 }}</span>
                                                        </div>
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <button class="btn btn-link text-danger p-0" (click)="deleteCart(course.id)">
                                                                <i class="ti-trash"></i>
                                                            </button>
                                                        </div>
                                                    </div>                                                        
                                                </div>
                                                <!-- Subtotal -->
                                                <div *ngIf="courses && courses.length > 0">
                                                    <div style="color: #3c342c; padding: 10px 0;">
                                                        <div class="d-flex justify-content-between fw-bold">
                                                            <span>Total:&nbsp;</span>
                                                            <span>${{ total ? total : '0' }} USD</span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <!-- Buttons -->
                                                <div class="category_drop_item" *ngIf="courses && courses.length > 0">
                                                    <a class="category_drop_link" routerLink="/cart">View Cart</a>
                                                </div>    
                                                <!-- Empty Cart -->
                                                <div class="category_drop_item" *ngIf="!courses || courses.length === 0">
                                                    <div class="category_drop_link text-center">
                                                        <p>Your cart is empty</p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </li>

                                    <!-- User -->
                                    <li class="nav-item menu" *ngIf="identity && identity.sub || identity.id">
                                        <div class="category_item">
                                            <a class="nav-link category_link align-items-center" href="#">
                                                <div *ngIf="identity && identity.image" class="avatar_nav">
                                                    <img src="{{ url + 'user/avatar/' + identity.image }}">
                                                </div>
                                                <span class="my-auto">{{ identity.name }}</span>
                                                <svg viewBox="0 0 360 360" xml:space="preserve">
                                                    <g>
                                                        <path d="M325.607,79.393c-5.857-5.857-15.355-5.858-21.213,0.001l-139.39,139.393L25.607,79.393 c-5.857-5.857-15.355-5.858-21.213,0.001c-5.858,5.858-5.858,15.355,0,21.213l150.004,150c2.813,2.813,6.628,4.393,10.606,4.393 s7.794-1.581,10.606-4.394l149.996-150C331.465,94.749,331.465,85.251,325.607,79.393z"></path>
                                                    </g>
                                                </svg>
                                            </a>
                                            <div class="category_menu user-menu">
                                                <div class="dropdown-divider"></div>
                                                
                                                <!-- User info -->
                                                <div class="category_drop_item">
                                                    <div class="category_drop_link d-flex align-items-center justify-content-center gap-2" style="padding: 0">
                                                        <div *ngIf="identity && identity.image" class="avatar_nav2">
                                                            <img src="{{ url + 'user/avatar/' + identity.image }}">
                                                        </div>
                                                        <div>
                                                            <div class="fw-bold d-flex flex-column align-items-center">
                                                                <a href="#" class="letra_avatar">
                                                                    {{ identity.name }}
                                                                </a>
                                                                <a href="#" class="letra_avatar">
                                                                    {{ identity.surname }}
                                                                </a>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="dropdown-divider"></div>

                                                <!-- Menu options -->
                                                <div class="category_drop_item">
                                                    <a class="category_drop_link" routerLink="/settings">Settings</a>
                                                </div>
                                                <div class="category_drop_item" *ngIf="identity && (identity.sub == 1 || identity.role == 'ROLE_ADMIN')">
                                                    <a class="category_drop_link" routerLink="/create-course">Create course</a>
                                                </div>
                                                <div class="category_drop_item" *ngIf="identity && (identity.sub == 1 || identity.role == 'ROLE_ADMIN')">
                                                    <a class="category_drop_link" routerLink="/categories">Categories</a>
                                                </div>

                                                <div class="dropdown-divider"></div>

                                                <div class="category_drop_item">
                                                    <a class="category_drop_link" routerLink="/logout/1">Log out</a>
                                                </div>
                                            </div>
                                        </div>
                                    </li>
                                    <!-- Access buttons -->
                                    <li class="nav-item ms-2" *ngIf="!identity || !identity.sub">
                                        <a class="btn btn-start" routerLink="/login" >Log in</a>
                                    </li>
                                    <li class="nav-item ms-2" *ngIf="!identity || !identity.sub">
                                        <a class="btn btn-start" routerLink="/signup" >Sign up</a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </nav>
                </div>
            </div>
        </div>
    </header>
    <main>
        <!-- for the routes -->
        <router-outlet></router-outlet>
    </main>
    <footer style="text-align: center; background-color:#bcb4bc; width: 100%; padding: 30px 0;">
        <hr>Platform course developed by Miguel Águila &copy; 
        <hr>
    </footer>
</section>


header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(125,105,106,255);
    z-index: -1;
}

header {
    position: relative;
    background-color: transparent;
}

/* section display */
section {
    display: grid;
    min-height: 100dvh;
    grid-template-rows: auto 1fr auto;
}

/* Login and sign up */
.btn-start {
    cursor: pointer;
    position: relative;
    padding: 12px 24px;
    font-size: 15px;
    color: white;
    border: 2px solid white;
    border-radius: 34px;
    background-color: transparent;
    font-weight: 600;
    transition: all 0.3s cubic-bezier(0.23, 1, 0.320, 1);
    overflow: hidden;
}

.btn-start::before {
    content: '';
    position: absolute;
    inset: 0;
    margin: auto;
    width: 50px;
    height: 50px;
    border-radius: inherit;
    scale: 0;
    z-index: -1;
    background-color: #bcb4bc;
    transition: all 0.6s cubic-bezier(0.23, 1, 0.320, 1);
}

.btn-start:hover::before {
    scale: 3;
}

.btn-start:hover {
    color: #3c342c;
    scale: 1.1;
    box-shadow: 0 0px 20px rgba(193, 163, 98,0.4);
}

.btn-start:active {
    scale: 1;
}

/* Categories, Cart and User dropdown */
.menu {
    font-size: 15px;
    line-height: 1.6;
    color: white;
    width: fit-content;
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
}

.menu a {
    text-decoration: none;
    color: inherit;
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
}

.menu .category_item {
    position: relative;
}

.menu .category_link {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    padding: 12px 25px;
    border-radius: 16px;
    overflow: hidden;
    transition: all 0.48s cubic-bezier(0.23, 1, 0.32, 1);
    z-index: 1;
    white-space: nowrap;
}

.menu .category_link.cart-icon {
    padding: 12px 25px !important;
}

.menu .category_item:hover .category_link {
    padding: 12px 60px;
}

.menu .category_item:hover .category_link.cart-icon {
    padding: 17px 100px !important;
}

.menu .category_link::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #bcb4bc;
    z-index: -1;
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.48s cubic-bezier(0.23, 1, 0.32, 1);
}

.menu .category_link svg {
    width: 14px;
    height: 14px;
    fill: white;
    transition: all 0.48s cubic-bezier(0.23, 1, 0.32, 1);
}

.menu .category_item {
    position: relative;
}

.menu .category_menu {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: absolute;
    top: 100%;
    border-radius: 0 0 16px 16px;
    left: 0;
    width: 100%;
    overflow: hidden;
    border: 1px solid white;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-12px);
    transition: all 0.48s cubic-bezier(0.23, 1, 0.32, 1);
    z-index: 1;
    pointer-events: none;
    list-style: none;
    background-color: white;
}

.menu .category_item:hover .category_menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
    pointer-events: auto;
    border-top: transparent;
    border-color: white;
    width: auto;
    min-width: 100%;
}

.menu .category_item:hover .category_menu.cart-menu,
.menu .category_item:hover .category_menu.user-menu {
    width: 100px;
}

.menu .category_item:hover .category_link {
    color: #333;
    border-radius: 16px 16px 0 0;
}

.menu .category_item:hover .category_link::after {
    transform: scaleX(1);
    transform-origin: right;
}

.menu .category_item:hover .category_link svg {
    fill: #3c342c;
    transform: rotate(-180deg);
}

.category_menu .category_drop_item {
    width: 100%;
    transition: all 0.48s cubic-bezier(0.23, 1, 0.32, 1);
}

.category_menu .category_drop_link {
    display: block;
    padding: 12px 24px;
    width: 100%;
    position: relative;
    text-align: center;
    transition: all 0.48s cubic-bezier(0.23, 1, 0.32, 1);
    color: #3c342c;
}

.category_menu .category_drop_item:last-child .category_drop_link {
    border-bottom: none;
}

.category_menu .category_drop_link::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    transform: scaleX(0);
    width: 100%;
    height: 100%;
    background-color: #bcb4bc;
    z-index: -1;
    transform-origin: left;
    transition: transform 0.48s cubic-bezier(0.23, 1, 0.32, 1);
}

.category_menu .category_drop_link:hover:before {
    transform: scaleX(1);
    transform-origin: right;
}

.category_menu .category_drop_link:hover {
    color: black;
}

/* hr */
.dropdown-divider {
    width: 100%;
    height: 1px;
    background-color: black;
    margin: 8px 0;
}

@media (max-width: 992px) {
    .menu .category_link {
        padding: 8px 15px;
    }
    
    .menu .category_item {
        margin-right: 10px;
    }
    
    .menu .category_item:hover .category_link {
        padding: 8px 30px;
    }
}

/* chart */
.chart-container {
    display: flex;
    align-items: center;
    justify-content: start;
    padding: 8px;
}

.chart-graph {
    width: 100px;
    height: 100px;
    margin-right: 12px;
}

.chart-labels {
    font-size: 14px;
    line-height: 1.5;
    color: #333;
}

.label-box {
    display: inline-block;
    width: 14px;
    height: 14px;
    margin-right: 6px;
    vertical-align: middle;
    border-radius: 2px;
}

.label-box.completed {
    background-color: #3c342c;
}

.label-box.pending {
    background-color: #bcb4bc;
}

/* search */
.nav-item-search  {
    box-sizing: border-box;
    background-color: transparent;
    font-family: 'Roboto', sans-serif;
    overflow: hidden;
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
} 

.search {
    position: relative;
    height: 40px;
}

.search .input-search {
    background-color: white;
    border: 0;
    font-size: 16px;
    color: #1e272e;
    padding: 15px;
    height: 40px;
    width: 40px;
    transition: width 0.8s ease;
    border-top-right-radius: 25px;
    border-bottom-right-radius: 25px;
    border-top-left-radius: 25px;
    border-bottom-left-radius: 25px;
}

.btn-search {
    background-color: white;
    border: 0;
    cursor: pointer;
    font-size: 20px;
    position: absolute;
    top: 0;
    left: 0;
    height: 40px;
    width: 40px;
    transition:  0.8s ease;
    border-radius: 50%;
}

.btn-search:hover{
    background-color: white;
}

.btn-search:focus,
.input-search:focus {
    outline: none;
}

.search.active .input-search {
    width: 215px;
}
.search.active .btn-search {
    transform: translateX(175px);
}


COMPONENTS

Cart

<div class="body">
    <div class="container">
        <div class="row" style="margin-top: 50px;">
            <div class="col">
                <main class="main">
                    <div class="container">
                        <div class="row">
                            <div class="col-9">
                                <!-- Tabla principal del carrito -->
                                <section class="table_header">
                                    <h3>Shopping Cart</h3>
                                </section>
                                <section class="table_body">
                                    <table *ngIf="quantities[0] >= 1">
                                        <thead>
                                            <tr>
                                                <th scope="col"></th>
                                                <th scope="col">Course</th>
                                                <th scope="col">Price</th>
                                                <th scope="col">Description</th>
                                                <th scope="col">Subtotal</th>
                                                <th scope="col"></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr *ngFor="let course of courses; let i = index">
                                                <td>
                                                    <strong>{{ i + 1 }}</strong>
                                                </td>
                                                <td>
                                                    <figure class="product-img">
                                                        <a [routerLink]="['/course-detail', course.id]">
                                                            <img src="{{ url + 'courses/image/' + course.image }}" alt="course">
                                                        </a>
                                                    </figure>
                                                </td>
                                                <td>${{ course.current_price }} USD</td>
                                                <td>{{ course.detail }}</td>
                                                <td>
                                                    <strong>${{ subtotals[i] }} USD</strong>
                                                </td>
                                                <td>
                                                    <a (click)="deleteCart(course.id)">
                                                        <i class="ti-trash"></i>
                                                    </a>
                                                </td>
                                            </tr>
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <td colspan="6" class="text-center" *ngIf="quantities[0] || quantities[0] >= 1">
                                                    <a routerLink="/home" class="btn btn-outline-secondary">
                                                        Continue Shopping
                                                    </a>
                                                </td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </section>
                            </div>
                            <!-- Resumen de totales del carrito -->
                            <div class="col-3" *ngIf="quantities[0] || quantities[0] >= 1">
                                <section class="table_header">
                                    <h3>Order Summary</h3>
                                </section>
                                <section class="table_body">
                                    <table>
                                        <thead>
                                            <tr>
                                                <th>Detail</th>
                                                <th>Amount</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td>Discount</td>
                                                <td>$0.00 USD</td>
                                            </tr>
                                            <tr>
                                                <td>Subtotal</td>
                                                <td>${{ total }} USD</td>
                                            </tr>
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <th>Total</th>
                                                <th>${{ total }} USD</th>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </section>
                            </div>
                            <hr>
                        </div>
                    </div>
                </main>
                <!-- Sección de métodos de pago -->
                <div class="payment-section" *ngIf="quantities[0] && quantities[0] > 0">
                    <!-- <h2>Payment Methods</h2>
                    <div class="row">
                        <div class="col">
                            <div class="accordion-alt">
                            </div>
                        </div>
                    </div> -->
                    <!-- Botón de pago -->
                    <div class="d-flex justify-content-center align-items-center w-100" data-aos="zoom-in" data-aos-duration="1500">
                        <a class="btn btn-button" (click)="onSubmit()">Checkout</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

* {
    padding: 0;
    box-sizing: border-box;
}

a {
    color: inherit;
    text-decoration: none;
    background-color: transparent;
    padding: 0;
    margin: 0;
}

a:hover {
    text-decoration: none;
}

.body {
    display: flex;
    justify-content: center;
    align-items: center;
    background: url(/images/weightlifting-strong-man-on-a-gym-royalty-free-image-638745078-1543681281.jpg) center / cover;
    mask-image: linear-gradient(
        #bcb4bc 90%,
        transparent
    );
    padding-bottom: 60px;
}

main.main {
    background-color: #fff5;
    backdrop-filter: blur(7px);
    box-shadow: 0 .4rem .8rem #0005;
    border-radius: .8rem;
    overflow: hidden;
}

.table_header {
    width: 100%;
    height: 100px;
    background-color: #fff4;
    padding: 0.8rem 1rem;
    display: flex;
    justify-content: center;
    align-items: center;
}

.table_body {
    width: 100%;
    max-height: calc(89% - 1.6rem);
    background-color: transparent;
    border-radius: .6rem;
    overflow: auto;
    padding: 0.8rem 1rem;
}

.table_body::-webkit-scrollbar{
    width: 0.5rem;
    height: 0.5rem;
}

.table_body::-webkit-scrollbar-thumb{
    border-radius: .5rem;
    background-color: #0004;
    visibility: hidden;
}

.table_body:hover::-webkit-scrollbar-thumb{ 
    visibility: visible;
}

table {
    width: 100%;
    border-collapse: collapse;
    backdrop-filter: blur(7px); /* Desenfoque */
    border-radius: .8rem;
}

td img {
    width: 150px;
    height: 90px;
    margin-right: .5rem;
    vertical-align: middle;
}

table, th, td {
    border-collapse: collapse;
    padding: 1rem;
    text-align: left;
}

thead tr, tbody tr, tfoot tr {
    background-color: transparent; /* Transparencia para las filas */
    backdrop-filter: inherit; /* Hereda el desenfoque de la tabla */
}

thead tr {
    background-color: transparent; /* Mismo color de fondo y transparencia que el main */
    backdrop-filter: blur(7px); /* Mismo desenfoque que el main */
}

tfoot tr {
    background-color: transparent; /* Mismo color de fondo y transparencia que el main */
    backdrop-filter: blur(7px); /* Mismo desenfoque que el main */
}

thead th {
    position: sticky;
    top: 0;
    left: 0;
    cursor: pointer;
    text-transform: capitalize;
}

tbody tr:nth-child(even) {
    background-color: #0000000b;
}

tbody tr {
    --delay: .1s;
    transition: .5s ease-in-out var(--delay), background-color 0s;
    background-color: #fff4; /* Mismo color de fondo y transparencia que el main */
    backdrop-filter: blur(7px); /* Mismo desenfoque que el main */
}

tbody tr:nth-child(even) {
    background-color: #fff4; /* Asegúrate de mantener la transparencia */
}

tbody tr:hover {
    background-color: #fff6 !important;
}

tbody tr td,
tbody tr td p {
    transition: .2s ease-in-out;
}

.status {
    padding: .4rem 0;
    border-radius: 2rem;
    text-align: center;
    display: inline-block;
    min-width: 80px;
}

.status.delivered {
    background-color: #86e49d;
    color: #006b21;
}

.status.cancelled {
    background-color: #d893a3;
    color: #b30021;
}

.status.pending {
    background-color: #ebc474;
}

.status.shipped {
    background-color: #6fcaea;
}

thead th.active,tbody td.active {
    color: #6c00bd;
}

/* Estilos específicos para el carrito */
.product-img img {
    max-width: 150px;
    max-height: 90px;
    object-fit: cover;
}

.breadcrumb-nav {
    padding: 1rem 0;
}

.breadcrumb {
    display: flex;
    list-style: none;
    gap: 0.5rem;
}

.btn {
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    text-decoration: none;
    cursor: pointer;
    display: inline-block;
    margin: 0.5rem 0;
}

.btn-button {
    width: 30%;
    height: 40px;
    border-radius: 40px;
    background: #fff;
    border: none;
    outline: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
    margin: 30px 0;
}

.btn-outline-secondary {
    background-color: transparent;
    color: #555;
    border: 1px solid #555;
}

.btn-block {
    display: block;
    width: 100%;
}

.btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.text-center {
    text-align: center;
}
/* Boton de eliminar */
.ti-trash {
    color: #b30021;
    cursor: pointer;
    font-size: 1.2rem;
    text-decoration: none;
}

/* Iconos */
.ti-home, .ti-shopping-cart {
    text-decoration: none;
}

import { Component } from '@angular/core';
import { UserService } from '../../services/user.service';
import { CartService } from '../../services/cart.service';
import { GLOBAL } from '../../services/global';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterModule, Router } from '@angular/router';
import { SaleService } from '../../services/sale.service';

// this is a global variable for iziToast
declare var iziToast: any;

@Component({
  selector: 'app-cart',
  imports: [RouterModule, CommonModule, FormsModule],
  templateUrl: './cart.component.html',
  styleUrl: './cart.component.css',
  providers: [UserService, CartService, SaleService]
})
export class CartComponent {
  public identity: any;
  public token: any;
  public url: string;
  public status: any;

  // cart
  public courses: any;
  public quantity: any;
  public quantities: Array<any> = [];
  public total: any;
  public cart_courses: any;
  public subtotals: Array<any> = [];

  constructor(
    private userService: UserService,
    private cartService: CartService,
    private saleService: SaleService,
    private router: Router
  ) {
    this.url = GLOBAL.url;
    this.identity = this.userService.getIdentity();
    this.token = this.userService.getToken();
  }

  ngOnInit(): void {
    this.indexCart();
  }

  indexCart() {
    this.cartService.index(this.token).subscribe(
      res => {
        if (res.status == 'success') {
          this.courses = res.courses;
          this.quantity = res.cont;
          this.quantities = res.quantities;
          this.total = res.total;
          this.cart_courses = res.carts;
          this.subtotals = res.subTotals;
          localStorage.setItem('cart', JSON.stringify(this.quantity));
        }
      },
      err => console.error(err)
    )
  }

  // delete cart
  deleteCart(id: any){
    this.cartService.delete(this.token, id).subscribe(
      response => {
        this.indexCart();
        setTimeout(() => {
          window.location.reload();
        }, 100);
      },
      error => {
        console.log(error);
      }
    );
  }

  // delete all cart
  deleteAllCart(){
    this.cartService.deleteAll(this.token).subscribe(
      response => {
        this.indexCart();
      },
      error => {
        console.log(error);
      }
    );
  }

  onSubmit() {
    // try catch is used to handle errors that may occur during the execution of the code inside the try block
    try {
      // Save the user data
      this.saleService.createSale(this.token, this.identity).subscribe({
        next: (response) => {
          if (!response && response.status != 'success') {
            this.status = 'error';
            // iziToast
            iziToast.show({
              title: 'Error',
              titleColor: '#FF0000',
              color: '#FFF',
              class: 'text-danger',
              position: 'topRight',
              message: 'The sale has not been created.'
            });
          } else {
            this.status = 'success';
            // iziToast
            iziToast.show({
              title: 'Success',
              titleColor: '#1DC74C',
              color: '#FFF',
              class: 'text-success',
              position: 'topRight',
              message: 'The sale has been created'
            });
            this.deleteAllCart();
            setTimeout(() => {
              window.scrollTo({ top: 0, behavior: 'smooth' });
              setTimeout(() => {
                this.router.navigate(['/home']).then(() => {
                  window.location.reload();
                });
              }, 1000)
            }, 100);
          }
        },
        error: (error) => {
          this.status = 'error';
          console.log(error);
        }
      });
    } catch (error) {
      this.status = 'error';
      console.log(error);
    }
  }
}


Category-edit
import { Component } from '@angular/core';
import { RouterModule, Router, ActivatedRoute } from '@angular/router';
import { Category } from '../../models/Category';
import { UserService } from '../../services/user.service';
import { CategoryService } from '../../services/category.service';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';


@Component({
  selector: 'app-category-edit',
  imports: [RouterModule, FormsModule, CommonModule],
  templateUrl: '../category-new/category-new.component.html',
  styleUrl: '../category-new/category-new.component.css',
  providers: [UserService, CategoryService]
})
export class CategoryEditComponent {
  public category: Category;
  public token: any;
  public edit: boolean;
  public title: string;
  public status: any;

  constructor(
    private _userService: UserService,
    private _categoryService: CategoryService,
    private _route: ActivatedRoute,
    private _router: Router
  ) {
    this.token = this._userService.getToken();
    this.edit = true;
    this.title = 'Edit Category';
    this.category = new Category(0, '');
  }

  ngOnInit(): void {
    this.getCategory(); 
  }

  onSubmit(form: any) {
    // try catch is used to handle errors that may occur during the execution of the code inside the try block
    try {
      this._categoryService.updateCategory(this.token, this.category.id, this.category).subscribe({
        next: (response) => {
          if (response.status == 'success') {
            this.status = 'success';
            setTimeout(() => {
              this._router.navigate(['/categories']).then(() => {
                window.location.reload();
              });
            }, 1000);
          } else {
            this.status = 'error';
          }
        },
        error: (error) => {
          this.status = 'error';
          console.log(error);
        }
      });
    } catch (error) {
      this.status = 'error';
      console.log(error);
    }
  }

  getCategory() {
    this._route.params.subscribe(params => {
      let id = +params['id'];
      this._categoryService.getCategory(id).subscribe({
        next: (response) => {
          if (response.status == 'success') {
            this.category = response.category;
          } else {
            this._router.navigate(['/home']);
          }
        }, 
        error: (error) => {
          console.log(error);
          this.status = 'error';
        } 
      }) 
    }) 
  }

}


Category-list
<div style="background-color: #bcb4bc;">
    <div class="container">
        <div class="row">
            <div class="col mt-3">
                <div class="d-flex align-items-center justify-content-center gap-3" *ngIf="identity && identity.sub" data-aos="fade-right" data-aos-offset="300" data-aos-easing="ease-in-sine">
                    <div class="home_welcome">
                        <img src="{{ url + 'user/avatar/' + identity.image }}">
                    </div>
                    <span class="my-auto fw-bold" style="font-size: x-large;">These are your categories, {{ identity.name + ' ' + identity.surname + '!'}}</span>
                </div>
                <hr>
                <!-- Categories Cards -->
                <div class="row row-cols-1 row-cols-md-3 g-4">
                    <div class="col" *ngFor="let category of categories; let indice=index">
                        <article class="card card_1" data-aos="zoom-in" data-aos-duration="1500">
                            <div class="card-body">
                                <div class="card-title text-center">
                                    <h3 class="fs-5">
                                        {{ category.name }}
                                    </h3>
                                </div>
                                <!-- Buttons if you are the admin -->
                                <div class="video-buttons mt-3">
                                    <span *ngIf="identity && (identity.sub == 1 || identity.role == 'ROLE_ADMIN')">
                                        <a class="btn btn-admin-action me-2" id="my-edit-button" [routerLink]="['/category-edit', category.id]">
                                            <i class="ti-pencil"></i>
                                        </a>
                                        <button type="button" class="btn btn-admin-action me-2" id="my-delete-button" data-bs-toggle="modal" [attr.data-bs-target]="'#delete' + category.id">
                                            <i class= "ti-trash"></i>
                                        </button>
                                    </span>
                                </div>
                            </div>
                        </article>
                        <!-- Delete Modal -->
                        <div class="modal fade" [id]="'delete' + category.id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h1 class="modal-title fs-5" id="exampleModalLabel">
                                            Are you sure you want to delete this category?
                                        </h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        You are going to delete the category: {{ category.name }}.
                                        <br>
                                        This action cannot be undone.
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-admin-action" data-bs-dismiss="modal" style="color: black;">
                                            Close
                                        </button>
                                        <button type="button" class="btn btn-admin-action" style="color: black;" (click)="deleteCategory(category.id)">
                                            <i class= "ti-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-center w-100 mt-4" data-aos="zoom-in" data-aos-duration="1500">
                    <a class="btn btn-button" [routerLink]="['/create-category']">Create category</a>
                </div>
            </div>
        </div>
    </div>
</div>

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { UserService } from '../../services/user.service';
import { CategoryService } from '../../services/category.service';
import { Router, RouterModule } from '@angular/router';
import { GLOBAL } from '../../services/global';

@Component({
  selector: 'app-category-list',
  imports: [CommonModule, RouterModule],
  templateUrl: './category-list.component.html',
  styleUrl: './category-list.component.css',
  providers: [UserService, CategoryService]
})
export class CategoryListComponent {

  public title: string;
  public categories: any;
  public identity: any;
  public status: any;
  public token: any;
  public url: any;

  constructor(
    private _router: Router,
    private userService: UserService,
    private categoryService: CategoryService 
  ) {
    this.title = 'Category list';
    this.identity = this.userService.getIdentity();
    this.token = this.userService.getToken();
    this.url = GLOBAL.url;
  }

  ngOnInit(): void {
    this.getCategories();
  }

  getCategories() {
    this.categoryService.getCategories().subscribe(
      res => {
        if (res.status == 'success') {
          this.categories = res.categories
        }
      },
      err => console.error(err)
    );
  }

  deleteCategory(id: any) {
    this.categoryService.deleteCategory(this.token, id).subscribe(
      res => {
        if (res.status == 'success') {
          this.status = 'success';
          this.getCategories();
          setTimeout(() => {
            this._router.navigate(['/categories']).then(() => {
              window.location.reload();
            });
          }, 1000);
        }
      },
      err => console.error(err)
    );
  }
}


/* Welcome */
.home_welcome {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 0px;
}

.home_welcome img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

/* Card */
.card_1 {
    box-sizing: border-box;
    background: #bbbcb7;
    border: 1px solid white;
    box-shadow: 12px 17px 51px rgba(0, 0, 0, 0.22);
    backdrop-filter: blur(6px);
    border-radius: 10px;
    text-align: center;
    transition: all 0.5s;
    display: flex;
    align-items: center;
    justify-content: center;
    user-select: none;
    font-weight: bolder;
    color: black;
}

.card_1:hover {
    border: 1px solid black;
    transform: scale(1.05);
}

/* Buttons */
.btn-admin-action:focus,
.btn-admin-action:active,
.btn-admin-action:focus-visible {
    outline: none !important;
    box-shadow: none !important;
    border-color: transparent !important;
}

.btn.btn-admin-action {
    border: none !important;
    background: none !important;
}

.btn-admin-action {
    position: relative;
    display: inline-block;
    color: black;
    text-decoration: none;
    transition: color 0.3s ease;
}

.btn-admin-action::before {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 100%;
    height: 2px;
    background: rgba(125,105,106,255);
    transform: scaleX(0);
    transition: transform 0.3s ease;
}

.btn-admin-action:hover {
    color: rgba(125,105,106,255); 
}

.btn-admin-action:hover::before {
    transform: scaleX(1); 
}

/* Modal */
.modal-content {
    background: #eee8e8;
    position: relative;
    display: flex;
    place-content: center;
    place-items: center;
    overflow: hidden;
    border-radius: 20px;
}

/* Add z-index to make content visible */
.modal-header, .modal-body, .modal-footer {
    position: relative;
    z-index: 2; /* Higher than the ::after element */
}

.modal-content h1 {
    z-index: 1;
    color: black;
    font-size: 2em;
}

.modal-content::before {
    content: '';
    position: absolute;
    width: 130%;
    background-image: linear-gradient(180deg, #3c2829, #3c342c);
    height: 52%;
    animation: rotBGimg 3s linear infinite;
    transition: all 0.2s linear;
}

@keyframes rotBGimg {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

.modal-content::after {
    content: '';
    position: absolute;
    background: #eee8e8;
    inset: 5px;
    border-radius: 15px;
}

.btn-button{
    width: 30%;
    height: 40px;
    border-radius: 40px;
    background: #fff;
    border: none;
    outline: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
    margin-bottom: 20px;
    margin: 60px 0 0;
}


Category-new

<div class="general" data-aos="flip-up" data-aos-easing="ease-out-cubic" data-aos-duration="2000">
    <div class="form-box">
        <div class="form value">
            <div class="alert alert-success" *ngIf="status == 'success' && !edit">
                <p style="text-align: center;">
                    <strong>Category created successfully!</strong>
                </p>
            </div>
            <div class="alert alert-success" *ngIf="status == 'success' && edit">
                <p style="text-align: center;">
                    <strong>Category updated successfully!</strong>
                </p>
            </div>
            <div class="alert alert-danger" *ngIf="status == 'error' && !edit">
                <p style="text-align: center;">
                    <strong>Error!</strong> Category not created. 
                </p>
            </div>
            <div class="alert alert-danger" *ngIf="status == 'error' && edit">
                <p style="text-align: center;">
                    <strong>Error!</strong> Category not updated. 
                </p>
            </div>
            <!-- Category create form -->
            <form #categoryForm="ngForm" (ngSubmit)="onSubmit(categoryForm)">
                <h1 >
                    {{ title }}
                </h1>
                <p *ngIf="status != 'success' && !edit">
                    Create a new category.
                </p>
                <p *ngIf="edit">
                    Modify your category: {{category.name}}
                </p>
                <div class="form-group">
                    <input type="text" name="name" #name="ngModel" class="form-control" [(ngModel)]="category.name" required pattern="[a-zA-Z0-9 ]+">
                    <label for="name">Category name</label>
                    <small *ngIf="!name.valid && name.touched" class="invalid-feedback d-block">
                        Category name is required and must contain only letters.
                    </small>
                </div>
                <input *ngIf="status != 'success' && !edit" type="submit" name="" value="Save" class="btn btn-button" [disabled]="categoryForm.invalid">
                <input *ngIf="edit" type="submit" name="" value="Save Changes" class="btn btn-button" [disabled]="categoryForm.invalid">            
            </form>
        </div>
    </div>
</div>


import { Component } from '@angular/core';
import { Category } from '../../models/Category';
import { CategoryService } from '../../services/category.service';
import { Router, RouterModule } from '@angular/router';
import { UserService } from '../../services/user.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-category-new',
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './category-new.component.html',
  styleUrl: './category-new.component.css',
  providers: [CategoryService, UserService]
})
export class CategoryNewComponent {
  public title: string;
  public identity: any;
  public token: any;
  public category: Category;
  public status: any;
  public edit: boolean;

  constructor(
    private _categoryService: CategoryService,
    private _router: Router,
    private _userService: UserService 
  ) {
    this.title = 'Create a new category';
    this.identity = this._userService.getIdentity();
    this.token = this._userService.getToken();
    this.category = new Category(0, '');
    this.edit = false;
  }

  onSubmit(form: any) {
    // try catch is used to handle errors that may occur during the execution of the code inside the try block
    try {
      this._categoryService.createCategory(this.token, this.category).subscribe({
        next: (response) => {
          if (response.status == 'success') {
            this.status = 'success';
            setTimeout(() => {
              this._router.navigate(['/categories']).then(() => {
                window.location.reload();
              });
            }, 1000);
          } else {
            this.status = 'error';
          }
        },
        error: (error) => {
          this.status = 'error';
          console.log(error);
        }
      });
    } catch (error) {
      this.status = 'error';
      console.log(error);
    }
  }
}


/* All  */
*{
    margin: 0;
    padding: 0;
}

.general{
    padding-top: 30px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-position: center;
    background-size: cover;
    background-color: #bcb4bc;
}

/* Form */
.form-box{
    position: relative;
    width: 400px;
    min-height: 300px;
    height: auto;
    background-color: #bbbcb7;
    border: 2px solid rgba(255,255,255,0.5);
    border-radius: 20px;
    backdrop-filter: blur(15px);
    display: flex;
    justify-content: center;
    align-items: center;
}

h1{
    font-size: 2em;
    color: #3c342c;
    text-align: center;
    padding: 10px;
}

p {
    text-align: center; 
}

.form-group{
    position: relative;
    margin: 30px 0px;
    width: 310px;
    border-bottom: 2px solid #3c342c;
}

.form-group label{
    position: absolute;
    top: 50%;
    left: 5px;
    transform: translateY(-50%);
    color: #3c342c;
    font-size: 1em;
    pointer-events: none;
    transition: 0.5s;
}

.form-group input:focus ~ label,
.form-group input:valid ~ label{
top: -5px;
}

.form-group input {
    width: 100%;
    height: 50px;
    background: transparent;
    border: none;
    outline: none;
    font-size: 1em;
    padding:0 35px 0 5px;
    color: #3c342c;
}

.form-group input:focus{
    outline: none;
    box-shadow: none;
}

.form-control:focus {
    outline: none;
    box-shadow: none;
    border-color: #3c342c;
}

.form-group ion-icon{
    position: absolute;
    right: 8px;
    color: #3c342c;
    font-size: 1.2em;
    top: 20px;
}

.btn-button{
    width: 100%;
    height: 40px;
    border-radius: 40px;
    background: #fff;
    border: none;
    outline: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
    margin-bottom: 20px;
}

/* alerts */
.alert {
    margin-bottom: 20px;
    padding: 10px;
    border-radius: 5px;
}

.alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}


Course-detail

<div class="full-container">
    <!-- Video Area -->
    <div class="video">
        <iframe *ngIf="course && course.url" [src]="course.url" frameborder="0" id="panell" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>

    <!-- Content Area (Sidebar) -->
    <div class="content">
        <!-- Content accordion -->
        <div class="accordion-page" *ngIf="course && videos && videos.length > 0 && accordion && accordion.length > 0">
            <div class="accordion-container">
                <div class="accordion">
                    <div class="accordion-entries">
                        <ng-container *ngFor="let item of accordion; let itemIndex=index">
                            <ng-container *ngFor="let video of videos">
                                <details *ngIf="video.accordion_title && video.section == item" [open]="itemIndex === 0" name="courseAccordion" class="accordion-item">
                                    <summary class="accordion-header">
                                        <span class="header-text">{{ video.accordion_title }}</span>
                                        <svg aria-hidden="true" focusable="false" class="toggle-icon" viewBox="0 0 16 16" width="16" height="16" fill="#a371f7">
                                            <path d="M7.75 2a.75.75 0 0 1 .75.75V7h4.25a.75.75 0 0 1 0 1.5H8.5v4.25a.75.75 0 0 1-1.5 0V8.5H2.75a.75.75 0 0 1 0-1.5H7V2.75A.75.75 0 0 1 7.75 2Z"></path>
                                        </svg>
                                    </summary>
                                    <!-- Content for each section -->
                                    <div class="accordion-content">
                                        <ng-container *ngFor="let contentVideo of videos">
                                            <div *ngIf="contentVideo.section == item" class="content-item">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <div class="video-title" *ngIf="identity && identity.sub && course && course.buy && course.buy == 1" style="display: flex; align-items: flex-end;">
                                                            <a class="video-title-a" style="display: flex; flex-direction: column;">
                                                                <strong>{{ contentVideo.created_at | date:'dd/MM/yyyy' }}</strong>
                                                                <span>{{ contentVideo.title }}</span>
                                                            </a>
                                                        </div>
                                                        <div class="video-title" *ngIf="!identity || !identity.sub || !course || !course.buy">
                                                            <span>{{ contentVideo.title }}</span>
                                                        </div>
                                                    </div>
                                                    <div class="video-actions" *ngIf="identity && (identity.sub == 1 || identity.role == 'ROLE_ADMIN')">
                                                        <a *ngIf="identity && (identity.sub == 1 || identity.role == 'ROLE_ADMIN')" class="btn btn-admin-action" id="my-edit-button" [routerLink]="['/video-edit', contentVideo.id]" style="padding: 3px 6px;">
                                                            <i class="ti-pencil"></i>
                                                        </a>
                                                        <button *ngIf="identity && (identity.sub == 1 || identity.role == 'ROLE_ADMIN')" type="button" class="btn btn-admin-action" id="my-delete-button" data-bs-toggle="modal" [attr.data-bs-target]="'#deleteVideo' + contentVideo.id" style="padding: 3px 6px;">
                                                            <i class= "ti-trash"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </ng-container>
                                    </div>
                                </details>
                            </ng-container>
                        </ng-container>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Mensaje cuando no hay videos -->
        <div *ngIf="course && (!videos || videos.length === 0)" class="no-content-message">
            <p>No videos available for this course.</p>
        </div>
    </div>

    <!-- Comments Area -->
    <div class="comments">
        <div class="comments-buttons" style="display: flex; justify-content: center;">
            <a class="btn btn-button" data-bs-toggle="collapse" data-bs-target="#multiCollapseDescription" role="button" aria-expanded="false" (click)="show_des()">
                Description
            </a>
        </div>

        <!-- Description -->
        <div *ngIf="course">
            <div class="col">
                <div class="collapse" id="multiCollapseDescription">
                    <div class="card card-body">
                        <div class="card-comment" style="padding: 10px;">
                            <p>
                                {{ course.detail }}
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Modal -->
    <ng-container *ngFor="let video of videos">
        <div class="modal fade" [id]="'deleteVideo' + video.id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal_title fs-5" id="exampleModalLabel">
                            Are you sure you want to delete this video?
                        </h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        You are going to delete the video: {{ video.title }}.
                        <br>
                        This action cannot be undone.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-admin-action" data-bs-dismiss="modal" style="color: black;">
                            Close
                        </button>
                        <button type="button" class="btn btn-admin-action" style="color: black;" (click)="deleteVideo(video.id)">
                            <i class= "ti-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </ng-container>
</div>

import { Component } from '@angular/core';
import { VideoService } from '../../services/video.service';
import { CourseService } from '../../services/course.service';
import { UserService } from '../../services/user.service';
import { Router, ActivatedRoute, Params, RouterModule } from '@angular/router';
import { DomSanitizer } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';
import { forkJoin } from 'rxjs';

declare var $: any;

@Component({
  selector: 'app-course-detail',
  imports: [CommonModule, RouterModule],
  templateUrl: './course-detail.component.html',
  styleUrl: './course-detail.component.css',
  providers: [VideoService, CourseService, UserService]
})
export class CourseDetailComponent {
  public identity: any;
  public token: any;
  public course: any;
  public videos: any[] = [];
  public accordion: Array<any> = [];
  public status: any;
  public is_course: any;
  public contentAccordionOpen: boolean = false;
  public video: any;
  public is_video: any;

  constructor(
    private _videoService: VideoService,
    private _courseService: CourseService,
    private _userService: UserService,
    private _route: ActivatedRoute,
    private _router: Router,
    private sanitizer: DomSanitizer
  ){
    this.is_course = true;
    this.is_video = false;
    this.identity = this._userService.getIdentity();
    this.token = this._userService.getToken();
  }

  ngOnInit(): void {
    // Cargar ambos datos al mismo tiempo
    this.loadCourseData();
  }

  loadCourseData() {
    this._route.params.subscribe(params => {
      let id = +params['id'];
      
      // Usar forkJoin para cargar ambos servicios al mismo tiempo
      forkJoin({
        course: this._courseService.getCourseInfo(id, this.token),
        videos: this._videoService.getVideosByCourse(id)
      }).subscribe({
        next: (result) => {
          // Procesar respuesta del curso
          if (result.course.status == 'success') {
            this.course = result.course.course;
            this.accordion = result.course.accordion;
            // Para el video de YouTube
            var results = this.course.url.match('[\\?&]v=([^&#]*)');
            var video = (results === null) ? this.course.url : results[1];
            this.course.url = this.sanitizer.bypassSecurityTrustResourceUrl('https://www.youtube.com/embed/' + video + '?controls=0');
          }

          // Procesar respuesta de videos
          if (result.videos.status == 'success') {
            this.videos = result.videos.videos || [];
          } else {
            this.videos = [];
          }

        },
        error: (error) => {
          console.log('Error loading data:', error);
          this.status = 'error loading data';
          // Asegurar que siempre tenemos arrays
          this.videos = [];
          this.accordion = [];
        }
      });
    });
  }

  getCourse() {
    this._route.params.subscribe(params => {
      let id = +params['id'];
      this._courseService.getCourseInfo(id, this.token).subscribe(
        response => {
          if (response.status == 'success') {
            this.course = response.course;
            this.accordion = response.accordion;
            // for the youtube video
            var results = this.course.url.match('[\\?&]v=([^&#]*)');
            var video = (results === null) ? this.course.url : results[1];
            this.course.url = this.sanitizer.bypassSecurityTrustResourceUrl('https://www.youtube.com/embed/' + video + '?controls=0');
          } else {
            this.status = 'error on getCourse()';
          }
        },
        error => {
          console.log(error);
        }
      )
    })
  }

  getVideosByCourse() {
    this._route.params.subscribe(params => {
      let id = +params['id'];
      this._videoService.getVideosByCourse(id).subscribe(
        response => {
          if (response.status == 'success') {
            this.videos = response.videos || [];
          } else {
            this.status = 'error';
            this.videos = [];
          }
        },
        error => {
          console.log(error);
        }
      )
    })
  }

  getVideo(id: any) {
    this._videoService.getVideo(id).subscribe(
      response => {
        if (response.status == 'success') {
          this.is_course = false;
          this.is_video = true;
          this.video = response.video;
          // for the youtube video
          var results = this.video.url.match('[\\?&]v=([^&#]*)');
          var video = (results === null) ? this.video.url : results[1];
          this.video.url = this.sanitizer.bypassSecurityTrustResourceUrl('https://www.youtube.com/embed/' + video + '?controls=0');
          
          // Actualizar el iframe principal con el nuevo video
          this.course.url = this.video.url;
        } else {
          this.status = 'error on getVideo()';
        }
      },
      error => {
        console.log(error);
      }
    )
  }

  deleteVideo(id: any) {
    this._videoService.delete(this.token, id).subscribe(
      response => {
        if (response.status =='success') {
          this.getVideosByCourse();
          // Cerrar el modal manualmente
          const modal = document.getElementById('deleteVideo' + id);
          if (modal) {
            const modalInstance = (window as any).bootstrap.Modal.getInstance(modal);
            if (modalInstance) {
              modalInstance.hide();
            }
          }
        } else {
          this.status = 'error on deleteVideo()';
        }
      },
      error => {
        console.log(error);
      }
    )
  }

  // Method to show Questions and Answers
  show_chat() {
    $('#multiCollapseDescription').hide();
    $('#multiCollapseContent').hide();
    $('#multiCollapseChat').show();
  }

  // Method to show Description
  show_des() {
    $('#multiCollapseChat').hide();
    $('#multiCollapseDescription').show();
  }

  // Method to show Content
  toggleContentAccordion() {
    // Hide the other multicollapses
    $('#multiCollapseChat').hide();
    $('#multiCollapseDescription').hide();
    
    // Show the Content collapse
    $('#multiCollapseContent').show();
    
    this.contentAccordionOpen = !this.contentAccordionOpen;
    
    // if the accordion is closed, we close all the accordion
    if (!this.contentAccordionOpen) {
      setTimeout(() => {
        // Wait for the transition to finish
        const detailsElements = document.querySelectorAll('details[name="courseAccordion"]');
        detailsElements.forEach(element => {
          if (element.hasAttribute('open')) {
            (element as HTMLDetailsElement).open = false;
          }
        });
      }, 100);
    } else {
      // if the accordion is opened, we open the first video 
      setTimeout(() => {
        const detailsElements = document.querySelectorAll('details[name="courseAccordion"]');
        if (detailsElements.length > 0) {
          (detailsElements[0] as HTMLDetailsElement).open = true;
        }
      }, 300);
    }
  }
}


* {
    box-sizing: border-box;
}

.full-container {
    width: 100%;
    max-width: 100vw;
    display: grid;
    grid-template-areas: 
        "video content"
        "comments content";
    grid-template-columns: 1fr 300px;
    grid-template-rows: auto auto;
    gap: 10px;
    padding-top: 20px;
    min-height: 100vh;
}

/* Grid Areas */
.video {
    grid-area: video;
    width: 100%;
}

.content {
    grid-area: content;
    width: 100%;
    max-height: 100dvh;
    padding: 0 10px 0 10px;
}

.comments {
    grid-area: comments;
    width: 100%;
}

/* Responsive Grid */
@media (max-width: 768px) {
    .full-container {
        grid-template-areas: 
            "video"
            "content"
            "comments";
        grid-template-columns: 1fr;
        grid-template-rows: auto auto auto;
    }
    
    .content {
        border-left: none;
        border-top: 1px solid #ddd;
        max-height: none;
    }
}

/* iframe */
iframe {
    width: 100%;
    max-width: 100%;
    aspect-ratio: 16/9;
    border-radius: 10px;
}

/* Mensaje cuando no hay contenido */
.no-content-message {
    padding: 20px;
    text-align: center;
    color: #666;
    background: #f8f9fa;
    border-radius: 8px;
}

.no-content-message p {
    margin: 0;
    font-style: italic;
}

/* Botones (opcional) */
.comments-buttons a,
.content .btn-button {
    text-decoration: none;
    color: inherit;
    outline: none;
    padding: 8px 12px;
    margin-right: 10px;
    margin-bottom: 10px;
    display: inline-block;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: #f8f9fa;
}

.content .btn-button:hover,
.comments-buttons a:hover {
    background: #e9ecef;
}

/* Acordeones, modales y demás estilos de video-detail */
#multiCollapseDescription  .card-body {
    background: transparent;
    border: none;
}

#multiCollapseDescription  .card-body .card-comment {
    background-color: #bbbcb7;
    border: 2px solid rgba(255,255,255,0.5);
    border-radius: 20px;
    backdrop-filter: blur(15px);
}

.accordion-page {
    width: 100%;
    background: transparent;
    color: black;
}

.accordion-container {
    width: 100%;
    max-width: 100%;
}

.accordion {
    --border-color: #223;
    border: 1px solid var(--border-color);
    border-radius: .25rem;
    overflow: hidden;
    width: 100%;
}

.accordion-entries {
    display: flex;
    flex-direction: column;
    padding: 1rem;
    width: 100%;
}

details {
    border: none;
    width: 100%;
}

.accordion-item {
    background: transparent;
    border-bottom: 1px solid black;
    border-radius: 0%;
    width: 100%;
    margin-bottom: 20px;
}

.accordion-header {
    cursor: pointer;
    font-weight: 700;
    padding: 5px 0;
    font-size: 1rem; /* Reducido para el sidebar */
    color: black;
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
}

.toggle-icon {
    opacity: 1;
    transition: opacity .3s;
    fill: black;
    flex-shrink: 0;
}

[open] .toggle-icon {
    opacity: 0;
}

.accordion-header::-webkit-details-marker {
    display: none;
}

[open] .accordion-header {
    color: black;
}

.accordion-content {
    padding: 0 0 1rem;
    width: 100%;
}
.entry {
    display: flex;
    width: 100%;
    border-radius: 10px;
    flex-direction: column;
}

/* Acordion not checked */
.entry .content-inner {
    width: 100%;
    max-height: 0;
    overflow: hidden;
    background: #f8f9fa;
    border-radius: 4px;
    transition: max-height 0.3s ease-in, padding 0.3s ease-in;
}

/* Comments */
.comments {
    width: 100%;
}

.comments .comment {
    padding: 10px;
    border-bottom: 1px solid #ddd;
    margin-bottom: 10px;
}

.comments .comment:last-child {
    border-bottom: none;
}

.comments .comment .avatar_nav {
    width: 40px;
    height: 40px;
    margin-right: 10px;
    border-radius: 50%;
    overflow: hidden;
}

.comments .comment .avatar_nav img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.comments .comment .comment-body {
    flex: 1;
}

.comments .comment .comment-body p {
    margin: 0;
}

/* Comentarios botones */
.comments-buttons {
    margin-top: 10px;
}

.comments-buttons a {
    text-decoration: none;
    color: inherit;
    outline: none;
    padding: 8px 12px;
    margin-right: 10px;
    margin-bottom: 10px;
    display: inline-block;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: #f8f9fa;
}

.comments-buttons a:hover {
    background: #e9ecef;
}

/* Modal (para editar o responder, aunque no se use aquí) */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    display: none;
    align-items: center;
    justify-content: center;
}

.modal.active {
    display: flex;
}

.modal-dialog {
    background: white;
    border-radius: 8px;
    padding: 20px;
    width: 90%;
    max-width: 500px;
}

.modal-body {
    margin-bottom: 20px;
}

.modal-footer {
    text-align: right;
}

/* Dropdown (aunque no se use aquí) */
.dropdown {
    position: relative;
    display: inline-block;
}

.dropdown-content {
    position: absolute;
    right: 0;
    background: white;
    min-width: 160px;
    box-shadow: 0px 0px 5px rgba(0,0,0,0.2);
    z-index: 1;
    display: none;
}

.dropdown:hover .dropdown-content {
    display: block;
}

/* Botón dropdown */
.dropdown-btn {
    background: none;
    border: none;
    cursor: pointer;
}

/* User menu */
.user-dropdown {
    position: relative;
    display: inline-block;
}

.user-dropdown .dropdown-content {
    right: 0;
}

/* Checkbox personalizado */
.checkbox-container {
    display: flex;
    align-items: center;
    cursor: pointer;
}

.checkbox-container input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
}

.checkbox-container svg {
    width: 24px;
    height: 24px;
}

.path {
    fill: none;
    stroke: white;
    stroke-width: 6;
    stroke-linecap: round;
    stroke-linejoin: round;
    transition: stroke-dasharray 0.5s ease, stroke-dashoffset 0.5s ease;
    stroke-dasharray: 241 9999999;
    stroke-dashoffset: 0;
}

.checkbox-container input:checked ~ svg .path {
    stroke-dasharray: 70.5096664428711 9999999;
    stroke-dashoffset: -262.2723388671875;
}

/* Para formularios (aunque en este componente no se usen) */
form {
    display: flex;
    flex-direction: column;
}

form input,
form textarea,
form button {
    margin-bottom: 10px;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

/* Dropzone (solo si se usa en video-detail) */
.dropzone {
    background: #f8f9fa;
    border: 2px dashed #ccc;
    border-radius: 4px;
    padding: 20px;
    text-align: center;
    cursor: pointer;
}


Course-edit

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CourseService } from '../../services/course.service';
import { UserService } from '../../services/user.service';
import { CategoryService } from '../../services/category.service';
import { FormsModule } from '@angular/forms';
import { RouterModule, Router, ActivatedRoute } from '@angular/router';
import { GLOBAL } from '../../services/global';
import { NgxDropzoneModule } from 'ngx-dropzone';
import { Course } from '../../models/Course';
import { FileUploadService } from '../../services/file.upload.service';
import { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';

declare var iziToast: any;

@Component({
  selector: 'app-course-edit',
  imports: [CommonModule, FormsModule, RouterModule, NgxDropzoneModule, FroalaEditorModule, FroalaViewModule],
  templateUrl: '../course-new/course-new.component.html',
  styleUrl: '../course-new/course-new.component.css',
  providers: [CourseService, UserService, CategoryService]
})
export class CourseEditComponent {
  public title: string;
  public identity: any;
  public token: any;
  public course: any;
  public course_: Course;
  public status: any;
  public edit: boolean;
  public url_back: any;
  public url: any;
  public categories: any;
  public resetVar = true;
  public uploading = false;

  // froala_options
  public froala_options: Object = {
    // chatCounter: true is for the chat counter 
    charCounterCount: true,
    // toolbarButtons is for the toolbar buttons
    toolbarButtons: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // toolbarButtonsXS is for the toolbar buttons in xs devices
    toolbarButtonsXS: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // toolbarButtonsSM is for the toolbar buttons in sm devices
    toolbarButtonsSM: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // toolbarButtonsMD is for the toolbar buttons in md devices
    toolbarButtonsMD: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // backgroundColor is for the background color of the editor
    colorsBackground: ['#61BD6D', '#1ABC9C', '#54ACD2', 'REMOVE'],
    // events is for the events that are triggered in the editor
    // initialized is for the initialized event
    events: {
      initialized: function () {
        console.log('Froala Editor Initialized');
      }
    }
  };

  // ngx-dropzone options
  files: File[] = [];

  constructor(
    private _courseService: CourseService,
    private _userService: UserService,
    private _categoryService: CategoryService,
    private fileUploadService: FileUploadService,
    private _route: ActivatedRoute,
    private _router: Router
  ){
    this.title = 'Edit the course';
    this.url_back = GLOBAL.url;
    this.course = this._courseService.getCourse();
    this.identity = this._userService.getIdentity();
    this.token = this._userService.getToken();
    this.edit = true;
    this.course_ = new Course(
      this.course.id,
      this.course.name,
      this.course.category_id,
      this.course.detail,
      this.course.image,
      this.course.url,
      this.course.accordion,
      this.course.current_price,
      this.course.previous_price,
      this.course.num_sales);
  }

  ngOnInit(): void {
    this.getCategories();
    this.getCourse();
  }
  
  onSelect(event: any) {
    this.files.push(...event.addedFiles);
  }
  
  onRemove(event: any) {
    this.files.splice(this.files.indexOf(event), 1);
  }

  onRemoveAll(): void {
    // Clean the array of files
    this.files = [];
    
    if (this.course && this.course.image) {
      this.course.image = null;
    }
  }

  // creaate a promise with no value 
  uploadCourse(): Promise<void> {
    return new Promise((resolve, reject) => {
      // Check if files are selected
      this.fileUploadService.uploadCourse(this.files[0]).subscribe({
        next: (response: any) => {
          // Check if the response contains an image
          if (response.image) {
            // Update the user object with the new image
            this.course_.image = response.image;
            this.course.image = response.image;
            // Save the new image in local storage
            localStorage.setItem('Course', JSON.stringify(this.course));
            // To indicate that the image is uploaded and the uploading is finished
            this.uploading = false;
            // Indicate success of the promise
            resolve();
          } else {
            this.status = 'error';
            this.uploading = false;
            reject('Error uploading image');
          }
        },
        error: (error) => {
          console.log(error);
          this.status = 'error';
          this.uploading = false;
          reject(error);
        }
      });
    });
  }

  stripHtml(html: string): string {
    const temporalElement = document.createElement('div');
    temporalElement.innerHTML = html;
    return temporalElement.textContent || temporalElement.innerText || '';
  }
  
  // onSubmit method to handle form submission
  // form is the form object that is passed from the template
  // async is used to indicate that this method is asynchronous and will return a promise, so we can use await inside it
  async onSubmit(form: any) {
    // try catch is used to handle errors that may occur during the execution of the code inside the try block
    try {
      // First, check if the user has selected any files to upload
      if (this.files.length > 0) {
        this.uploading = true;
        // Call the uploadImage method to upload the image
        // and await for it to finish before proceeding
        await this.uploadCourse();
      }
      this.course.category_id = Number(this.course.category_id);
      if (form.valid) {
        // Limpia el HTML de la descripción antes de guardar
        this.course.detail = this.stripHtml(this.course.detail);
      }
      // Save the user data
      this._courseService.update(this.token, this.course, this.course.id).subscribe({
        next: (response) => {
          if (!response.course) {
            this.status = 'error';
            // iziToast
            iziToast.show({
              title: 'Error',
              titleColor: '#FF0000',
              color: '#FFF',
              class: 'text-danger',
              position: 'topRight',
              message: 'The course has not been updated.'
            });
          } else {
            this.status = 'success';
            // iziToast
            iziToast.show({
              title: 'Success',
              titleColor: '#1DC74C',
              color: '#FFF',
              class: 'text-success',
              position: 'topRight',
              message: 'The course has been updated successfully.'
            });
            this.course = response.course;
            localStorage.setItem('Course', JSON.stringify(this.course));
            // Make a timeout to scroll to the top of the page after 100ms
            setTimeout(() => {
              // Scroll to the top of the page in a smooth way
              window.scrollTo({ top: 0, behavior: 'smooth' });
              // Alternative using ViewChild:
              // this.topElement.nativeElement.scrollIntoView({ behavior: 'smooth' });
              // wait to reload the page
              setTimeout(() => {
                this._router.navigate(['/home']).then(() => {
                  window.location.reload();
                  localStorage.removeItem('Course');
                });
              }, 1000);
            }, 100);
          }
        },
        error: (error) => {
          this.status = 'error';
          console.log(error);
        }
      });
    } catch (error) {
      this.status = 'error';
      console.log(error);
    }
  }

  getCategories() {
    this._categoryService.getCategories().subscribe({
      next: (response) => {
        if (response.status == 'success') {
          this.categories = response.categories;
        }
      },
      error: (error) => {
        console.log(error);
      }
    });
  }

  getCourse() {
    this._route.params.subscribe({
      next: (params) => {
        var id = +params['id'];
        this._courseService.getCourseInfo(id, this.token).subscribe({
          next: (response) => {
            if (response.status == 'success') {
              this.course = response.course;
              this.course_.id = this.course.id;
              this.course_.name = this.course.name; 
            } else {
              this._router.navigate(['/home']);
            }
          },
          error: (error) => {
            console.log(error);
            this._router.navigate(['/home'])
          }
        });
        },
      error: (error) => {
        console.log(error);
        this.status = 'error';
        this._router.navigate(['/home'])
      } 
    });
  }
}


Course-new

<div class="general" data-aos="flip-up" data-aos-easing="ease-out-cubic" data-aos-duration="2000">
    <div class="form-box">
        <div class="form-value">
            <div class="alert alert-success" *ngIf="status == 'success' && !edit">
                <p style="text-align: center;">
                    <strong>Course created successfully!</strong>
                </p>
            </div>
            <div class="alert alert-success" *ngIf="status == 'success' && edit">
                <p style="text-align: center;">
                    <strong>Course updated successfully!</strong>
                </p>
            </div>
            <div class="alert alert-danger" *ngIf="status == 'error' && !edit">
                <p style="text-align: center;">
                    <strong>Error!</strong> Course not created. 
                </p>
            </div>
            <div class="alert alert-danger" *ngIf="status == 'error' && edit">
                <p style="text-align: center;">
                    <strong>Error!</strong> Course not updated. 
                </p>
            </div>
            <!-- Course create form -->
            <form #courseForm="ngForm" (ngSubmit)="onSubmit(courseForm)">
                <h1 >
                    {{ title }}
                </h1>
                <p *ngIf="status != 'success' && !edit">
                    Create a new course to start teaching.
                </p>
                <p *ngIf="edit">
                    Modify your course: {{course.name}}.
                </p>
                <div class="form-group">
                    <input type="text" name="name" #name="ngModel" class="form-control" [(ngModel)]="course.name" required pattern="^[a-zA-Z0-9 ]{1,20}$" maxlength="20">
                    <label for="name">Course name</label>
                    <small *ngIf="!name.valid && name.touched" class="invalid-feedback d-block">
                        Course name is required and must contain only letters (Max.Length 20).
                    </small>
                </div>
                <div class="form-group">
                    <select name="category_id" class="form-control" #category_id="ngModel" [(ngModel)]="course.category_id">
                        <option *ngFor="let category of categories" value="{{ category.id }}">
                            {{ category.name }}
                        </option>
                    </select>
                    <label for="category_id">Categories</label>
                </div>
                <div class="form-group" style="border: transparent;">
                    <textarea type="text" name="detail" class="form-control" #detail="ngModel" [froalaEditor]="froala_options" [froalaModel]="course.detail" [(ngModel)]="course.detail" required></textarea>
                    <label for="detail" class="description-label">Description</label>
                    <small *ngIf="!detail.valid && detail.touched" class="invalid-feedback d-block">
                        Description is required.
                    </small>
                </div>
                <div class="form-group">
                    <div *ngIf="edit && course.image != null" class="course-container">
                        <p class="course-label" for="image">Image of the course</p>
                        <!-- show the image -->
                        <div class="course-image-container">
                            <img [src]="url_back + 'courses/image/' + course.image" class="course-image">
                        </div>
                    </div>
        
                    <!-- Dropzone -->
                    <div class="dropzone-container">
                        <ngx-dropzone [multiple]="false" [maxFileSize]="600000000" [accept]="'image/*'" (change)="onSelect($event)">
                            <ngx-dropzone-label>
                                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M7 10V9C7 6.23858 9.23858 4 12 4C14.7614 4 17 6.23858 17 9V10C19.2091 10 21 11.7909 21 14C21 15.4806 20.1956 16.8084 19 17.5M7 10C4.79086 10 3 11.7909 3 14C3 15.4806 3.8044 16.8084 5 17.5M7 10C7.43285 10 7.84965 10.0688 8.24006 10.1959M12 12V21M12 12L15 15M12 12L9 15" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                                </svg>
                                <p>Browse File to upload!</p>
                            </ngx-dropzone-label>
                            <ngx-dropzone-preview *ngFor="let f of files" [removable]="true" (removed)="onRemove(f)">
                                <ngx-dropzone-label>
                                    <svg fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                        <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                                    </svg>
                                    <span>{{ f.name }} ({{ f.size / 1024 | number:'1.0-2' }} KB)</span>
                                </ngx-dropzone-label>
                            </ngx-dropzone-preview>
                        </ngx-dropzone>

                        <!-- File status footer -->
                        <div class="file-status-footer">
                            <svg class="file-icon" fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                            </svg>
                            <p>
                                <span *ngIf="files?.length === 0">Not selected file</span>
                                <span *ngIf="files?.length === 1">{{ files[0].name }}</span>
                                <span *ngIf="files && files.length > 1">{{ files.length }} files selected</span>
                            </p>
                            <svg class="delete-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" (click)="onRemoveAll()">
                                <path d="M5.16565 10.1534C5.07629 8.99181 5.99473 8 7.15975 8H16.8402C18.0053 8 18.9237 8.9918 18.8344 10.1534L18.142 19.1534C18.0619 20.1954 17.193 21 16.1479 21H7.85206C6.80699 21 5.93811 20.1954 5.85795 19.1534L5.16565 10.1534Z" stroke="currentColor" stroke-width="2"></path>
                                <path d="M19.5 5H4.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                                <path d="M10 3C10 2.44772 10.4477 2 11 2H13C13.5523 2 14 2.44772 14 3V5H10V3Z" stroke="currentColor" stroke-width="2"></path>
                            </svg>
                        </div>

                        <div class="upload-status">
                            <span *ngIf="!uploading">Upload image</span>
                            <span *ngIf="uploading">Uploading...</span>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <input type="text" name="url" #url="ngModel" [(ngModel)]="course.url" class="form-control" required>
                    <label for="url">URL of the course</label>
                    <small *ngIf="!url.valid && url.touched" class="invalid-feedback d-block">
                        Invalid URL.
                    </small>
                </div>
                <div class="form-group">
                    <input type="number" name="accordion" min="1" max="50" #accordion="ngModel" [(ngModel)]="course.accordion" class="form-control" required>
                    <label for="accordion">Sections of the course</label>
                    <small *ngIf="!accordion.valid && accordion.touched" class="invalid-feedback d-block">
                        Number of sections must be between 1 and 50.
                    </small>
                </div>
                <div class="form-group">
                    <input type="number" name="current_price" #current_price="ngModel" [(ngModel)]="course.current_price" class="form-control" required>
                    <label for="current_price">Current price (USD)</label>
                    <small *ngIf="!current_price.valid && current_price.touched" class="invalid-feedback d-block">
                        Price is required.
                    </small>
                </div>
                <div class="form-group">
                    <input type="number" name="previous_price" #previous_price="ngModel" [(ngModel)]="course.previous_price" class="form-control" required>
                    <label for="previous_price">Previous price (USD)</label>
                    <small *ngIf="!previous_price.valid && previous_price.touched" class="invalid-feedback d-block">
                        Price is required.
                    </small>
                </div>
                <input *ngIf="status != 'success' && !edit" type="submit" name="" value="Save" class="btn btn-button" [disabled]="courseForm.invalid || uploading">
                <input *ngIf="edit" type="submit" name="" value="Save Changes" class="btn btn-button" [disabled]="courseForm.invalid || uploading">
            </form>
        </div>
    </div>
</div>

import { Component, OnInit } from '@angular/core';
import { Course } from '../../models/Course';
import { CourseService } from '../../services/course.service';
import { UserService } from '../../services/user.service';
import { GLOBAL } from '../../services/global';
import { FileUploadService } from '../../services/file.upload.service';
import { CategoryService } from '../../services/category.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NgxDropzoneModule } from 'ngx-dropzone';
import { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';

// this is a global variable for iziToast
declare var iziToast: any;

@Component({
  selector: 'app-course-new',
  imports: [CommonModule, FormsModule, NgxDropzoneModule, FroalaEditorModule, FroalaViewModule],
  templateUrl: './course-new.component.html',
  styleUrl: './course-new.component.css',
  providers: [UserService, CourseService, CategoryService]
})
export class CourseNewComponent {
  public title: string;
  public identity: any;
  public token: any;
  public course: any;
  public course_: Course;
  public status: any;
  public edit: boolean;
  public url_back: any;
  public url: any;
  public categories: any;
  public uploading = false;

  // froala_options
  public froala_options: Object = {
    // chatCounter: true is for the chat counter 
    charCounterCount: true,
    // toolbarButtons is for the toolbar buttons
    toolbarButtons: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // toolbarButtonsXS is for the toolbar buttons in xs devices
    toolbarButtonsXS: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // toolbarButtonsSM is for the toolbar buttons in sm devices
    toolbarButtonsSM: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // toolbarButtonsMD is for the toolbar buttons in md devices
    toolbarButtonsMD: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // backgroundColor is for the background color of the editor
    colorsBackground: ['#61BD6D', '#1ABC9C', '#54ACD2', 'REMOVE'],
    // events is for the events that are triggered in the editor
    // initialized is for the initialized event
    events: {
      initialized: function () {
        console.log('Froala Editor Initialized');
      }
    }
  };

  // ngx-dropzone options
  files: File[] = [];

  constructor(
    private _courseService: CourseService,
    private _userService: UserService,
    private _categoryService: CategoryService,
    private fileUploadService: FileUploadService
  ){
    this.title = 'Create a course';
    this.url_back = GLOBAL.url;
    this.course = this._courseService.getCourse();
    this.identity = this._userService.getIdentity();
    this.token = this._userService.getToken();
    this.edit = false;
    this.course_ = new Course(
      this.course.id,
      this.course.name,
      this.course.category_id,
      this.course.detail,
      this.course.image,
      this.course.url,
      this.course.accordion,
      this.course.current_price,
      this.course.previous_price,
      this.course.num_sales);
  }

  ngOnInit(): void {
    this.getCategories();
  }
  
  onSelect(event: any) {
    this.files.push(...event.addedFiles);
  }
  
  onRemove(event: any) {
    this.files.splice(this.files.indexOf(event), 1);
  }

  onRemoveAll(): void {
    // Limpiar el array de archivos
    this.files = [];
  }

  // creaate a promise with no value 
  uploadCourse(): Promise<void> {
    return new Promise((resolve, reject) => {
      // Check if files are selected
      this.fileUploadService.uploadCourse(this.files[0]).subscribe({
        next: (response: any) => {
          // Check if the response contains an image
          if (response.image) {
            // Update the user object with the new image
            this.course_.image = response.image;
            this.course.image = response.image;
            // Save the new image in local storage
            localStorage.setItem('Course', JSON.stringify(this.course));
            // To indicate that the image is uploaded and the uploading is finished
            this.uploading = false;
            // Indicate success of the promise
            resolve();
          } else {
            this.status = 'error';
            this.uploading = false;
            reject('Error uploading image');
          }
        },
        error: (error) => {
          console.log('Upload error details:', error);
          this.status = 'error';
          this.uploading = false;
          reject(error);
        }
      });
    });
  }

  stripHtml(html: string): string {
    const temporalElement = document.createElement('div');
    temporalElement.innerHTML = html;
    return temporalElement.textContent || temporalElement.innerText || '';
  }
  
  // onSubmit method to handle form submission
  // form is the form object that is passed from the template
  // async is used to indicate that this method is asynchronous and will return a promise, so we can use await inside it
  async onSubmit(form: any) {
    // try catch is used to handle errors that may occur during the execution of the code inside the try block
    try {
      // First, check if the user has selected any files to upload
      if (this.files.length > 0) {
        this.uploading = true;
        // Call the uploadImage method to upload the image
        // and await for it to finish before proceeding
        await this.uploadCourse();
      }
      this.course.category_id = Number(this.course.category_id);
      if (form.valid) {
        // Limpia el HTML de la descripción antes de guardar
        this.course.detail = this.stripHtml(this.course.detail);
      }
      // Save the user data
      this._courseService.create(this.token, this.course).subscribe({
        next: (response) => {
          if (!response.course) {
            this.status = 'error';
            // iziToast
            iziToast.show({
              title: 'Error',
              titleColor: '#FF0000',
              color: '#FFF',
              class: 'text-danger',
              position: 'topRight',
              message: 'The course has not been created.'
            });
          } else {
            this.status = 'success';
            // iziToast
            iziToast.show({
              title: 'Success',
              titleColor: '#1DC74C',
              color: '#FFF',
              class: 'text-success',
              position: 'topRight',
              message: 'The course has been created successfully.'
            });
            this.course = response.course;
            localStorage.setItem('Course', JSON.stringify(this.course));
            // Make a timeout to scroll to the top of the page after 100ms
            setTimeout(() => {
              // Scroll to the top of the page in a smooth way
              window.scrollTo({ top: 0, behavior: 'smooth' });
              // Alternative using ViewChild:
              // this.topElement.nativeElement.scrollIntoView({ behavior: 'smooth' });
              // wait to reload the page
              setTimeout(() => {
                window.location.reload();
                localStorage.removeItem('Course');
              }, 1000);
            }, 100);
          }
        },
        error: (error) => {
          this.status = 'error';
          console.log(error);
        }
      });
    } catch (error) {
      this.status = 'error';
      console.log(error);
    }
  }

  getCategories() {
    this._categoryService.getCategories().subscribe({
      next: (response) => {
        if (response.status == 'success') {
          this.categories = response.categories;
        }
      },
      error: (error) => {
        console.log(error);
      }
    });
  }
}


/* All  */
*{
    margin: 0;
    padding: 0;
}

.general{
    padding-top: 30px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-position: center;
    background-size: cover;
    background-color: #bcb4bc;
}

/* Form */
.form-box{
    position: relative;
    width: 400px;
    min-height: 650px;
    height: auto;
    background-color: #bbbcb7;
    border: 2px solid rgba(255,255,255,0.5);
    border-radius: 20px;
    backdrop-filter: blur(15px);
    display: flex;
    justify-content: center;
    align-items: center;
}

h1{
    font-size: 2em;
    color: #3c342c;
    text-align: center;
    padding: 10px;
}

p {
    text-align: center; 
}

.course-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
}

/* Etiqueta para el avatar */
.course-label {
    display: block;
    font-size: 1em; /* text-sm */
    font-weight: 500; /* font-medium */
    color: #3c342c; /* text-custom-brown */
    position: absolute;
    transform: translateY(-160%);
}

/* Contenedor de la imagen del avatar */
.course-image-container {
    margin-bottom: 0.5rem; /* mb-2 */
}

/* Imagen del avatar */
.course-image {
    width: 4rem; /* w-16 */
    object-fit: cover; /* object-cover */
}

.form-group{
    position: relative;
    margin: 30px 0px;
    width: 310px;
    border-bottom: 2px solid #3c342c;
}

.form-group label{
    position: absolute;
    top: 50%;
    left: 5px;
    transform: translateY(-50%);
    color: #3c342c;
    font-size: 1em;
    pointer-events: none;
    transition: 0.5s;
}

.form-group .description-label{
    position: absolute;
    top: -5px;
    left: 5px;
    transform: translateY(-80%);
    color: #3c342c;
    font-size: 1em;
    pointer-events: none;
    transition: 0.5s;
}

.form-group select,
.form-group textarea {
    width: 100%;
    background: transparent;
    border: none;
    outline: none;
    font-size: 1em;
    padding: 0 35px 0 5px;
    color: #3c342c;
}

.form-group textarea {
    height: 70px;
    padding-top: 15px;
}

.form-group select {
    height: 50px;
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    padding-right: 20px;
    background-image: url("data:image/svg+xml;utf8,<svg fill='%233c342c' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>");
    background-repeat: no-repeat;
    background-position: right 5px center;
}

.form-group input:focus ~ label,
.form-group input:valid ~ label,
.form-group textarea:focus ~ label,
.form-group textarea:valid ~ label,
.form-group select:focus ~ label,
.form-group select ~ label{
top: -5px;
}

.form-group input {
    width: 100%;
    height: 50px;
    background: transparent;
    border: none;
    outline: none;
    font-size: 1em;
    padding:0 35px 0 5px;
    color: #3c342c;
}

.form-group input:focus,
.form-group textarea:focus,
.form-group select:focus {
    outline: none;
    box-shadow: none;
}

.form-control:focus {
    outline: none;
    box-shadow: none;
    border-color: #3c342c;
}

.form-group ion-icon{
    position: absolute;
    right: 8px;
    color: #3c342c;
    font-size: 1.2em;
    top: 20px;
}

.btn-button{
    width: 100%;
    height: 40px;
    border-radius: 40px;
    background: #fff;
    border: none;
    outline: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
    margin-bottom: 20px;
}

/* dropzone */
.dropzone-container {
    height: 16rem; 
    width: 100%;
    display: flex;
    flex-direction: column;
}

ngx-dropzone {
    flex: 1;
    width: 100%;
    border: 2px dashed #3c342c;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: transparent;
    overflow: hidden !important;
}

ngx-dropzone-label {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    cursor: pointer;
}

ngx-dropzone-label svg {
    height: 6rem;
    width: 6rem;
    color: #3c342c;
}

ngx-dropzone-label p {
    text-align: center;
    color: #3c342c;
    margin-top: 0.5rem;
}

ngx-dropzone-preview {
    background-color: transparent;
    border-radius: 0.375rem;
    padding: 0.5rem;
    max-width: 20rem;
    display: flex;
    align-items: center;
}

ngx-dropzone-preview ngx-dropzone-label {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
}

ngx-dropzone-preview ngx-dropzone-label svg {
    height: 1.5rem; /* h-6 */
    width: 1.5rem; /* w-6 */
    fill: #3c342c;
    margin-right: 0.5rem; /* mr-2 */
}

ngx-dropzone-preview ngx-dropzone-label span {
    flex: 1;
    font-size: 0.875rem; /* text-sm */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap; /* truncate */
}

.file-status-footer {
    margin-top: 0.5rem; /* mt-2 */
    background-color: transparent;
    width: 100%; /* w-full */
    height: 2.5rem; /* h-10 */
    padding: 0.5rem; /* p-2 */
    border-radius: 0.5rem; /* rounded-lg */
    display: flex;
    align-items: center;
    justify-content: space-between;
    color: #3c342c; /* text-custom-brown */
}

.file-status-footer svg.file-icon {
    height: 1.5rem; /* h-6 */
    width: 1.5rem; /* w-6 */
    fill: #3c342c; /* fill-custom-brown */
    background-color: transparent;
    border-radius: 9999px; /* rounded-full */
    padding: 0.125rem; /* p-0.5 */
}

.file-status-footer p {
    flex: 1;
    text-align: center;
    font-size: 0.875rem; /* text-sm */
}

.file-status-footer svg.delete-icon {
    height: 1.5rem; /* h-6 */
    width: 1.5rem; /* w-6 */
    color: #3c342c; /* text-custom-brown */
    cursor: pointer;
}

.file-status-footer svg.delete-icon:hover {
    color: #3c342c; /* hover:text-custom-brown - esto parece redundante pero mantengo la estructura */
    transition: colors 0.3s ease; /* transition-colors */
}

.upload-status {
    display: flex;
    align-items: center;
    margin-top: 0.5rem; /* mt-2 */
}

.upload-status span {
    color: #3c342c; /* text-custom-brown */
    font-size: 0.875rem; /* text-sm */
}

/* alerts */
.alert {
    margin-bottom: 20px;
    padding: 10px;
    border-radius: 5px;
}

.alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

/* froala editor */
:host ::ng-deep .fr-newline{
    background: transparent !important;
    border: transparent;
}

:host ::ng-deep .fr-view{
    background: transparent !important;
    border: transparent;
}

:host ::ng-deep .fr-box{
    background: transparent !important;
    border: 2px solid #3c342c;
    color: #3c342c;
}

:host ::ng-deep .fr-toolbar {
    background: transparent !important;
    border-bottom: 2px solid #3c342c;
}

:host ::ng-deep #fr-logo>span,
:host ::ng-deep .fr-counter {
    color: #3c342c;
}

:host ::ng-deep .fr-logo {
    fill: #3c342c;
}

:host ::ng-deep .fr-wrapper {
    background: transparent !important;
    border: transparent;
    color: #3c342c;
}

:host ::ng-deep .fr-element {
    background: transparent !important;
    border: transparent;
    color: #3c342c;
}

:host ::ng-deep .fr-second-toolbar {
    background: transparent !important;
    border-top: 2px solid #3c342c;
    color: #3c342c;
}


Home

<div style="background-color:#bcb4bc;">
    <div class="container">
        <div class="row">
            <div class="col mt-3">
                <div class="d-flex align-items-center justify-content-center gap-3" *ngIf="identity && identity.sub" data-aos="fade-right" data-aos-offset="300" data-aos-easing="ease-in-sine">
                    <div *ngIf="identity && identity.image" class="home_welcome">
                        <img src="{{ url + 'user/avatar/' + identity.image }}">
                    </div>
                    <span class="my-auto fw-bold" style="font-size: x-large;">Hello again, {{ identity.name + ' ' + identity.surname + '!'}}</span>
                </div>
                <hr>
                <!-- Courses cards -->
                <div class="row row-cols-2 g-4">
                    <div class="col" *ngFor="let course of courses; let indice=index">
                        <article class="card card_1" data-aos="zoom-in" data-aos-duration="1500">
                            <div class="card_inner">
                                <div class="card_heading">
                                    {{ course.name }}
                                </div>

                                <div class="card_left">
                                    <div class="card_details_preview">
                                        {{ course.detail }}
                                    </div>
                                </div>

                                <div class="card_right">
                                    <div class="card_image_container">
                                        <div class="video_image" *ngIf="course.url && course.url != null">
                                            <a *ngIf="course.buy == 1" [routerLink]="['/video-detail', course.video]">
                                                <img [src]="getThumbnail(course.url,'maxresdefault')" alt="{{ course.name }}">
                                            </a>
                                            <a *ngIf="course.buy != 1" [routerLink]="['/course', course.id]">
                                                <img [src]="getThumbnail(course.url,'maxresdefault')" alt="{{ course.name }}">
                                            </a>
                                        </div>
                                        <div class="video_image" *ngIf="!course.url || course.url == null">
                                            <a [routerLink]="['/video-detail',  course.video]">
                                                <img src="images/novideo.jpg" alt="No video available">
                                            </a>
                                            <a [routerLink]="['/course', course.id]">
                                                <img src="images/novideo.jpg" alt="No video available">
                                            </a>
                                        </div>
                                    </div>
                                    <!-- Price that will appear on hover -->
                                    <div class="card_actions">
                                        <div *ngIf="course.buy != 1 && course.cart != 1" class="card_price">
                                            ${{ course.current_price }}
                                        </div>

                                        <!-- Buttons if you are the admin -->
                                        <div class="card_buttons">
                                            <span>
                                                <a *ngIf="identity && (identity.sub == 1 || identity.role == 'ROLE_ADMIN')" class="btn btn-admin-action me-2" id="my-edit-button" [routerLink]="['/create-video', course.id]">
                                                    <i class="ti-plus"></i>
                                                </a>
                                                <a *ngIf="identity && (identity.sub == 1 || identity.role == 'ROLE_ADMIN')" class="btn btn-admin-action me-2" id="my-edit-button" [routerLink]="['/course-edit', course.id]">
                                                    <i class="ti-pencil"></i>
                                                </a>
                                                <button *ngIf="identity && (identity.sub == 1 || identity.role == 'ROLE_ADMIN')" type="button" class="btn btn-admin-action me-2" id="my-delete-button" data-bs-toggle="modal" [attr.data-bs-target]="'#delete' + course.id">
                                                    <i class= "ti-trash"></i>
                                                </button>
                                                <form *ngIf="identity" #cartForm="ngForm" (ngSubmit)="onSubmit(cartForm)">                                                    
                                                    <!-- Add to cart -->
                                                    <input type="hidden" name="course_id" value="course_id" #name="ngModel" [(ngModel)]="course.id">
    
                                                    <!-- If you have not bought it yet -->
                                                    <button *ngIf="course.buy != 1 && course.cart != 1" type="submit" name="" id="my-cart-button" value="Buy it" [disabled]="cartForm.invalid" class="btn btn-admin-action" style="font-size: 20px; color: black;">
                                                        <i class="ti-shopping-cart"></i>
                                                    </button>
    
                                                    <!-- If you already bought it -->
                                                    <a [routerLink]="['/video-detail', course.video]" *ngIf="course.buy == 1" class="btn btn-course">
                                                        Go to course
                                                    </a>
                                                </form>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </article>

                        <!-- Detail Modal -->
                        <div class="modal fade" [id]="'detail' + course.id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h1 class="modal_title fs-5" id="exampleModalLabel">
                                            {{ course.name }}
                                        </h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        {{ course.detail }}
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-admin-action" data-bs-dismiss="modal" style="color: black;">
                                            Close
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
        
                        <!-- Delete Modal -->
                        <div class="modal fade" [id]="'delete' + course.id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h1 class="modal_title fs-5" id="exampleModalLabel">
                                            Are you sure you want to delete this course?
                                        </h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        You are going to delete the course: {{ course.name }}.
                                        <br>
                                        This action cannot be undone.
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-admin-action" data-bs-dismiss="modal" style="color: black;">
                                            Close
                                        </button>
                                        <button type="button" class="btn btn-admin-action" style="color: black;" (click)="deleteCourse(course.id)">
                                            <i class= "ti-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CourseService } from '../../services/course.service';
import { UserService } from '../../services/user.service';
import { FormsModule } from '@angular/forms';
import { RouterModule, Router, ActivatedRoute } from '@angular/router';
import { GLOBAL } from '../../services/global';
import { CartService } from '../../services/cart.service';
import { Cart } from '../../models/Cart';
import { SaleService } from '../../services/sale.service';

@Component({
  standalone: true,
  selector: 'app-home',
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './home.component.html',
  styleUrl: './home.component.css',
  providers: [CourseService, UserService, CartService, SaleService]
})
export class HomeComponent {
  public title: string;
  public courses: any;
  public identity: any;
  public status: any;
  public token: any;
  public url: any;
  public cart: any;

  constructor(
    private _courseService: CourseService,
    private _userService: UserService,
    private _cartService: CartService,
    private _saleService: SaleService,
    private _route: ActivatedRoute,
    private _router: Router
  ){
    this.title = 'Home';
    this.identity = this._userService.getIdentity();
    this.token = this._userService.getToken();
    this.url = GLOBAL.url;
    this.cart = new Cart(1, 1, 1, 1);
  }

  ngOnInit(){
    this._route.params.subscribe(params => {
      let id = +params['id'];
      let text = params['text'];
      if (id || text) {
        if (this.identity.sub || this.identity.id || this.identity.name) {
          if (id) {            
            this.getSalesByCategory(id);
          } else {
            this.getSalesByText(text);
          }
        } else {
          if (id) {            
            this.getCoursesByCategory(id);
          } else {
            this.getCoursesByText(text);
          }
        }
      } else {
        if (this.identity.sub) {
          this.getSales();
        } else {
          this.getCourses(); 
        }
      } 
    });
  }

  getCourses(){
    this._courseService.getCourses().subscribe(
      response => {
        if(response.status == 'success'){
          this.courses = response.courses;
        }
      },
      error => {
        console.log(error);
      }
    ); 
  }

  // show the videos of youtube
  getThumbnail(url: string, size: any) {
    var video, results, thumbnail_url;  

    // if url is null
    if (url === null) {
      return ''; 
    }
    // identification of youtube video
    results = url.match('[\\?&]v=([^&#]*)');
    // if results is null save into 'video', if results is not null save into 'results[1]'
    video = (results === null) ? url : results[1];
    // if size is not null
    if (size !== null) {
      thumbnail_url = 'https://img.youtube.com/vi/'+ video + '/' + size+ '.jpg'; 
    } else {
      // default size
      thumbnail_url = 'https://img.youtube.com/vi/' + video + '/mqdefault.jpg';
    }
    return thumbnail_url;
  }

  // delete course
  deleteCourse(id: any){
    this._courseService.delete(this.token, id).subscribe(
      response => {
        this.getCourses();
        setTimeout(() => {
          window.location.reload();
        }, 100);
      },
      error => {
        console.log(error);
      }
    );
  }

  // onSubmit of cart
  onSubmit(form: any){
    if(this.identity.sub == null || this.identity.sub == undefined || this.identity.sub == ''){
      this._router.navigate(['/login']);
    } else if(this.identity.sub) {
      this.cart.course_id = form.value.course_id;
      this._cartService.store(this.token, this.cart).subscribe(
        response => {
          if(response.status == 'success'){
            this.status = response.status;
            this.cart = response;
            setTimeout(() => {
              window.location.reload();
            }, 100);
          }
        },
        error => {
          console.log(error);
        }
      )
    }
  }

  // get sales
  getSales(){
    this._saleService.getSales(this.token).subscribe(
      response => {
        if(response.status =='success'){
          this.courses = response.courseStatus;
        } else {
          this._router.navigate(['/home']);
        }
      },
      error => {
        console.log(error);
      }
    );
  }

  // get sales by category
  getSalesByCategory(id: any){
    this._saleService.getSalesByCategory(this.token, id).subscribe(
      response => {
        if(response.status =='success'){
          this.courses = response.courseStatus;
        } else {
          this._router.navigate(['/home']);
        }
      }
    )
  }

  // get courses by category
  getCoursesByCategory(id: any){
    this._courseService.getCoursesByCategory(id).subscribe(
      response => {
        if(response.status =='success'){
          this.courses = response.courses;
        } else {
          this._router.navigate(['/home']);
        }
      }
    )
  }

  // get sales by text
  getSalesByText(text: any){
    this._saleService.getSalesByText(this.token, text).subscribe(
      response => {
        if(response.status =='success'){
          this.courses = response.courseStatus;
        } else {
          this._router.navigate(['/home']);
        }
      }
    )
  }

  // get courses by text
  getCoursesByText(text: any){
    this._courseService.getCoursesByText(text).subscribe(
      response => {
        if(response.status =='success'){
          this.courses = response.courses;
        } else {
          this._router.navigate(['/home']);
        }
      }
    )
  }
}

/* Welcome */
.home_welcome {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 0px;
}

.home_welcome img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

/* Card */
.card_1 {
    box-sizing: border-box;
    background: #bbbcb7;
    border: 1px solid white;
    box-shadow: 12px 17px 51px rgba(0, 0, 0, 0.22);
    backdrop-filter: blur(6px);
    border-radius: 15px;
    transition: all 0.5s;
    user-select: none;
    color: black;
    position: relative;
    height: 320px;
    overflow: hidden;
    padding: 15px;
}

.card_1:hover {
    transform: scale(1.05);
    border: 1px solid black;
}

/* Card layout */
.card_inner {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto 1fr auto;
    grid-template-areas:
        "title title"
        "desc image"
        "actions actions";
    height: 100%;
    gap: 10px;
    align-items: center; /* Added to help vertical alignment within grid rows */
}

.card_left {
    grid-area: desc; /* Explicitly assign grid area */
    display: flex;
    flex-direction: column;
    justify-content: center; /* Keep vertical centering for description */
    align-self: center; /* Align the container itself vertically in the grid cell */
}

.card_right {
    grid-area: image;
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    /* Changed justify-content to center for initial vertical alignment */
    justify-content: center;
    height: 100%;
}

.card_heading {
    grid-area: title;
    font-weight: bold;
    font-size: 1.2em;
    text-align: center;
    /* Only transition transform here for smoother visual movement */
    transition: transform 0.5s linear; /* Changed timing function to linear */
    position: relative;
}

.card_details_preview {
    font-size: 0.9em;
    margin-top: 8px;
    -webkit-line-clamp: unset;
    line-clamp: unset;
    text-align: left;
    display: block;
    padding-right: 10px;
}

.card_image_container {
    /* Removed grid-area as it's now on card_right */
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    /* Ensure image transition matches title transition speed */
    transition: transform 0.5s linear; /* Changed timing function to linear */
    max-height: 180px;
    height: 100%; /* Allow height to fill */
    width: 100%; /* Ensure width is consistent */
    overflow: hidden;
}

.video_image {
    width: 100%;
    height: 100%; /* Make video image container fill its parent */
    overflow: hidden;
    border-radius: 10px;
    display: flex; /* Added for centering image inside */
    align-items: center; /* Added for centering image inside */
    justify-content: center; /* Added for centering image inside */
}

.video_image img {
    max-width: 100%; /* Use max-width/max-height to prevent distortion */
    max-height: 100%;
    height: auto; /* Adjust height automatically */
    width: auto;  /* Adjust width automatically */
    transition: all 0.5s; /* Keep opacity transition */
    opacity: 0.8;
    object-fit: contain; /* Use contain or cover based on desired image scaling */
    border-radius: 10px; /* Apply radius here if needed */
}

.video_image img:hover {
    opacity: 1;
    transform: scale(1.05);
}

.card_actions {
    grid-area: actions;
    display: flex;
    flex-direction: column;
    align-items: center;
    opacity: 0;
    transform: translateY(40px);
    /* Match transition speed */
    transition: opacity 0.5s linear, transform 0.5s linear;
    width: 100%;
    position: absolute;
    bottom: 0;
    padding-bottom: 10px;
    height: auto;
}

.card_1:hover .card_heading {
    /* Apply transform and text-align on hover */
    transform: translateX(-165px);
    /* Explicitly define transition for hover state if needed, matching base */
    transition: transform 0.5s linear;
}

.card_1:hover .card_actions {
    opacity: 1;
    transform: translateY(0);
}

.card_1:hover .card_image_container {
    /* Keep the upward movement */
    transform: translateY(-60px);
    /* Explicitly define transition for hover state, matching base */
    transition: transform 0.5s linear;
}

.card_price {
    font-weight: bold;
    font-size: 1.2em;
    margin-bottom: 8px;
}

.card_buttons {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 8px;
}

.card_buttons form {
    display: inline-block;
    vertical-align: middle;
    margin: 0;
    padding: 0;
}

/* Buttons */
.btn-admin-action:focus,
.btn-admin-action:active,
.btn-admin-action:focus-visible {
    outline: none !important;
    box-shadow: none !important;
    border-color: transparent !important;
}

.btn.btn-admin-action {
    border: none !important;
    background: none !important;
}

.btn-admin-action {
    position: relative;
    display: inline-block;
    color: black;
    text-decoration: none;
    transition: color 0.3s ease;
}

.btn-admin-action::before {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 100%;
    height: 2px;
    background: rgba(125,105,106,255);
    transform: scaleX(0);
    transition: transform 0.3s ease;
}

.btn-admin-action:hover {
    color: rgba(125,105,106,255);
}

.btn-admin-action:hover::before {
    transform: scaleX(1);
}

.btn-course{
    width: 100%;
    height: 40px;
    border-radius: 40px;
    background: #fff;
    border: none;
    outline: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
}

/* Modal */
.modal-content {
    background: #eee8e8;
    position: relative;
    display: flex;
    place-content: center;
    place-items: center;
    overflow: hidden;
    border-radius: 20px;
}

/* Add z-index to make content visible */
.modal-header, .modal-body, .modal-footer {
    position: relative;
    z-index: 2; /* Higher than the ::after element */
}

.modal-content h1 {
    z-index: 1;
    color: black;
    font-size: 2em;
}

.modal-content::before {
    content: '';
    position: absolute;
    width: 130%;
    background-image: linear-gradient(180deg, #3c2829, #3c342c);
    height: 52%;
    animation: rotBGimg 3s linear infinite;
    transition: all 0.2s linear;
}

@keyframes rotBGimg {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

.modal-content::after {
    content: '';
    position: absolute;
    background: #eee8e8;
    inset: 5px;
    border-radius: 15px;
}


Learning

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CourseService } from '../../services/course.service';
import { UserService } from '../../services/user.service';
import { FormsModule } from '@angular/forms';
import { RouterModule, Router } from '@angular/router';
import { GLOBAL } from '../../services/global';
import { CartService } from '../../services/cart.service';
import { SaleService } from '../../services/sale.service';

@Component({
  selector: 'app-learning',
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: '../home/home.component.html',
  styleUrl: '../home/home.component.css',
  providers: [CourseService, UserService, CartService, SaleService]
})
export class LearningComponent {
  public title: string;
  public courses: any;
  public identity: any;
  public status: any;
  public token: any;
  public url: any;
  public cart: any;

  constructor(
    private _courseService: CourseService,
    private _userService: UserService,
    private _saleService: SaleService,
    private _router: Router
  ){
    this.title = 'My courses';
    this.identity = this._userService.getIdentity();
    this.token = this._userService.getToken();
    this.url = GLOBAL.url;
  }

  ngOnInit(): void {
    if (this.identity.sub || this.identity.id || this.identity.name) {
      this.myCourses();
    } else {
      this._router.navigate(['/login']);
    }
  }

  // show the videos of youtube
  getThumbnail(url: string, size: any) {
    var video, results, thumbnail_url;  

    // if url is null
    if (url === null) {
      return ''; 
    }
    // identification of youtube video
    results = url.match('[\\?&]v=([^&#]*)');
    // if results is null save into 'video', if results is not null save into 'results[1]'
    video = (results === null) ? url : results[1];
    // if size is not null
    if (size !== null) {
      thumbnail_url = 'https://img.youtube.com/vi/'+ video + '/' + size+ '.jpg'; 
    } else {
      // default size
      thumbnail_url = 'https://img.youtube.com/vi/' + video + '/mqdefault.jpg';
    }
    return thumbnail_url;
  }

  // delete course
  deleteCourse(id: any){
    this._courseService.delete(this.token, id).subscribe(
      response => {
        this.myCourses();
        setTimeout(() => {
          window.location.reload();
        }, 100);
      },
      error => {
        console.log(error);
      }
    );
  }

  onSubmit(form: any){}

  myCourses(){
    this._saleService.myCourses(this.token).subscribe(
      response => {
        if(response.status =='success'){
          this.courses = response.courses;
        } else {
          this._router.navigate(['/home']);
        }
      },
      error => {
        console.log(error);
      }
    )
  }
}


Login

<div class="general">
    <div class="form-box">
        <div class="form-value">
            <div class="alert alert-success" *ngIf="status == 'success'">
                <p style="text-align: center;">
                    <strong>Success!</strong> You are now logged in.
                </p>
            </div>
            <div class="alert alert-danger" *ngIf="status == 'error'">
                <p style="text-align: center;">
                    <strong>Error!</strong> Invalid credentials.
                </p>
            </div>
            <!-- Login form -->
            <form #loginForm="ngForm" (ngSubmit)="onSubmit(loginForm)">
                <h1>
                    {{ page_title }}
                </h1>
                <p *ngIf="status != 'success'">
                    Identify yourself to access the application.
                </p>
                <div class="form-group">
                    <input type="email" class="form-control" id="email" name="email" #email="ngModel" [(ngModel)]="user.email" required pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$">
                    <label for="email">Email</label>
                    <small *ngIf="!email.valid && email.touched" class="invalid-feedback d-block">
                        Email is required and must be a valid email address.
                    </small>
                </div>
                <div class="form-group">
                    <input type="password" class="form-control" id="password" name="password" #password="ngModel" [(ngModel)]="user.password" required>
                    <label for="password">Password</label>
                    <small *ngIf="!password.valid && password.touched" class="invalid-feedback d-block">
                        Password is required.
                    </small>
                </div>
                <input type="submit" name="" value="Login" class="btn btn-button" [disabled]="loginForm.invalid">
                <div class="register">
                    <p>
                        Don't have an account? <a [routerLink]="['/signup']">Register</a>
                    </p>
                </div>
            </form>
        </div>
    </div>
</div>


import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { User } from '../../models/User';
import { UserService } from '../../services/user.service';
import { DOCUMENT } from '@angular/common';
import { Inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';

@Component({
  selector: 'app-login',
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './login.component.html',
  styleUrl: './login.component.css',
  providers: [UserService]
})
export class LoginComponent implements OnInit {

  public page_title: string;
  public identity: any;
  public token: any;
  public user: any;
  public status: any;

  constructor(
    private _userSevice: UserService,
    private _router: Router,
    private _route: ActivatedRoute,
    @Inject(DOCUMENT) private document: Document
  ) {
    this.page_title = 'Login';
    // id, name, surname, role, email, password, description, image
    this.user = new User(0,'','','ROLE_USER','','','','');
  }

  ngOnInit(): void {
    this.logout();
  }

  // refresh
  refresh() {
    this.document.location.reload();
  }

  // on submit for email and password to log in
  onSubmit(form:any) {
    this._userSevice.login(this.user).subscribe(
      response => {
        if (!response.status || response.status != 'error') {
          this.status = 'success';
          this.token = response;
          // object
          this._userSevice.login(this.user, true).subscribe(
            response => {
              this.identity = response;
              // persist data
              localStorage.setItem('token', this.token);
              localStorage.setItem('identity', JSON.stringify(this.identity));
              // redirect
              this._router.navigate(['/home']).then(() => {
                this.refresh();
              });
            },
            error => {
              this.status = 'error';
              console.log(<any>error);
            }
          );
        }else {
          this.status = 'error';
        }
      },
      error => {
        this.status = 'error';
        console.log(<any>error);
      }
    );
  }

  // logout
  logout() {
    this._route.params.subscribe(params => {
      // sure, with + to convert to number
      let logout = +params['sure'];
      if (logout == 1) {
        localStorage.removeItem('identity');
        localStorage.removeItem('token');
        localStorage.removeItem('cart');
        this.identity = null;
        this.token = null;
        // redirect
        this._router.navigate(['/home']).then(() => {
          this.refresh();
        });
      }
    });
  }
}


/* All  */
*{
    margin: 0;
    padding: 0;
}

.general{
    padding-top: 30px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-position: center;
    background-size: cover;
    background-color: #bcb4bc;
}

/* Form */
.form-box{
    position: relative;
    width: 400px;
    min-height: 450px;
    height: auto;
    background-color: #bbbcb7;
    border: 2px solid rgba(255,255,255,0.5);
    border-radius: 20px;
    backdrop-filter: blur(15px);
    display: flex;
    justify-content: center;
    align-items: center;
}

h1{
    font-size: 2em;
    color: #3c342c;
    text-align: center;
    padding: 10px;
}

p {
    text-align: center;
}

.form-group{
    position: relative;
    margin: 30px 0;
    width: 310px;
    border-bottom: 2px solid #3c342c;
}

.form-group label{
    position: absolute;
    top: 50%;
    left: 5px;
    transform: translateY(-50%);
    color: #3c342c;
    font-size: 1em;
    pointer-events: none;
    transition: 0.5s;
}

.form-group input:focus ~ label,
.form-group input:valid ~ label{
top: -5px;
}

.form-group input {
    width: 100%;
    height: 50px;
    background: transparent;
    border: none;
    outline: none;
    font-size: 1em;
    padding:0 35px 0 5px;
    color: #3c342c;
}

.form-group input:focus {
    outline: none;
    box-shadow: none;
}

.form-control:focus {
    outline: none;
    box-shadow: none;
    border-color: #3c342c;
}

.form-group ion-icon{
    position: absolute;
    right: 8px;
    color: #3c342c;
    font-size: 1.2em;
    top: 20px;
}

.btn-button{
    width: 100%;
    height: 40px;
    border-radius: 40px;
    background: #fff;
    border: none;
    outline: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
}

.register{
    font-size: .9em;
    color: #3c342c;
    text-align: center;
    margin: 25px 0 10px;
}

.register p a{
    text-decoration: none;
    color: #3c342c;
    font-weight: 600;
}

.register p a:hover{
    text-decoration: underline;
}

/* alerts */
.alert {
    margin-bottom: 20px;
    padding: 10px;
    border-radius: 5px;
}

.alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}


Signup

<div class="general">
    <div class="form-box">
        <div class="form-value">
            <div class="alert alert-success" *ngIf="status == 'success'">
                <p style="text-align: center;">
                    <strong>Registration successful!</strong>&nbsp;<a routerLink="/login">Log in now.</a>
                </p>
            </div>
            <div class="alert alert-danger" *ngIf="status == 'error'">
                <p style="text-align: center;">
                    <strong>Error!</strong> Email already exists.
                </p>
            </div>
            <!-- Sign up form -->
            <form #signupForm="ngForm" (ngSubmit)="onSubmit(signupForm)">
                <h1>
                    {{ page_title}}
                </h1>
                <p *ngIf="status != 'success'">
                    Register to access the application.
                </p>
                <div class="form-group">
                    <input type="text" name="name" #name="ngModel" class="form-control" [(ngModel)]="user.name" required pattern="[a-zA-Z ]+">
                    <label for="name">First name</label>
                    <small *ngIf="!name.valid && name.touched" class="invalid-feedback d-block">
                        Name is required and must contain only letters.
                    </small>
                </div>
                <div class="form-group">
                    <input type="text" name="surname" #surname="ngModel" class="form-control" [(ngModel)]="user.surname" required pattern="[a-zA-Z\u00C0-\u00FF ]+">
                    <label for="surname">Last name</label>
                    <small *ngIf="!surname.valid && surname.touched" class="invalid-feedback d-block">
                        Last name is required and must contain only letters.
                    </small>
                </div>
                <div class="form-group">
                    <input type="email" class="form-control" name="email" #email="ngModel" [(ngModel)]="user.email" required pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$">
                    <label for="email">Email</label>
                    <small *ngIf="!email.valid && email.touched" class="invalid-feedback d-block">
                        Email is required and must be a valid email address.
                    </small>
                </div>
                <div class="form-group">
                    <input type="password" class="form-control" name="password" #password="ngModel" [(ngModel)]="user.password" required>
                    <label for="password">Password</label>
                    <small *ngIf="!password.valid && password.touched" class="invalid-feedback d-block">
                        Password is required.
                    </small>
                </div>
                <input type="submit" name="" value="Sign up" class="btn btn-button" [disabled]="signupForm.invalid">
            </form>
        </div>
    </div>
</div>

import { Component } from '@angular/core';
import { User } from '../../models/User';
import { UserService } from '../../services/user.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';

@Component({
  selector: 'app-signup',
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './signup.component.html',
  styleUrl: './signup.component.css',
  providers: [UserService]
})
export class SignupComponent {
  public page_title: string;
  public user: any;
  public status: string | undefined;

  constructor(
    private _userService: UserService
  ) {
    this.page_title = 'Sign up';
    this.user = new User(0, '', '', 'ROLE_USER', '', '', '', '');
  }

  ngOnInit(): void {
    //Called after the constructor, initializing input properties, and the first call to ngOnChanges.
    //Add 'implements OnInit' to the class.
    
  }

  onSubmit(form: any) {
    this._userService.signup(this.user).subscribe(
      response => {
        if (response.status == 'success') {
          this.status = response.status;
        } else {
          this.status = 'error';
        }
        console.log(response);
        form.reset();
      },
      error => {
        this.status = 'error';
        console.log(<any>error);
      }
    );
  }
}


/* All  */
*{
    margin: 0;
    padding: 0;
}

.general{
    padding-top: 30px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-position: center;
    background-size: cover;
    background-color: #bcb4bc;
}

/* Form */
.form-box{
    position: relative;
    width: 400px;
    min-height: 550px;
    height: auto;
    background-color: #bbbcb7;
    border: 2px solid rgba(255,255,255,0.5);
    border-radius: 20px;
    backdrop-filter: blur(15px);
    display: flex;
    justify-content: center;
    align-items: center;
}

h1{
    font-size: 2em;
    color: #3c342c;
    text-align: center;
    padding: 10px;
}

p {
    text-align: center; 
}

.form-group{
    position: relative;
    margin: 30px 0;
    width: 310px;
    border-bottom: 2px solid #3c342c;
}

.form-group label{
    position: absolute;
    top: 50%;
    left: 5px;
    transform: translateY(-50%);
    color: #3c342c;
    font-size: 1em;
    pointer-events: none;
    transition: 0.5s;
}

.form-group input:focus ~ label,
.form-group input:valid ~ label{
top: -5px;
}

.form-group input {
    width: 100%;
    height: 50px;
    background: transparent;
    border: none;
    outline: none;
    font-size: 1em;
    padding:0 35px 0 5px;
    color: #3c342c;
}

.form-group input:focus {
    outline: none;
    box-shadow: none;
}

.form-control:focus {
    outline: none;
    box-shadow: none;
    border-color: #3c342c;
}

.form-group ion-icon{
    position: absolute;
    right: 8px;
    color: #3c342c;
    font-size: 1.2em;
    top: 20px;
}

.btn-button{
    width: 100%;
    height: 40px;
    border-radius: 40px;
    background: #fff;
    border: none;
    outline: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
    margin-bottom: 20px;
}

/* alerts */
.alert {
    margin-bottom: 20px;
    padding: 10px;
    border-radius: 5px;
}

.alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}


User-edit

<div class="general" data-aos="flip-up" data-aos-easing="ease-out-cubic" data-aos-duration="2000">
    <div class="form-box">
        <div class="form-value">
            <div class="alert alert-success" *ngIf="status == 'success'">
                <p style="text-align: center;">
                    <strong>Profile updated successfully!</strong>
                </p>
            </div>
            <div class="alert alert-danger" *ngIf="status == 'error'">
                <p style="text-align: center;">
                    <strong>Error!</strong> Data not saved. 
                </p>
            </div>
            <!-- Settings form -->
            <form class="" #settingsForm="ngForm" (ngSubmit)="onSubmit(settingsForm)">
                <h1 class="text-2xl font-bold text-custom-brown mb-6">
                    {{ page_title }}
                </h1>
                <p *ngIf="status != 'success'" class="mb-3">
                    Modify user profile settings.
                </p>
                <div class="form-group">
                    <input type="text" name="name" #name="ngModel" class="form-control" [(ngModel)]="user.name" required  [pattern]="namePattern">
                    <label for="name">First name</label>
                    <small *ngIf="!name.valid && name.touched" class="invalid-feedback d-block">
                        First name is required and must contain only letters.
                    </small>
                </div>
                <div class="form-group">
                    <input type="text" name="surname" #surname="ngModel" class="form-control" [(ngModel)]="user.surname" required  [pattern]="namePattern">
                    <label for="surname">Last name</label>
                    <small *ngIf="!surname.valid && surname.touched" class="invalid-feedback d-block">
                        Last name is required and must contain only letters.
                    </small>
                </div>
                <div class="form-group">
                    <input type="email" class="form-control" name="email" #email="ngModel" [(ngModel)]="user.email" required  [pattern]="emailPattern">
                    <label for="email">Email</label>
                    <small *ngIf="!email.valid && email.touched" class="invalid-feedback d-block">
                        Email is required and must be a valid email address.
                    </small>
                </div>
                <div class="form-group" style="border: transparent;">
                    <textarea type="text" name="description" class="form-control" #description="ngModel" [froalaEditor]="froala_options" [froalaModel]="user.description" [(ngModel)]="user.description" required></textarea>
                    <label for="description" class="description-label">Description</label>
                    <small *ngIf="!description.valid && description.touched" class="invalid-feedback d-block">
                        Description is required.
                    </small>
                </div>
                <div class="form-group">
                    <div *ngIf="identity && identity.image" class="edit-container">
                        <p class="edit-label" for="image">Avatar</p>
                        <!-- show the image -->
                        <div class="edit-image-container">
                            <img src="{{ url + 'user/avatar/' + identity.image }}" class="edit-image">
                        </div>
                    </div>
                    <!-- Dropzone -->
                    <div class="dropzone-container">
                        <ngx-dropzone [multiple]="false" [maxFileSize]="600000000" [accept]="'image/*'" (change)="onSelect($event)">
                            <ngx-dropzone-label>
                                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M7 10V9C7 6.23858 9.23858 4 12 4C14.7614 4 17 6.23858 17 9V10C19.2091 10 21 11.7909 21 14C21 15.4806 20.1956 16.8084 19 17.5M7 10C4.79086 10 3 11.7909 3 14C3 15.4806 3.8044 16.8084 5 17.5M7 10C7.43285 10 7.84965 10.0688 8.24006 10.1959M12 12V21M12 12L15 15M12 12L9 15" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                                </svg>
                                <p>Browse File to upload!</p>
                            </ngx-dropzone-label>
                            <ngx-dropzone-preview *ngFor="let f of files" [removable]="true" (removed)="onRemove(f)">
                                <ngx-dropzone-label>
                                    <svg fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                        <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                                    </svg>
                                    <span>{{ f.name }} ({{ f.size / 1024 | number:'1.0-2' }} KB)</span>
                                </ngx-dropzone-label>
                            </ngx-dropzone-preview>
                        </ngx-dropzone>
        
                        <!-- File status footer -->
                        <div class="file-status-footer">
                            <svg class="file-icon" fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                            </svg>
                            <p>
                                <span *ngIf="files?.length === 0">Not selected file</span>
                                <span *ngIf="files?.length === 1">{{ files[0].name }}</span>
                                <span *ngIf="files && files.length > 1">{{ files.length }} files selected</span>
                            </p>
                            <svg class="delete-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" (click)="onRemoveAll()">
                                <path d="M5.16565 10.1534C5.07629 8.99181 5.99473 8 7.15975 8H16.8402C18.0053 8 18.9237 8.9918 18.8344 10.1534L18.142 19.1534C18.0619 20.1954 17.193 21 16.1479 21H7.85206C6.80699 21 5.93811 20.1954 5.85795 19.1534L5.16565 10.1534Z" stroke="currentColor" stroke-width="2"></path>
                                <path d="M19.5 5H4.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                                <path d="M10 3C10 2.44772 10.4477 2 11 2H13C13.5523 2 14 2.44772 14 3V5H10V3Z" stroke="currentColor" stroke-width="2"></path>
                            </svg>
                        </div>
                        <div class="upload-status">
                            <span *ngIf="!uploading">Upload image</span>
                            <span *ngIf="uploading">Uploading...</span>
                        </div>
                    </div>
                </div>
                <input type="submit" name="" value="Save Changes" class="btn btn-button" [disabled]="settingsForm.invalid || uploading">
            </form>
        </div>
    </div>
</div>

import { Component, OnInit } from '@angular/core';
import { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';
import { NgxDropzoneModule } from 'ngx-dropzone';
import { User } from '../../models/User';
import { UserService } from '../../services/user.service';
import { FileUploadService } from '../../services/file.upload.service';
import { GLOBAL } from '../../services/global';
import { Router, ActivatedRoute } from '@angular/router';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from "@angular/common"

@Component({
  selector: 'app-user-edit',
  standalone: true,
  imports: [FroalaEditorModule, FroalaViewModule, NgxDropzoneModule, CommonModule, FormsModule],
  templateUrl: './user-edit.component.html',
  styleUrl: './user-edit.component.css'
})
export class UserEditComponent {
  public page_title: string;
  public user: User; // User object
  public status: any;
  public identity: any;
  public token: any;
  public resetVar = true;
  public url: any;
  public uploading = false;

  public namePattern = "^[A-Za-z0-9\\u00C0-\\u017F \\.,!?¡¿;:()'\"_-]+$";
  public emailPattern = "^[A-Za-z0-9._%+\\-]+@[A-Za-z0-9.\\-]+\\.[A-Za-z]{2,}$";

  // froala_options
  public froala_options: Object = {
    charCounterCount: false, // Deshabilitado para evitar errores
    toolbarButtons: ['bold', 'italic', 'underline', 'paragraphFormat'],
    toolbarButtonsXS: ['bold', 'italic', 'underline'],
    toolbarButtonsSM: ['bold', 'italic', 'underline', 'paragraphFormat'],
    toolbarButtonsMD: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // Configuraciones que evitan errores comunes
    specialCharactersSets: [],
    pluginsEnabled: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // Evitar el plugin problemático
    pluginsDisabled: ['specialCharacters', 'emoticons'],
    events: {
      initialized: function () {
        console.log('Froala Editor Initialized Successfully');
      },
      contentChanged: function () {
        // Manejar cambios si es necesario
      }
    }
  };

  // ngx-dropzone options
  files: File[] = [];
  
  constructor(
    private userService: UserService,
    private fileUploadService: FileUploadService,
    private router: Router,
    private route: ActivatedRoute,
    @Inject(PLATFORM_ID) private platformId: Object
  ) {
    this.page_title = 'User Settings';
    this.identity = this.userService.getIdentity();
    this.token = this.userService.getToken();
    this.url = GLOBAL.url;
    // user object
    this.user = new User(
      this.identity.sub,
      this.identity.name,
      this.identity.surname,
      this.identity.role,
      this.identity.email,'',
      this.identity.description,
      this.identity.image,
    )
  }

  ngOnInit(): void {
    if (isPlatformBrowser(this.platformId)) {
      try {
        // Usar import dinámico con manejo de errores
        import('froala-editor/js/plugins.pkgd.min.js' as any).catch(error => {
          console.warn('Froala plugins could not be loaded:', error);
          // Continuar sin plugins si falla la carga
        });
      } catch (error) {
        console.warn('Error loading Froala plugins:', error);
      }
    }
  }
  
  onSelect(event: any) {
    this.files.push(...event.addedFiles);
  }
  
  onRemove(event: any) {
    this.files.splice(this.files.indexOf(event), 1);
  }

  onRemoveAll(): void {
    // Limpiar el array de archivos
    this.files = [];
    
    // Si necesitas realizar alguna acción adicional, como limpiar el modelo
    if (this.user && this.user.image) {
      // Opcional: Borrar la referencia a la imagen en el modelo
      // this.user.image = null;
    }
  }

  // creaate a promise with no value 
  uploadImage(): Promise<void> {
    return new Promise((resolve, reject) => {
      // Check if files are selected
      this.fileUploadService.uploadFile(this.files[0]).subscribe({
        next: (response: any) => {
          // Check if the response contains an image
          if (response.image) {
            // Update the user object with the new image
            this.user.image = response.image;
            this.identity.image = response.image;
            // Save the new image in local storage
            localStorage.setItem('identity', JSON.stringify(this.identity));
            // To indicate that the image is uploaded and the uploading is finished
            this.uploading = false;
            // Indicate success of the promise
            resolve();
          } else {
            this.status = 'error';
            this.uploading = false;
            reject('Error uploading image');
          }
        },
        error: (error) => {
          console.log(error);
          this.status = 'error';
          this.uploading = false;
          reject(error);
        }
      });
    });
  }

  // onSubmit method to handle form submission
  // form is the form object that is passed from the template
  // async is used to indicate that this method is asynchronous and will return a promise, so we can use await inside it
  async onSubmit(form: any) {
    // try catch is used to handle errors that may occur during the execution of the code inside the try block
    try {
      // First, check if the user has selected any files to upload
      if (this.files.length > 0) {
        this.uploading = true;
        // Call the uploadImage method to upload the image
        // and await for it to finish before proceeding
        await this.uploadImage();
      }
      
      // Save the user data
      this.userService.update(this.token, this.user).subscribe({
        next: (response) => {
          if (!response.user) {
            this.status = 'error';
          } else {
            this.status = 'success';
            this.identity = this.user;
            localStorage.setItem('identity', JSON.stringify(this.user));
            // Make a timeout to scroll to the top of the page after 100ms
            setTimeout(() => {
              // Scroll to the top of the page in a smooth way
              window.scrollTo({ top: 0, behavior: 'smooth' });
              // Alternative using ViewChild:
              // this.topElement.nativeElement.scrollIntoView({ behavior: 'smooth' });
              // wait to reload the page
              setTimeout(() => {
                window.location.reload();
              }, 1000);
            }, 100);
          }
        },
        error: (error) => {
          this.status = 'error';
          console.log(error);
        }
      });
    } catch (error) {
      this.status = 'error';
      console.log(error);
    }
  }
}

/* All  */
*{
    margin: 0;
    padding: 0;
}

.general{
    padding-top: 30px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-position: center;
    background-size: cover;
    background-color: #bcb4bc;
}

/* Form */
.form-box{
    position: relative;
    width: 400px;
    min-height: 650px;
    height: auto;
    background-color: #bbbcb7;
    border: 2px solid rgba(255,255,255,0.5);
    border-radius: 20px;
    backdrop-filter: blur(15px);
    display: flex;
    justify-content: center;
    align-items: center;
}

h1{
    font-size: 2em;
    color: #3c342c;
    text-align: center;
    padding: 10px;
}

p {
    text-align: center; 
}

.edit-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
}

/* Etiqueta para el avatar */
.edit-label {
    display: block;
    font-size: 1em; /* text-sm */
    font-weight: 500; /* font-medium */
    color: #3c342c; /* text-custom-brown */
    position: absolute;
    transform: translateY(-250%);
}

/* Contenedor de la imagen del avatar */
.edit-image-container {
    margin-bottom: 0.5rem; /* mb-2 */
}

/* Imagen del avatar */
.edit-image {
    width: 4rem; /* w-16 */
    object-fit: cover; /* object-cover */
}

.form-group{
    position: relative;
    margin: 30px 0px;
    width: 310px;
    border-bottom: 2px solid #3c342c;
}

.form-group label{
    position: absolute;
    top: 50%;
    left: 5px;
    transform: translateY(-50%);
    color: #3c342c;
    font-size: 1em;
    pointer-events: none;
    transition: 0.5s;
}

.form-group .description-label{
    position: absolute;
    top: 50%;
    left: 5px;
    transform: translateY(-80%);
    color: #3c342c;
    font-size: 1em;
    pointer-events: none;
    transition: 0.5s;
}

.form-group select,
.form-group textarea {
    width: 100%;
    background: transparent;
    border: none;
    outline: none;
    font-size: 1em;
    padding: 0 35px 0 5px;
    color: #3c342c;
}

.form-group textarea {
    height: 70px;
    padding-top: 15px;
}

.form-group select {
    height: 50px;
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    padding-right: 20px;
    background-image: url("data:image/svg+xml;utf8,<svg fill='%233c342c' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>");
    background-repeat: no-repeat;
    background-position: right 5px center;
}

.form-group input:focus ~ label,
.form-group input:valid ~ label,
.form-group textarea:focus ~ label,
.form-group textarea:valid ~ label,
.form-group select:focus ~ label,
.form-group select ~ label{
top: -5px;
}

.form-group input {
    width: 100%;
    height: 50px;
    background: transparent;
    border: none;
    outline: none;
    font-size: 1em;
    padding:0 35px 0 5px;
    color: #3c342c;
}

.form-group input:focus,
.form-group textarea:focus,
.form-group select:focus {
    outline: none;
    box-shadow: none;
}

.form-control:focus {
    outline: none;
    box-shadow: none;
    border-color: #3c342c;
}

.form-group ion-icon{
    position: absolute;
    right: 8px;
    color: #3c342c;
    font-size: 1.2em;
    top: 20px;
}

.btn-button{
    width: 100%;
    height: 40px;
    border-radius: 40px;
    background: #fff;
    border: none;
    outline: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
    margin-bottom: 20px;
}

/* dropzone */
.dropzone-container {
    height: 16rem; 
    width: 100%;
    display: flex;
    flex-direction: column;
}

ngx-dropzone {
    flex: 1;
    width: 100%;
    border: 2px dashed #3c342c;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: transparent;
    overflow: hidden !important;
}

ngx-dropzone-label {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    cursor: pointer;
}

ngx-dropzone-label svg {
    height: 6rem;
    width: 6rem;
    color: #3c342c;
}

ngx-dropzone-label p {
    text-align: center;
    color: #3c342c;
    margin-top: 0.5rem;
}

ngx-dropzone-preview {
    background-color: transparent;
    border-radius: 0.375rem;
    padding: 0.5rem;
    max-width: 20rem;
    display: flex;
    align-items: center;
}

ngx-dropzone-preview ngx-dropzone-label {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
}

ngx-dropzone-preview ngx-dropzone-label svg {
    height: 1.5rem; /* h-6 */
    width: 1.5rem; /* w-6 */
    fill: #3c342c;
    margin-right: 0.5rem; /* mr-2 */
}

ngx-dropzone-preview ngx-dropzone-label span {
    flex: 1;
    font-size: 0.875rem; /* text-sm */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap; /* truncate */
}

.file-status-footer {
    margin-top: 0.5rem; /* mt-2 */
    background-color: transparent;
    width: 100%; /* w-full */
    height: 2.5rem; /* h-10 */
    padding: 0.5rem; /* p-2 */
    border-radius: 0.5rem; /* rounded-lg */
    display: flex;
    align-items: center;
    justify-content: space-between;
    color: #3c342c; /* text-custom-brown */
}

.file-status-footer svg.file-icon {
    height: 1.5rem; /* h-6 */
    width: 1.5rem; /* w-6 */
    fill: #3c342c; /* fill-custom-brown */
    background-color: transparent;
    border-radius: 9999px; /* rounded-full */
    padding: 0.125rem; /* p-0.5 */
}

.file-status-footer p {
    flex: 1;
    text-align: center;
    font-size: 0.875rem; /* text-sm */
}

.file-status-footer svg.delete-icon {
    height: 1.5rem; /* h-6 */
    width: 1.5rem; /* w-6 */
    color: #3c342c; /* text-custom-brown */
    cursor: pointer;
}

.file-status-footer svg.delete-icon:hover {
    color: #3c342c; /* hover:text-custom-brown - esto parece redundante pero mantengo la estructura */
    transition: colors 0.3s ease; /* transition-colors */
}

.upload-status {
    display: flex;
    align-items: center;
    margin-top: 0.5rem; /* mt-2 */
}

.upload-status span {
    color: #3c342c; /* text-custom-brown */
    font-size: 0.875rem; /* text-sm */
}

/* alerts */
.alert {
    margin-bottom: 20px;
    padding: 10px;
    border-radius: 5px;
}

.alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

/* froala editor */
:host ::ng-deep .fr-newline{
    background: transparent !important;
    border: transparent;
}

host ::ng-deep .fr-view{
    background: transparent !important;
    border: transparent;
}

:host ::ng-deep .fr-box{
    background: transparent !important;
    border: 2px solid #3c342c;
    color: #3c342c;
}

:host ::ng-deep .fr-toolbar {
    background: transparent !important;
    border-bottom: 2px solid #3c342c;
}

:host ::ng-deep #fr-logo>span,
:host ::ng-deep .fr-counter {
    color: #3c342c;
}

:host ::ng-deep .fr-logo {
    fill: #3c342c;
}

:host ::ng-deep .fr-wrapper {
    background: transparent !important;
    border: transparent;
    color: #3c342c;
}

:host ::ng-deep .fr-element {
    background: transparent !important;
    border: transparent;
    color: #3c342c;
}

:host ::ng-deep .fr-second-toolbar {
    background: transparent !important;
    border-top: 2px solid #3c342c;
    color: #3c342c;
}


Video-detail

<div class="full-container" *ngIf="video">
    <!-- Video Area -->
    <div class="video">
        <iframe [src]="video.url" frameborder="0" id="panell" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>

    <!-- Content Area (Sidebar) -->
    <div class="content">
        <!-- Content accordion -->
        <div class="accordion-page" *ngIf="course" >
            <div class="accordion-container">
                <div class="accordion">
                    <div class="accordion-entries">
                        <ng-container *ngFor="let item of accordion; let itemIndex=index">
                            <ng-container *ngFor="let video of videos">
                                <details *ngIf="video.accordion_title && video.section == item" [open]="itemIndex === 0" name="courseAccordion" class="accordion-item">
                                    <summary class="accordion-header">
                                        <span class="header-text">{{ video.accordion_title }}</span>
                                        <svg aria-hidden="true" focusable="false" class="toggle-icon" viewBox="0 0 16 16" width="16" height="16" fill="#a371f7">
                                            <path d="M7.75 2a.75.75 0 0 1 .75.75V7h4.25a.75.75 0 0 1 0 1.5H8.5v4.25a.75.75 0 0 1-1.5 0V8.5H2.75a.75.75 0 0 1 0-1.5H7V2.75A.75.75 0 0 1 7.75 2Z"></path>
                                        </svg>
                                    </summary>
                                    <!-- Content for each section -->
                                    <div class="accordion-content">
                                        <ng-container *ngFor="let contentVideo of videos">
                                            <div *ngIf="contentVideo.section == item" class="content-item">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <div class="video-title" *ngIf="identity.sub && course.buy && course.buy == 1" style="display: flex; align-items: flex-end;">
                                                            <a class="video-title-a" [routerLink]="['/video-detail', contentVideo.id]" style="display: flex; flex-direction: column;">
                                                                <strong>{{ contentVideo.created_at | date:'dd/MM/yyyy' }}</strong>
                                                                <span>{{ contentVideo.title }}</span>
                                                            </a>
                                                            <div style="margin-left: 10px; display: flex; align-items: flex-end; cursor: pointer; " *ngIf="course.buy && identity.sub && course.buy == 1 && contentVideo.checkbox == 'activated'">
                                                                <label class="checkbox-container">
                                                                    <input type="checkbox" value="0" checked (click)="deleteCheckbox(contentVideo.checkbox_id)">
                                                                    <svg viewBox="0 0 64 64" height="2em" width="2em">
                                                                        <path d="M 0 16 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 16 L 32 48 L 64 16 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 16" pathLength="575.0541381835938" class="path"></path>
                                                                    </svg>
                                                                </label>
                                                            </div>
                                                            <div style="margin-left: 10px; display: flex; align-items: flex-end; cursor: pointer; " *ngIf="course.buy && identity.sub && !contentVideo.checkbox">
                                                                <label class="checkbox-container">
                                                                    <input type="checkbox" value="0" (click)="storeCheckbox(contentVideo.id)">
                                                                    <svg viewBox="0 0 64 64" height="2em" width="2em">
                                                                        <path d="M 0 16 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 16 L 32 48 L 64 16 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 16" pathLength="575.0541381835938" class="path"></path>
                                                                    </svg>
                                                                </label>
                                                            </div>
                                                        </div>
                                                        <div class="video-title" *ngIf="!identity.sub || !course.buy">{{ contentVideo.title }}</div>
                                                    </div>
                                                    <div class="video-actions" *ngIf="identity && (identity.sub == 1 || identity.role == 'ROLE_ADMIN')">
                                                        <a *ngIf="identity && (identity.sub == 1 || identity.role == 'ROLE_ADMIN')" class="btn btn-admin-action" id="my-edit-button" [routerLink]="['/video-edit', contentVideo.id]" style="padding: 3px 6px;">
                                                            <i class="ti-pencil"></i>
                                                        </a>
                                                        <button *ngIf="identity && (identity.sub == 1 || identity.role == 'ROLE_ADMIN')" type="button" class="btn btn-admin-action" id="my-delete-button" data-bs-toggle="modal" [attr.data-bs-target]="'#deleteVideo' + contentVideo.id" style="padding: 3px 6px;">
                                                            <i class= "ti-trash"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </ng-container>
                                    </div>
                                </details>
                            </ng-container>
                        </ng-container>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Comments Area -->
    <div class="comments">
        <div class="comments-buttons" style="display: flex; justify-content: center;">
            <ng-container *ngFor="let comment of comments; let first = first">
                <a *ngIf="first" class="btn btn-button" data-bs-toggle="collapse" data-bs-target="#multiCollapseChat" role="button" aria-expanded="false" (click)="show_chat(comment.id)">
                    Questions and Answers
                </a>
            </ng-container>
            <a class="btn btn-button" data-bs-toggle="collapse" data-bs-target="#multiCollapseDescription" role="button" aria-expanded="false" (click)="show_des()">
                Description
            </a>
        </div>

        <!-- Description -->
        <div *ngIf="course">
            <div class="collapse" id="multiCollapseDescription">
                <div class="card card-body">
                    <div class="card-comment" style="padding: 10px;">
                        <p>
                            {{ video.content }}
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Comments content -->
        <div class="collapse" id="multiCollapseChat">
            <div class="card card-body">
                <div *ngFor="let comment of comments; let index=index" class="card-comment mb-3">
                    <div *ngFor="let user of users; let i=index">
                        <div *ngIf="index == i" style="margin: 20px;">
                            <div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
                                <a class="profile" style="display: flex; align-items: center;">
                                    <div *ngIf="user && user.image" class="avatar_nav" style="margin-bottom: 10px;">
                                        <img src="{{ url + 'user/avatar/' + user.image }}">
                                    </div>
                                    <span>{{ user.name }} - {{ comment.created_at | date: 'dd/MM/yy'}}</span>
                                </a>
                                <div *ngIf="user_comment && identity && identity.sub == user_comment.id" style="display: flex;">
                                    <a class="btn btn-admin-action" data-bs-toggle="collapse" [attr.data-bs-target]="'#multiCollapseCommentEdit' + comment.id" role="button" (click)="showFormEditComment(comment.id)">
                                        <i class="ti-pencil"></i>
                                    </a>
                                    <button type="button" class="btn btn-admin-action" id="my-delete-button" data-bs-toggle="modal" [attr.data-bs-target]="'#deleteComment' + comment.id">
                                        <i class="ti-trash"></i>
                                    </button>
                                </div>
                            </div>
                            <strong><p class="title-comment">{{ comment.title }}</p></strong>
                            <a data-bs-toggle="collapse" [attr.data-bs-target]="'#responsesCollapse' + comment.id" role="button" aria-expanded="false" style="display: flex; justify-content: flex-end; text-decoration: none; color: inherit;" (click)="showResponses(comment.id)">
                                <i class="bi-twitch">{{ response_cont[index] }}</i>
                            </a>

                            <!-- comment content -->
                            <p>{{comment.comment}}</p>
                            <p *ngIf="comment.image">
                                <a class="image-comment" data-bs-toggle="collapse" [attr.data-bs-target]="'#imageComment' + comment.id" role="button" aria-expanded="false" aria-controls="imageComment" (click)="showImage(comment.id)" style="color: inherit;">
                                    <i class="bi-card-image"></i>
                                </a>
                            </p>
                            <div class="collapse" id="imageComment{{comment.id}}">
                                <div class="card card-body" *ngIf="comment.image">
                                    <img src="{{ url + 'comments/image/' + comment.image }}" class="image-comment">
                                </div>
                            </div>

                            <!-- Comments edit form -->
                            <div class="form-box">
                                <div class="form-value">
                                    <div class="collapse" [attr.id]="'multiCollapseCommentEdit' + comment.id" style="scroll-margin-top: 100px;">
                                        <div class="card card-body">
                                            <div class="form-div" *ngIf="is_edit">
                                                <!-- Comment create form -->
                                                <div class="alert alert-success" *ngIf="status == 'success' && !is_edit">
                                                    <p style="text-align: right;">
                                                        <strong>Comment created successfully!</strong>
                                                    </p>
                                                </div>
                                                <div class="alert alert-success" *ngIf="status == 'success' && is_edit">
                                                    <p style="text-align: right;">
                                                        <strong>Comment updated successfully!</strong>
                                                    </p>
                                                </div>
                                                <form #commentFormEdit="ngForm" (ngSubmit)="onSubmitEditComment(commentFormEdit)">
                                                    <p class="title" *ngIf="status != 'success' && !is_edit">
                                                        Create a new comment.
                                                    </p>
                                                    <p class="title" *ngIf="is_edit">
                                                        Modify your comment.
                                                    </p>
                                                    <div class="form-group4 form-group">
                                                        <input type="text" name="title" #title="ngModel" class="form-control" [(ngModel)]="comment_user.title" required pattern="[A-Za-zÀ-ÿ0-9\s.,!?¡¿;:()'&quot;_\-]{1,40}" maxlength="40">
                                                        <label for="name">Title</label>
                                                        <small *ngIf="!title.valid && title.touched" class="invalid-feedback d-block">
                                                            Comment's title is required (Max.Length 40).
                                                        </small>
                                                    </div>
                                                    <div class="form-group5 form-group" style="border: transparent;">
                                                        <label for="comment" class="description-label">Comment</label>
                                                        <textarea type="text" name="comment" class="form-control" #commentField="ngModel" [froalaEditor]="froala_options" [froalaModel]="comment_user.comment" [(ngModel)]="comment_user.comment" required></textarea>
                                                        <small *ngIf="!commentField.valid && commentField.touched" class="invalid-feedback d-block">
                                                            Comment is required.
                                                        </small>
                                                    </div>
                                                    <div class="form-group6 form-group">
                                                        <div *ngIf="is_edit && comment_user.image != null" class="course-container">
                                                            <p class="course-label" for="image">Image of the comment</p>
                                                            <!-- show the image -->
                                                            <div class="course-image-container">
                                                                <img [src]="url + 'comments/image/' + comment_user.image" class="course-image">
                                                            </div>
                                                        </div>
                                                        <!-- Dropzone -->
                                                        <div class="dropzone-container">
                                                            <ngx-dropzone [multiple]="false" [maxFileSize]="600000000" [accept]="'image/*'" (change)="onSelect($event)">
                                                                <ngx-dropzone-label>
                                                                    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                        <path d="M7 10V9C7 6.23858 9.23858 4 12 4C14.7614 4 17 6.23858 17 9V10C19.2091 10 21 11.7909 21 14C21 15.4806 20.1956 16.8084 19 17.5M7 10C4.79086 10 3 11.7909 3 14C3 15.4806 3.8044 16.8084 5 17.5M7 10C7.43285 10 7.84965 10.0688 8.24006 10.1959M12 12V21M12 12L15 15M12 12L9 15" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                                                                    </svg>
                                                                    <p>Browse File to upload!</p>
                                                                </ngx-dropzone-label>
                                                                <ngx-dropzone-preview *ngFor="let f of files" [removable]="true" (removed)="onRemove(f)">
                                                                    <ngx-dropzone-label>
                                                                        <svg fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                                                            <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                                                            <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                                                                        </svg>
                                                                        <span>{{ f.name }} ({{ f.size / 1024 | number:'1.0-2' }} KB)</span>
                                                                    </ngx-dropzone-label>
                                                                </ngx-dropzone-preview>
                                                            </ngx-dropzone>
                
                                                            <!-- File status footer -->
                                                            <div class="file-status-footer">
                                                                <svg class="file-icon" fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                                                    <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                                                    <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                                                                </svg>
                                                                <p>
                                                                    <span *ngIf="files?.length === 0">Not selected file</span>
                                                                    <span *ngIf="files?.length === 1">{{ files[0].name }}</span>
                                                                    <span *ngIf="files && files.length > 1">{{ files.length }} files selected</span>
                                                                </p>
                                                                <svg class="delete-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" (click)="onRemoveAll()">
                                                                    <path d="M5.16565 10.1534C5.07629 8.99181 5.99473 8 7.15975 8H16.8402C18.0053 8 18.9237 8.9918 18.8344 10.1534L18.142 19.1534C18.0619 20.1954 17.193 21 16.1479 21H7.85206C6.80699 21 5.93811 20.1954 5.85795 19.1534L5.16565 10.1534Z" stroke="currentColor" stroke-width="2"></path>
                                                                    <path d="M19.5 5H4.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                                                                    <path d="M10 3C10 2.44772 10.4477 2 11 2H13C13.5523 2 14 2.44772 14 3V5H10V3Z" stroke="currentColor" stroke-width="2"></path>
                                                                </svg>
                                                            </div>
                
                                                            <div class="upload-status">
                                                                <span *ngIf="!uploading">Upload image</span>
                                                                <span *ngIf="uploading">Uploading...</span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    
                                                    <input *ngIf="status != 'success' && !is_edit" type="submit" name="" value="Save" class="btn btn-button2" [disabled]="commentFormEdit.invalid || uploading">
                                                    <input *ngIf="is_edit" type="submit" name="" value="Save Changes" class="btn btn-button2" [disabled]="commentFormEdit.invalid || uploading">
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Answers section for this specific comment -->
                            <div class="collapse" id="responsesCollapse{{comment.id}}">
                                <div class="card card-body mt-2">
                                    <div *ngFor="let response of responses; let index2 = index">
                                        <div *ngIf="response.comment_id === comment.id" class="card-comment mb-3" style="padding: 10px;">
                                            <div *ngFor="let user_r of users_responses; let i2 = index">
                                                <div *ngIf="index2 == i2">
                                                    <div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
                                                        <a class="profile">
                                                            <div *ngIf="user_r && user_r.image" class="avatar_nav"  style="margin-bottom: 10px;">
                                                                <img src="{{ url + 'user/avatar/' + user_r.image }}">
                                                            </div>
                                                            <span class="my-auto">{{ user_r.name }} - {{ response.created_at | date: 'dd/MM/yy'}}</span>
                                                        </a>
                                                        <div *ngIf="users_responses" style="display: flex">
                                                            <div class="" *ngIf="identity && identity.sub == users_responses[index2].id">
                                                                <a class="btn btn-admin-action" data-bs-toggle="collapse" [attr.data-bs-target]="'#multiCollapseResponseEdit' + response.id" role="button" aria-expanded="false" aria-controls="multicollapseResponseEdit" (click)="showFormEditResponse(response.id)">
                                                                    <i class="ti-pencil"></i>
                                                                </a>
                                                                <button type="button" class="btn btn-admin-action" id="my-delete-button" data-bs-toggle="modal" [attr.data-bs-target]="'#deleteResponse' + response.id">
                                                                    <i class="ti-trash"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
    
                                                    <!-- Answer content -->
                                                    <p>{{response.response}}</p>
                                                    <p *ngIf="response.image">
                                                        <a class="image-comment" data-bs-toggle="collapse" [attr.data-bs-target]="'#imageResponse' + response.id" role="button" aria-expanded="false" aria-controls="imageResponse" (click)="showImageResponse(response.id)" style="color: inherit;">
                                                            <i class="bi-card-image"></i>
                                                        </a>
                                                    </p>
                                                    <div class="collapse" id="imageResponse{{response.id}}">
                                                        <div class="card card-body" *ngIf="response.image">
                                                            <img src="{{ url + 'responses/image/' + response.image }}" class="image-comment">
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <!-- Responses edit form -->
                                    <ng-container *ngFor="let response of responses">
                                        <div class="form-box">
                                            <div class="form-value">
                                                <div class="collapse" [attr.id]="'multiCollapseResponseEdit' + response.id" style="scroll-margin-top: 100px;">
                                                    <div class="card card-body">
                                                        <div class="form-div" *ngIf="is_edit">
                                                            <!-- Comment create form -->
                                                            <div class="alert alert-success" *ngIf="status == 'success' && !is_edit">
                                                                <p style="text-align: right;">
                                                                    <strong>Response created successfully!</strong>
                                                                </p>
                                                            </div>
                                                            <div class="alert alert-success" *ngIf="status == 'success' && is_edit">
                                                                <p style="text-align: right;">
                                                                    <strong>Response updated successfully!</strong>
                                                                </p>
                                                            </div>
                                                            <form #responseEditForm="ngForm" (ngSubmit)="onSubmitEditResponse(responseEditForm)" class="formResponse">
                                                                <p class="title" *ngIf="status != 'success' && !is_edit">
                                                                    Create a new response.
                                                                </p>
                                                                <p class="title" *ngIf="is_edit">
                                                                    Modify your response.
                                                                </p>
                                                                <div class="form-group2 form-group" style="border: transparent;">
                                                                    <label for="response" class="description-label">Response</label>
                                                                    <textarea type="text" name="response" class="form-control" #responseField="ngModel" [froalaEditor]="froala_options" [froalaModel]="response.response" [(ngModel)]="response.response" required></textarea>
                                                                    <small *ngIf="!responseField.valid && responseField.touched" class="invalid-feedback d-block">
                                                                        Response is required.
                                                                    </small>
                                                                </div>
                                                                <div class="form-group3 form-group">
                                                                    <div *ngIf="is_edit && response.image != null" class="course-container">
                                                                        <p class="course-label" for="image">Image of the respose</p>
                                                                        <!-- show the image -->
                                                                        <div class="course-image-container">
                                                                            <img [src]="url + 'responses/image/' + response.image" class="course-image">
                                                                        </div>
                                                                    </div>                                                
                                                                    <!-- Dropzone -->
                                                                    <div class="dropzone-container">
                                                                        <ngx-dropzone [multiple]="false" [maxFileSize]="600000000" [accept]="'image/*'" (change)="onSelect($event)">
                                                                            <ngx-dropzone-label>
                                                                                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                                    <path d="M7 10V9C7 6.23858 9.23858 4 12 4C14.7614 4 17 6.23858 17 9V10C19.2091 10 21 11.7909 21 14C21 15.4806 20.1956 16.8084 19 17.5M7 10C4.79086 10 3 11.7909 3 14C3 15.4806 3.8044 16.8084 5 17.5M7 10C7.43285 10 7.84965 10.0688 8.24006 10.1959M12 12V21M12 12L15 15M12 12L9 15" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                                                                                </svg>
                                                                                <p>Browse File to upload!</p>
                                                                            </ngx-dropzone-label>
                                                                            <ngx-dropzone-preview *ngFor="let f of files" [removable]="true" (removed)="onRemove(f)">
                                                                                <ngx-dropzone-label>
                                                                                    <svg fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                                                                        <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                                                                        <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                                                                                    </svg>
                                                                                    <span>{{ f.name }} ({{ f.size / 1024 | number:'1.0-2' }} KB)</span>
                                                                                </ngx-dropzone-label>
                                                                            </ngx-dropzone-preview>
                                                                        </ngx-dropzone>
                            
                                                                        <!-- File status footer -->
                                                                        <div class="file-status-footer">
                                                                            <svg class="file-icon" fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                                                                <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                                                                <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                                                                            </svg>
                                                                            <p>
                                                                                <span *ngIf="files?.length === 0">Not selected file</span>
                                                                                <span *ngIf="files?.length === 1">{{ files[0].name }}</span>
                                                                                <span *ngIf="files && files.length > 1">{{ files.length }} files selected</span>
                                                                            </p>
                                                                            <svg class="delete-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" (click)="onRemoveAll()">
                                                                                <path d="M5.16565 10.1534C5.07629 8.99181 5.99473 8 7.15975 8H16.8402C18.0053 8 18.9237 8.9918 18.8344 10.1534L18.142 19.1534C18.0619 20.1954 17.193 21 16.1479 21H7.85206C6.80699 21 5.93811 20.1954 5.85795 19.1534L5.16565 10.1534Z" stroke="currentColor" stroke-width="2"></path>
                                                                                <path d="M19.5 5H4.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                                                                                <path d="M10 3C10 2.44772 10.4477 2 11 2H13C13.5523 2 14 2.44772 14 3V5H10V3Z" stroke="currentColor" stroke-width="2"></path>
                                                                            </svg>
                                                                        </div>
                            
                                                                        <div class="upload-status">
                                                                            <span *ngIf="!uploading">Upload image</span>
                                                                            <span *ngIf="uploading">Uploading...</span>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                
                                                                <input *ngIf="status != 'success' && !is_edit" type="submit" name="" value="Save" class="btn btn-button2" [disabled]="responseEditForm.invalid || uploading">
                                                                <input *ngIf="is_edit" type="submit" name="" value="Save Changes" class="btn btn-button2" [disabled]="responseEditForm.invalid || uploading">
                                                            </form>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </ng-container>

                                    <!-- Responses form -->
                                    <div class="form-box">
                                        <div class="form-value">
                                            <div class="comment-collapse">
                                                <a class="link-collapse" data-bs-toggle="collapse" [attr.data-bs-target]="'#multiCollapseResponse' + comment.id" role="button" aria-expanded="false" (click)="showFormResponse(comment.id)">
                                                    Make a response for this comment
                                                </a>
                                            </div>
                                            <div class="collapse" [attr.id]="'multiCollapseResponse' + comment.id">
                                                <div class="card card-body">
                                                    <div class="form-div" *ngIf="!is_edit">
                                                        <!-- Comment create form -->
                                                        <div class="alert alert-success" *ngIf="status == 'success' && !is_edit">
                                                            <p style="text-align: right;">
                                                                <strong>Response created successfully!</strong>
                                                            </p>
                                                        </div>
                                                        <div class="alert alert-success" *ngIf="status == 'success' && is_edit">
                                                            <p style="text-align: right;">
                                                                <strong>Response updated successfully!</strong>
                                                            </p>
                                                        </div>
                                                        <form #responseForm="ngForm" (ngSubmit)="onSubmitResponse(responseForm)" class="formResponse">
                                                            <p class="title" *ngIf="status != 'success' && !is_edit">
                                                                Create a new response.
                                                            </p>
                                                            <p class="title" *ngIf="is_edit">
                                                                Modify your response.
                                                            </p>
                                                            <div class="form-group2 form-group" style="border: transparent;">
                                                                <label for="response" class="description-label">Response</label>
                                                                <textarea type="text" name="response" class="form-control" #responseField="ngModel" [froalaEditor]="froala_options" [froalaModel]="responxe.response" [(ngModel)]="responxe.response" required></textarea>
                                                                <small *ngIf="!responseField.valid && responseField.touched" class="invalid-feedback d-block">
                                                                    Response is required.
                                                                </small>
                                                            </div>
                                                            <div class="form-group3 form-group">                                                    
                                                                <!-- Dropzone -->
                                                                <div class="dropzone-container">
                                                                    <ngx-dropzone [multiple]="false" [maxFileSize]="600000000" [accept]="'image/*'" (change)="onSelect($event)">
                                                                        <ngx-dropzone-label>
                                                                            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                                <path d="M7 10V9C7 6.23858 9.23858 4 12 4C14.7614 4 17 6.23858 17 9V10C19.2091 10 21 11.7909 21 14C21 15.4806 20.1956 16.8084 19 17.5M7 10C4.79086 10 3 11.7909 3 14C3 15.4806 3.8044 16.8084 5 17.5M7 10C7.43285 10 7.84965 10.0688 8.24006 10.1959M12 12V21M12 12L15 15M12 12L9 15" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                                                                            </svg>
                                                                            <p>Browse File to upload!</p>
                                                                        </ngx-dropzone-label>
                                                                        <ngx-dropzone-preview *ngFor="let f of files" [removable]="true" (removed)="onRemove(f)">
                                                                            <ngx-dropzone-label>
                                                                                <svg fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                                                                    <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                                                                    <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                                                                                </svg>
                                                                                <span>{{ f.name }} ({{ f.size / 1024 | number:'1.0-2' }} KB)</span>
                                                                            </ngx-dropzone-label>
                                                                        </ngx-dropzone-preview>
                                                                    </ngx-dropzone>
                        
                                                                    <!-- File status footer -->
                                                                    <div class="file-status-footer">
                                                                        <svg class="file-icon" fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                                                            <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                                                            <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                                                                        </svg>
                                                                        <p>
                                                                            <span *ngIf="files?.length === 0">Not selected file</span>
                                                                            <span *ngIf="files?.length === 1">{{ files[0].name }}</span>
                                                                            <span *ngIf="files && files.length > 1">{{ files.length }} files selected</span>
                                                                        </p>
                                                                        <svg class="delete-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" (click)="onRemoveAll()">
                                                                            <path d="M5.16565 10.1534C5.07629 8.99181 5.99473 8 7.15975 8H16.8402C18.0053 8 18.9237 8.9918 18.8344 10.1534L18.142 19.1534C18.0619 20.1954 17.193 21 16.1479 21H7.85206C6.80699 21 5.93811 20.1954 5.85795 19.1534L5.16565 10.1534Z" stroke="currentColor" stroke-width="2"></path>
                                                                            <path d="M19.5 5H4.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                                                                            <path d="M10 3C10 2.44772 10.4477 2 11 2H13C13.5523 2 14 2.44772 14 3V5H10V3Z" stroke="currentColor" stroke-width="2"></path>
                                                                        </svg>
                                                                    </div>
                        
                                                                    <div class="upload-status">
                                                                        <span *ngIf="!uploading">Upload image</span>
                                                                        <span *ngIf="uploading">Uploading...</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            
                                                            <input *ngIf="status != 'success' && !is_edit" type="submit" name="" value="Save" class="btn btn-button2" [disabled]="responseForm.invalid || uploading">
                                                            <input *ngIf="is_edit" type="submit" name="" value="Save Changes" class="btn btn-button2" [disabled]="responseForm.invalid || uploading">
                                                        </form>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Comments form -->
                <div class="form-box">
                    <div class="form-value">
                        <div class="comment-collapse">
                            <a class="link-collapse" data-bs-toggle="collapse" [attr.data-bs-target]="'#multiCollapseComment'" role="button" aria-expanded="false" (click)="showForm()">
                                Make a question
                            </a>
                        </div>
                        <div class="collapse" id="multiCollapseComment">
                            <div class="card card-body">
                                <div class="form-div" *ngIf="!is_edit">
                                    <!-- Comment create form -->
                                    <div class="alert alert-success" *ngIf="status == 'success' && !is_edit">
                                        <p style="text-align: right;">
                                            <strong>Comment created successfully!</strong>
                                        </p>
                                    </div>
                                    <div class="alert alert-success" *ngIf="status == 'success' && is_edit">
                                        <p style="text-align: right;">
                                            <strong>Comment updated successfully!</strong>
                                        </p>
                                    </div>
                                    <form #commentForm="ngForm" (ngSubmit)="onSubmit(commentForm)">
                                        <p class="title" *ngIf="status != 'success' && !is_edit">
                                            Create a new comment.
                                        </p>
                                        <p class="title" *ngIf="is_edit">
                                            Modify your comment.
                                        </p>
                                        <div class="form-group4 form-group">
                                            <input type="text" name="title" #title="ngModel" class="form-control" [(ngModel)]="comment.title" required pattern="[A-Za-zÀ-ÿ0-9\s.,!?¡¿;:()'&quot;_\-]{1,40}" maxlength="40">
                                            <label for="name">Title</label>
                                            <small *ngIf="!title.valid && title.touched" class="invalid-feedback d-block">
                                                Comment's title is required (Max.Length 40).
                                            </small>
                                        </div>
                                        <div class="form-group5 form-group" style="border: transparent;">
                                            <label for="comment" class="description-label">Comment</label>
                                            <textarea type="text" name="comment" class="form-control" #commentField="ngModel" [froalaEditor]="froala_options" [froalaModel]="comment.comment" [(ngModel)]="comment.comment" required></textarea>
                                            <small *ngIf="!commentField.valid && commentField.touched" class="invalid-feedback d-block">
                                                Comment is required.
                                            </small>
                                        </div>
                                        <div class="form-group6 form-group">
                                            <!-- Dropzone -->
                                            <div class="dropzone-container">
                                                <ngx-dropzone [multiple]="false" [maxFileSize]="600000000" [accept]="'image/*'" (change)="onSelect($event)">
                                                    <ngx-dropzone-label>
                                                        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path d="M7 10V9C7 6.23858 9.23858 4 12 4C14.7614 4 17 6.23858 17 9V10C19.2091 10 21 11.7909 21 14C21 15.4806 20.1956 16.8084 19 17.5M7 10C4.79086 10 3 11.7909 3 14C3 15.4806 3.8044 16.8084 5 17.5M7 10C7.43285 10 7.84965 10.0688 8.24006 10.1959M12 12V21M12 12L15 15M12 12L9 15" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                                                        </svg>
                                                        <p>Browse File to upload!</p>
                                                    </ngx-dropzone-label>
                                                    <ngx-dropzone-preview *ngFor="let f of files" [removable]="true" (removed)="onRemove(f)">
                                                        <ngx-dropzone-label>
                                                            <svg fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                                                <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                                                <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                                                            </svg>
                                                            <span>{{ f.name }} ({{ f.size / 1024 | number:'1.0-2' }} KB)</span>
                                                        </ngx-dropzone-label>
                                                    </ngx-dropzone-preview>
                                                </ngx-dropzone>
    
                                                <!-- File status footer -->
                                                <div class="file-status-footer">
                                                    <svg class="file-icon" fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                                        <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                                        <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                                                    </svg>
                                                    <p>
                                                        <span *ngIf="files?.length === 0">Not selected file</span>
                                                        <span *ngIf="files?.length === 1">{{ files[0].name }}</span>
                                                        <span *ngIf="files && files.length > 1">{{ files.length }} files selected</span>
                                                    </p>
                                                    <svg class="delete-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" (click)="onRemoveAll()">
                                                        <path d="M5.16565 10.1534C5.07629 8.99181 5.99473 8 7.15975 8H16.8402C18.0053 8 18.9237 8.9918 18.8344 10.1534L18.142 19.1534C18.0619 20.1954 17.193 21 16.1479 21H7.85206C6.80699 21 5.93811 20.1954 5.85795 19.1534L5.16565 10.1534Z" stroke="currentColor" stroke-width="2"></path>
                                                        <path d="M19.5 5H4.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                                                        <path d="M10 3C10 2.44772 10.4477 2 11 2H13C13.5523 2 14 2.44772 14 3V5H10V3Z" stroke="currentColor" stroke-width="2"></path>
                                                    </svg>
                                                </div>
    
                                                <div class="upload-status">
                                                    <span *ngIf="!uploading">Upload image</span>
                                                    <span *ngIf="uploading">Uploading...</span>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <input *ngIf="status != 'success' && !is_edit" type="submit" name="" value="Save" class="btn btn-button2" [disabled]="commentForm.invalid || uploading">
                                        <input *ngIf="is_edit" type="submit" name="" value="Save Changes" class="btn btn-button2" [disabled]="commentForm.invalid || uploading">
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Video Modal -->
    <ng-container *ngFor="let video of videos">
        <div class="modal fade" [id]="'deleteVideo' + video.id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal_title fs-5" id="exampleModalLabel">
                            Are you sure you want to delete this video?
                        </h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        You are going to delete the video: {{ video.title }}.
                        <br>
                        This action cannot be undone.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-admin-action" data-bs-dismiss="modal" style="color: black;">
                            Close
                        </button>
                        <button type="button" class="btn btn-admin-action" style="color: black;" (click)="deleteVideo(video.id)">
                            <i class= "ti-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </ng-container>

    <!-- Delete Comment Modal -->
    <ng-container *ngFor="let comment of comments">
        <div class="modal fade" [id]="'deleteComment' + comment.id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal_title fs-5" id="exampleModalLabel">
                            Are you sure you want to delete this comment?
                        </h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        You are going to delete the comment: <strong>{{ comment.title }}</strong>
                        <br>
                        This action cannot be undone.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-admin-action" data-bs-dismiss="modal" style="color: black;">
                            Close
                        </button>
                        <button type="button" class="btn btn-admin-action" style="color: black;" (click)="deleteComment(comment.id)">
                            <i class= "ti-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </ng-container>

    <!-- Delete Response Modal -->
    <ng-container *ngFor="let response of responses">
        <div class="modal fade" [id]="'deleteResponse' + response.id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal_title fs-5" id="exampleModalLabel">
                            Are you sure you want to delete this response?
                        </h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        You are going to delete the response.
                        <br>
                        This action cannot be undone.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-admin-action" data-bs-dismiss="modal" style="color: black;">
                            Close
                        </button>
                        <button type="button" class="btn btn-admin-action" style="color: black;" (click)="deleteResponse(response.id)">
                            <i class= "ti-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </ng-container>
</div>

import { Component, OnDestroy } from '@angular/core';
import { GLOBAL } from '../../services/global';
import { VideoService } from '../../services/video.service';
import { CourseService } from '../../services/course.service';
import { UserService } from '../../services/user.service';
import { ReponseService } from '../../services/reponse.service';
import { FileUploadService } from '../../services/file.upload.service';
import { ProgressService } from '../../services/progress.service';
import { CheckboxService } from '../../services/checkbox.service';
import { SaleService } from '../../services/sale.service';
import { Router, ActivatedRoute, RouterModule } from '@angular/router';
import { DomSanitizer } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NgxDropzoneModule } from 'ngx-dropzone';
import { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';
import { CommentService } from '../../services/comment.service';
import { Comment } from '../../models/Comment';
import { Responxe } from '../../models/Responxe';
import { Checkbox } from '../../models/Checkbox';
import { ChartData, ChartEvent, ChartType } from 'chart.js';

declare const bootstrap: any;

// jquery variable
declare var $: any;
// this is a global variable for iziToast
declare var iziToast: any;

@Component({
  selector: 'app-video-detail',
  imports: [RouterModule, CommonModule, FormsModule, NgxDropzoneModule, FroalaEditorModule, FroalaViewModule],
  templateUrl: './video-detail.component.html',
  styleUrl: './video-detail.component.css',
  providers: [VideoService, CourseService, UserService, CommentService, FileUploadService, ReponseService, CheckboxService, SaleService]
})
export class VideoDetailComponent implements OnDestroy {
  public identity: any;
  public token: any;
  public course: any;
  public videos: any;
  public accordion: Array<any> = [];
  public status: any;
  public contentAccordionOpen: boolean = false;
  public video: any;
  public comment_: Comment;
  public comment: any;
  public comments: any;
  public response_cont: any;
  public users: any;
  public url: any;
  public is_edit: any;
  public uploading = false;
  public show = false;
  public showImg = false;
  public showResponse = false;
  public showCommentEdit = false;
  public answers: any[] = [];
  public activeResponses: { [key: number]: boolean } = {};
  public responxe_: any;
  public responxe: any;
  public responses: any;
  public users_responses: any[] = [];
  public comment_user: any = {};
  public user_comment: any;
  public created_at: any;
  public responseToEdit: any;
  public checkbox_: any;
  public checkbox: any;
  public checkboxes: any;

  // for the progress
  public sale: any;
  public progress_: any;

  // chart graph
  public ChartLabels: string[] = ['', 'Progress'];
  public ChartData: ChartData<'doughnut'> = {
    labels: this.ChartLabels,
    datasets: [
      { data: [ ] }
    ]
  };
  public ChartType: ChartType = 'doughnut';

  // events of the chart
  public chartClicked({ event, active }: { event: ChartEvent, active: {}[] }): void {
    console.log(event, active);
  }
  public chartHovered({ event, active }: { event: ChartEvent, active: {}[] }): void {
    console.log(event, active);
  }

  // froala_options
  public froala_options: Object = {
    // chatCounter: true is for the chat counter 
    charCounterCount: true,
    // toolbarButtons is for the toolbar buttons
    toolbarButtons: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // toolbarButtonsXS is for the toolbar buttons in xs devices
    toolbarButtonsXS: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // toolbarButtonsSM is for the toolbar buttons in sm devices
    toolbarButtonsSM: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // toolbarButtonsMD is for the toolbar buttons in md devices
    toolbarButtonsMD: ['bold', 'italic', 'underline', 'paragraphFormat'],
    // backgroundColor is for the background color of the editor
    colorsBackground: ['#61BD6D', '#1ABC9C', '#54ACD2', 'REMOVE'],
    // events is for the events that are triggered in the editor
    // initialized is for the initialized event
    events: {
      initialized: function () {
        console.log('Froala Editor Initialized');
      }
    }
  };

  // ngx-dropzone options
  files: File[] = [];

  constructor(
    private _videoService: VideoService,
    private _courseService: CourseService,
    private _userService: UserService,
    private _commentService: CommentService,
    private fileUploadService: FileUploadService,
    private _responseService: ReponseService,
    private _progressService: ProgressService,
    private _checkboxService: CheckboxService,
    private _saleService: SaleService,
    private _route: ActivatedRoute,
    private _router: Router,
    private sanitizer: DomSanitizer
  ){
    this.identity = this._userService.getIdentity();
    this.token = this._userService.getToken();
    this.url = GLOBAL.url;
    this.is_edit = false;

    this.comment = {
      id: null,
      user_id: this.identity?.sub || null,
      video_id: null,
      title: '',
      comment: '',
      image: null
    };

    this.comment_ = new Comment(
      0,
      0,
      0,
      '',
      '',
      ''
    )

    this.responxe = {
      id: null,
      user_id: this.identity?.sub || null,
      comment_id: null,
      response: '',
      image: null
    };
    
    this.responxe_ = new Responxe(
      0,
      0,
      0,
      '',
      ''
    );

    this.checkbox = {
      id: null,
      user_id: this.identity?.sub || null,
      course_id: null,
      video_id: null,
      checkbox: 0,
    }

    this.checkbox_ = new Checkbox(
      0,
      0,
      0,
      0,
      0
    )
  }

  ngOnInit(): void {
    this.getVideo();
  }

  ngOnDestroy(): void {
    this._progressService.setProgress(0);
  }

  public newComment() {
    this.comment_ = new Comment (
      this.comment.id,
      this.comment.user_id = this.identity.sub,
      this.comment.video_id,
      this.comment.title,
      this.comment.comment,
      this.comment.image
    )
  }

  public newResponse() {
    this.responxe_ = new Responxe (
      this.responxe.id,
      this.responxe.user_id = this.identity.sub,
      this.responxe.comment_id,
      this.responxe.response,
      this.responxe.image
    )
  }

  public newCheckbox() {
    this.checkbox_ = new Checkbox (
      this.checkbox.id,
      this.checkbox.user_id = this.identity.sub,
      this.checkbox.course_id,
      this.checkbox.video_id,
      this.checkbox.checkbox
    )
  }

  onSelect(event: any) {
    this.files.push(...event.addedFiles);
  }
  
  onRemove(event: any) {
    this.files.splice(this.files.indexOf(event), 1);
  }

  onRemoveAll(): void {
    // Limpiar el array de archivos
    this.files = [];
  }

  handleError(message: string): void {
    this.status = 'error';
    iziToast.show({
      title: 'Error',
      titleColor: '#FF0000',
      color: '#FFF',
      class: 'text-danger',
      position: 'topRight',
      message: message
    });
  }

  handleSuccess(message: string): void {
    this.status = 'success';
    iziToast.show({
      title: 'Success',
      titleColor: '#1DC74C',
      color: '#FFF',
      class: 'text-success',
      position: 'topRight',
      message: message
    });
  }

  // creaate a promise with no value 
  uploadComment(): Promise<void> {
    return new Promise((resolve, reject) => {
      // Check if files are selected
      this.fileUploadService.uploadComment(this.files[0]).subscribe({
        next: (response: any) => {
          // Check if the response contains an image
          if (response.image) {
            // Update the user object with the new image
            this.comment_.image = response.image;
            this.comment.image = response.image;
            // Save the new image in local storage
            localStorage.setItem('Comment', JSON.stringify(this.comment));
            // To indicate that the image is uploaded and the uploading is finished
            this.uploading = false;
            // Indicate success of the promise
            resolve();
          } else {
            this.status = 'error';
            this.uploading = false;
            reject('Error uploading image');
          }
        },
        error: (error) => {
          console.log('Upload error details:', error);
          this.status = 'error';
          this.uploading = false;
          reject(error);
        }
      });
    });
  }

  uploadCommentEdit(): Promise<void> {
    return new Promise((resolve, reject) => {
      // Check if files are selected
      this.fileUploadService.uploadComment(this.files[0]).subscribe({
        next: (response: any) => {
          // Check if the response contains an image
          if (response.image) {
            // Update the user object with the new image
            this.comment_user.image = response.image;
            // Save the new image in local storage
            localStorage.setItem('Comment', JSON.stringify(this.comment_user));
            // To indicate that the image is uploaded and the uploading is finished
            this.uploading = false;
            // Indicate success of the promise
            resolve();
          } else {
            this.status = 'error';
            this.uploading = false;
            reject('Error uploading image');
          }
        },
        error: (error) => {
          console.log('Upload error details:', error);
          this.status = 'error';
          this.uploading = false;
          reject(error);
        }
      });
    });
  }

  uploadResponse(): Promise<void> {
    return new Promise((resolve, reject) => {
      // Check if files are selected
      this.fileUploadService.uploadResponse(this.files[0]).subscribe({
        next: (response: any) => {
          // Check if the response contains an image
          if (response.image) {
            // Update the user object with the new image
            this.responxe_.image = response.image;
            this.responxe.image = response.image;
            // Save the new image in local storage
            localStorage.setItem('Response', JSON.stringify(this.responxe));
            // To indicate that the image is uploaded and the uploading is finished
            this.uploading = false;
            // Indicate success of the promise
            resolve();
          } else {
            this.status = 'error';
            this.uploading = false;
            reject('Error uploading image');
          }
        },
        error: (error) => {
          console.log('Upload error details:', error);
          this.status = 'error';
          this.uploading = false;
          reject(error);
        }
      });
    });
  }

  uploadResponseEdit(): Promise<void> {
    return new Promise((resolve, reject) => {
      // Check if files are selected
      this.fileUploadService.uploadResponse(this.files[0]).subscribe({
        next: (response: any) => {
          // Check if the response contains an image
          if (response.image) {
            // Update the user object with the new image
            for (let i = 0; i < this.responses.length; i++) {
              if (this.responses[i].id === this.responseToEdit.id) {
                this.responses[i].image = response.image;
                break;
              }
            }
            // Save the new image in local storage
            localStorage.setItem('Response', JSON.stringify(this.responses));
            // To indicate that the image is uploaded and the uploading is finished
            this.uploading = false;
            // Indicate success of the promise
            resolve();
          } else {
            this.status = 'error';
            this.uploading = false;
            reject('Error uploading image');
          }
        },
        error: (error) => {
          console.log('Upload error details:', error);
          this.status = 'error';
          this.uploading = false;
          reject(error);
        }
      });
    });
  }

  getVideo() {
    this._route.params.subscribe(params => {
      let id = +params['id'];
      this._videoService.getVideo(id).subscribe(
        response => {
          if (response.status == 'success') {
            this.video = response.video;
            this.comment.video_id = this.video.id;
            this.checkbox.video_id = this.video.id;
            // initialize the comment
            this.newComment();
            // initialize the response
            this.newResponse();

            // initialize the checkbox
            this.newCheckbox();

            // for the youtube video
            var results = this.video.url.match('[\\?&]v=([^&#]*)');
            var video = (results === null) ? this.video.url : results[1];
            this.video.url = this.sanitizer.bypassSecurityTrustResourceUrl('https://www.youtube.com/embed/' + video + '?controls=0');

            this.getCourse();
            this.getComments();
          } else {
            this._router.navigate(['/']);
            this.status = 'error on getVideo()';
          }
        },
        error => {
          this._router.navigate(['/']);
          console.log(error);
        }
      )
    })
  }

  getCourse() {
    this._courseService.getCourseInfo(this.video.course_id, this.token).subscribe(
      response => {
        if (response.status == 'success') {
          this.course = response.course;
          this.accordion = response.accordion;
          this.sale = response.sales;
          this.checkbox.course_id = this.course.id;

          if (this.sale) {
            if (this.sale.progress == null || this.sale.progress == 0) {
              this.sale.progress = 0;
              this.progress_ = 0;
            } else {
              this.progress_ = this.sale.progress;
            }
          } else {
            this.progress_ = 0;
            this.sale = { progress: 0 };
          }

          this._progressService.setProgress(this.progress_);

          if (this.course.buy && this.course.buy == 1 && this.identity.sub && this.token) {
            this.getVideoWithProgress();
          } else {
            this.getVideosByCourse();
          }

          // for the youtube video
          var results = this.course.url.match('[\\?&]v=([^&#]*)');
          var video = (results === null) ? this.course.url : results[1];
          this.course.url = this.sanitizer.bypassSecurityTrustResourceUrl('https://www.youtube.com/embed/' + video + '?controls=0');
        } else {
          this.status = 'error on getCourse()';
        }
      },
      error => {
        console.log(error);
      }
    )
  }

  getVideosByCourse() {
    this._videoService.getVideosByCourse(this.video.course_id).subscribe(
      response => {
        if (response.status == 'success') {
          this.videos = response.videos;
        } else {
          this.status = 'error';
        }
      },
      error => {
        console.log(error);
      }
    )
  }

  getVideoWithProgress() {
    this._videoService.getVideoWithProgress(this.token, this.video.course_id).subscribe(
      response => {
        if (response.status =='success') {
          this.videos = response.videos;
          this.videos.result = response.result;          
        } else {
          this.status = 'error';
        }
      },
      error => {
        console.log(error);
      }
    )
  }

  getComments() {
    this._route.params.subscribe(params => {
      let id = +params['id'];
      this._commentService.getComments(id, this.token).subscribe(
        response => {
          if (response.status =='success') {
            this.comments = response.comments;
            this.response_cont = response.response_cont;            
            this.users = response.users;

          } else if (response.status == 'success' && response.state == 'empty') {
            this.comments = null;
          }
        },
        error => {
          console.log(error);
        }
      );
    });
  }

  loadAnswersForComment(commentId: number) {
    this._responseService.getReponses(this.token, commentId).subscribe({
      next: (response) => {
        if (response.status === 'success') {
          this.responses = response.responses;
          this.users_responses = response.users;
          this.comment_user = response.comment;
          this.user_comment = response.user;
          this.created_at = response.created_at;
          // Actualizar las respuestas para este comentario específico
          //this.updateAnswersForComment(commentId, response.answers);
          // initialize the response
          this.newResponse();
          this.responxe.comment_id = this.comment_user.id;
        }
      },
      error: (error) => {
        console.log('Error loading answers:', error);
      }
    });
  }

  deleteVideo(id: any) {
    this._videoService.delete(this.token, id).subscribe(
      response => {
        if (response.status =='success') {
          this.getVideosByCourse();
          setTimeout(() => {
            window.location.reload();
          }, 100);
        } else {
          this.status = 'error';
          this.handleError('Error, you can not delete the first video');
        }
      },
      error => {
        console.log(error);
      }
    )
  }

  deleteComment(id: any) {
    this._commentService.delete(this.token, id).subscribe(
      response => {
        if (response.status =='success') {
          this.getComments();
          setTimeout(() => {
            window.location.reload();
          }, 100);
        } else {
          this.status = 'error on deleteComment()';
        }
      },
      error => {
        console.log(error);
      }
    )
  }

  deleteResponse(id: any) {
    this._responseService.deleteResponse(this.token, id).subscribe(
      response => {
        if (response.status =='success') {
          this.getComments();
          setTimeout(() => {
            window.location.reload();
          }, 100);
        } else {
          this.status = 'error on deleteResponse()';
        }
      },
      error => {
        console.log(error);
      }
    )
  }

  // Method to show Questions and Answers
  show_chat(id: any) {
    $('#multiCollapseDescription').hide();
    $('#multiCollapseChat').show();
    this.loadAnswersForComment(id);
  }

  // Method to show Description
  show_des() {
    $('#multiCollapseChat').hide();
    $('#multiCollapseDescription').show();
  }

  // method to show the form to create a comment
  showForm() {
    if(this.show === true) {
      $('#multiCollapseComment').hide();
      this.show = false;
    } else {
      $('#multiCollapseComment').show();
      this.show = true;
    }
  }

  // method to show the form to create a response
  showFormResponse(commentId: any) {
    this.responxe.comment_id = commentId;
    if(this.show === true) {
      $('#multiCollapseResponse' + commentId).hide();
      this.show = false;
    } else {
      $('#multiCollapseResponse' + commentId).show();
      this.show = true;
    }
  }

  // method to show the image of the comment
  showImage(id: any) {
    if(this.showImg === true) {
      $('#imageComment').hide();
      this.showImg = false;
    } else {
      $('#imageComment' + id).show();
      this.showImg = true;
    }
  }

  // method to show the image of the response
  showImageResponse(id: any) {
    if(this.showResponse === true) {
      $('#imageResponse').hide();
      this.showResponse = false;
    } else {
      $('#imageResponse' + id).show();
      this.showResponse = true;
    }
  }

  // method to show the reponses
  showResponses(commentId: any) {
    const id = Number(commentId);
    const targetId = `#responsesCollapse${id}`;
    
    if(this.activeResponses[id]) {
      $(targetId).hide();
      this.activeResponses[id] = false;
    } else {
      // Close all other answers
      Object.keys(this.activeResponses).forEach(key => {
        const keyNum = Number(key);
        if(this.activeResponses[keyNum] && keyNum !== id) {
          $(`#responsesCollapse${keyNum}`).hide();
          this.activeResponses[keyNum] = false;
        }
      });
      
      $(targetId).show();
      this.activeResponses[id] = true;

      // Load answers for the comment
      this.loadAnswersForComment(id);
    }
  }
  
  // method to show the form to edit a comment
  showFormEditComment(id: number): void {
    this.comment_user = this.comments.find((c: any) => c.id === id);
    this.is_edit = true;
  
    const el = document.getElementById('multiCollapseCommentEdit' + id);
    if (!el) {
      return; 
    }

    const collapse  = bootstrap.Collapse.getOrCreateInstance(el, { toggle: false });

    if (el.classList.contains('show')) {
      collapse.hide();
    } else {
      el.addEventListener('shown.bs.collapse', () => {
        el.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }, { once: true });

      collapse.show();
      $('#responsesCollapse' + id).hide();
    }
  }

  // method to show the form to edit a response
  showFormEditResponse(id: number): void {
    for (const response of this.responses) {
      if (response.id === id) {
        this.responseToEdit = response;
        this.is_edit = true;
        break;
      }
    }

    this.responseToEdit = this.responses.find((c: any) => c.id === id);
    this.is_edit = true;
  
    const el = document.getElementById('multiCollapseResponseEdit' + id);
    if (!el) {
      return; 
    }

    const collapse  = bootstrap.Collapse.getOrCreateInstance(el, { toggle: false });

    if (el.classList.contains('show')) {
      collapse.hide();
    } else {
      el.addEventListener('shown.bs.collapse', () => {
        el.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }, { once: true });

      collapse.show();
    }
  }

  stripHtml(html: string): string {
    if (!html) return '';
    const temporalElement = document.createElement('div');
    temporalElement.innerHTML = html;
    return temporalElement.textContent || temporalElement.innerText || '';
  }

  // for the new comment
  async onSubmit(form: any) {
    try {
      if (this.files && this.files.length > 0) {
        this.uploading = true;
        await this.uploadComment();
      }
      
      this.comment.user_id = Number(this.comment.user_id);
      this.comment.video_id = Number(this.comment.video_id);
      
      if(form.valid) {
        this.comment.comment = this.stripHtml(this.comment.comment);
      }

      this._commentService.create(this.token, this.comment).subscribe({
        next: (response) => {
          if (response.status == 'success') {
            this.comment = response.comment;
            this.getComments();
            this.handleSuccess('Comment created successfully');
            setTimeout(() => {
              // Scroll to the top of the page in a smooth way
              window.scrollTo({ top: 0, behavior: 'smooth' });
              // wait to reload the page
              setTimeout(() => {
                this._router.navigate(['/video-detail/', this.video.id]).then(() => {
                  window.location.reload();
                  localStorage.removeItem('Comment');
                });
              }, 1000);
            }, 100);
          } else {
            this.status = 'error';
            this.handleError('Error creating comment');
          }
        },
        error: (error) => {
          this.status = 'error';
          console.log(error);
        }
      });
    } catch (error) {
      console.error('Error uploading comment:', error);
      this.status = 'error';
      this.handleError('Error uploading comment');
    }
  }

  // for the new response
  async onSubmitResponse(form: any) {
    try {
      if (this.files && this.files.length > 0) {
        this.uploading = true;
        await this.uploadResponse();
      }
      
      this.responxe.user_id = Number(this.responxe.user_id);
      this.responxe.comment_id = Number(this.responxe.comment_id);
      
      if(form.valid) {
        this.responxe.response = this.stripHtml(this.responxe.response);
      }

      this._responseService.createResponse(this.token, this.responxe).subscribe({
        next: (response) => {
          if (response.status == 'success') {
            this.responxe = response.response;
            this.loadAnswersForComment(this.comment_user.id);
            this.handleSuccess('Response created successfully');
            setTimeout(() => {
              // Scroll to the top of the page in a smooth way
              window.scrollTo({ top: 0, behavior: 'smooth' });
              // wait to reload the page
              setTimeout(() => {
                this._router.navigate(['/video-detail/', this.video.id]).then(() => {
                  window.location.reload();
                  localStorage.removeItem('Response');
                });
              }, 1000);
            }, 100);
          } else {
            this.status = 'error';
            this.handleError('Error creating response');
          }
        },
        error: (error) => {
          this.status = 'error';
          console.log(error);
        }
      });
    } catch (error) {
      console.error('Error uploading response:', error);
      this.status = 'error';
      this.handleError('Error uploading response');
    }
  }

  // to edit a comment
  async onSubmitEditComment(form: any) {
    try {
      if (this.files && this.files.length > 0) {
        this.uploading = true;
        await this.uploadCommentEdit();
      }
      
      this.comment_user.user_id = Number(this.comment_user.user_id);
      this.comment_user.video_id = Number(this.comment_user.video_id);
      
      if(form.valid) {
        this.comment_user.comment = this.stripHtml(this.comment_user.comment);
      }

      this._commentService.update(this.token, this.comment_user).subscribe({
        next: (response) => {
          if (response.status == 'success') {
            this.getComments();
            this.loadAnswersForComment(this.comment_user.id);
            this.handleSuccess('Comment edited successfully');
            setTimeout(() => {
              // Scroll to the top of the page in a smooth way
              window.scrollTo({ top: 0, behavior: 'smooth' });
              // wait to reload the page
              setTimeout(() => {
                this._router.navigate(['/video-detail/', this.video.id]).then(() => {
                  window.location.reload();
                  localStorage.removeItem('Comment');
                });
              }, 1000);
            }, 100);
          } else {
            this.status = 'error';
            this.handleError('Error editing comment');
          }
        },
        error: (error) => {
          this.status = 'error';
          console.log(error);
        }
      });
    } catch (error) {
      console.error('Error editing comment:', error);
      this.status = 'error';
      this.handleError('Error editing comment');
    }
  }

  // to edit a response
  async onSubmitEditResponse(form: any) {
    try {
      if (this.files && this.files.length > 0) {
        this.uploading = true;
        await this.uploadResponseEdit();
      }
      
      this.responseToEdit.user_id = Number(this.responseToEdit.user_id);
      this.responseToEdit.comment_id = Number(this.responseToEdit.comment_id);
      
      if(form.valid) {
        this.responseToEdit.response = this.stripHtml(this.responseToEdit.response);
      }

      this._responseService.updateResponse(this.token, this.responseToEdit).subscribe({
        next: (response) => {
          if (response.status == 'success') {
            this.getComments();
            this.handleSuccess('Response edited successfully');
            setTimeout(() => {
              // Scroll to the top of the page in a smooth way
              window.scrollTo({ top: 0, behavior: 'smooth' });
              // wait to reload the page
              setTimeout(() => {
                this._router.navigate(['/video-detail/', this.video.id]).then(() => {
                  window.location.reload();
                  localStorage.removeItem('Response');
                });
              }, 1000);
            }, 100);
          } else {
            this.status = 'error';
            this.handleError('Error editing response');
          }
        },
        error: (error) => {
          this.status = 'error';
          console.log(error);
        }
      });
    } catch (error) {
      console.error('Error editing response:', error);
      this.status = 'error';
      this.handleError('Error editing response');
    }
  }

  // store checkbox
  storeCheckbox(id: any) {
    this.checkbox.user_id = this.sale.user_id;
    this.checkbox.course_id = this.sale.course_id;
    this.checkbox.video_id = id;
    this.checkbox.checkbox = 1;

    this._checkboxService.storeCheckbox(this.token, this.checkbox).subscribe(
      response => {
        if (response.status =='success') {
          var courseid = this.video.course_id;
          this._checkboxService.getCheckboxes(this.token, courseid).subscribe(
            response => {
              if (response.status =='success') {
                this.checkbox = response.checkbox || [];
                this.progress_ = 0;

                for (let i = 0; i < this.checkbox.length; i++) {
                  this.progress_ = this.videos.result + this.progress_;
                }

                this.sale.progress = this.progress_;

                this._progressService.setProgress(this.progress_);

                this.updateSaleProgress(this.token, this.sale);
              } else {
                this.status = 'error on indexCheckbox()';
              }
            },
            error => {
              console.log(error);
            }
          )
        } else {
          this.status = 'error on storeCheckbox()';
        }
      },
      error => {
        console.log(error);
      }
    )
  }

  // update sale progress
  updateSaleProgress(token: any, sale: any): void {
    var id = this.sale.id;
    this._saleService.updateSaleProgress(token, sale, id).subscribe(
      response => {
        if (response.status == 'success') {
          this.sale = response.sale;
          this.progress_ = this.sale.progress;
          
          setTimeout(() => {
            this._progressService.setProgress(this.progress_);
            
            
            setTimeout(() => {
              this.getVideo();
            }, 100);
          }, 0);
        } else {
          this.status = 'error on updateSaleProgress()';
        }
      },
      error => {
        console.log(error);
      }
    )
  }

  // delete checkbox
  deleteCheckbox(id: any) {
    this._checkboxService.deleteCheckbox(this.token, id).subscribe(
      response => {
        if (response.status =='success') {
          var courseid = this.video.course_id;
          this._checkboxService.getCheckboxes(this.token, courseid).subscribe(
            response => {
              if (response.status =='success') {
                this.checkbox = response.checkbox || [];
                this.progress_ = 0;

                for (let i = 0; i < this.checkbox.length; i++) {
                  this.progress_ = this.videos.result + this.progress_;
                }

                this.sale.progress = this.progress_;

                this._progressService.setProgress(this.progress_);

                this.updateSaleProgress(this.token, this.sale);
              } else {
                this.status = 'error on indexCheckbox()';
              }
            },
            error => {
              console.log(error);
            }
          )
        } else {
          this.status = 'error on storeCheckbox()';
        }
      },
      error => {
        console.log(error);
      }
    )
  }
}


/* general */
* {
    box-sizing: border-box;
}

.full-container {
    width: 100%;
    max-width: 100vw;
    display: grid;
    grid-template-areas: 
        "video content"
        "comments content";
    grid-template-columns: 1fr 300px;
    grid-template-rows: auto auto;
    gap: 10px;
    padding-top: 20px;
    min-height: 100vh;
}

/* Grid Areas */
.video {
    grid-area: video;
    width: 100%;
}

.content {
    grid-area: content;
    width: 100%;
    max-height: 100dvh;
    padding: 0 10px 0 10px;
}

.comments {
    grid-area: comments;
    width: 100%;
}

/* Responsive Grid */
@media (max-width: 768px) {
    .full-container {
        grid-template-areas: 
            "video"
            "content"
            "comments";
        grid-template-columns: 1fr;
        grid-template-rows: auto auto auto;
    }
    
    .content {
        border-left: none;
        border-top: 1px solid #ddd;
        max-height: none;
    }
}

/* iframe */
iframe {
    width: 100%;
    max-width: 100%;
    aspect-ratio: 16/9;
    border-radius: 10px;
}

/* buttons */
.comments-buttons a, .content .btn-button {
    text-decoration: none;
    color: inherit;
    outline: none;
    padding: 8px 12px;
    margin-right: 10px;
    margin-bottom: 10px;
    display: inline-block;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: #f8f9fa;
}

.content .btn-button:hover, .comments-buttons a:hover {
    background: #e9ecef;
}

/* accordion */
.accordion-page {
    width: 100%;
    background: transparent;
    color: black;
}

.accordion-container {
    width: 100%;
    max-width: 100%;
}

.accordion {
    --border-color: #223;
    border: 1px solid var(--border-color);
    border-radius: .25rem;
    overflow: hidden;
    width: 100%;
}

.accordion-entries {
    display: flex;
    flex-direction: column;
    padding: 1rem;
    width: 100%;
}

details {
    border: none;
    width: 100%;
}

.accordion-item {
    background: transparent;
    border-bottom: 1px solid black;
    border-radius: 0%;
    width: 100%;
    margin-bottom: 20px;
}

.accordion-header {
    cursor: pointer;
    font-weight: 700;
    padding: 5px 0;
    font-size: 1rem; /* Reducido para el sidebar */
    color: black;
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
}

.accordion-header::-webkit-details-marker {
    display: none;
}

[open] .accordion-header {
    color: black;
}

.toggle-icon {
    opacity: 1;
    transition: opacity .3s;
    fill: black;
    flex-shrink: 0;
}

[open] .toggle-icon {
    opacity: 0;
}

.accordion-content {
    padding: 0 0 1rem;
    width: 100%;
}

.content-item {
    margin-top: .5rem;
    width: 100%;
    font-size: 0.9rem; /* Texto más pequeño para el sidebar */
}

.video-title-a {
    text-decoration: none;
    color: inherit;
    outline: none;
    word-wrap: break-word;
    font-size: 0.8rem; /* Más pequeño para el sidebar */
}

:root {
    interpolate-size: allow-keywords;
}

/* details */
details summary {
    display: flex;
    width: 100%;
}

details summary::-webkit-details-marker {
    display: none;
}

details::details-content {
    height: 0;
    overflow: hidden;
    transition: height 0.3s, content-visibility 0.3s;
    transition-behavior: allow-discrete;
}

details[open]::details-content {
    height: auto;
}

/* modal */
.modal-content {
    background: #eee8e8;
    position: relative;
    display: flex;
    place-content: center;
    place-items: center;
    overflow: hidden;
    border-radius: 20px;
    max-width: 90vw;
    box-sizing: border-box;
}

.modal-header, .modal-body, .modal-footer {
    position: relative;
    z-index: 2;
    width: 100%;
    box-sizing: border-box;
}

.modal-content h1 {
    z-index: 1;
    color: black;
    font-size: 1.5rem;
    word-wrap: break-word;
}

.modal-content::before {
    content: '';
    position: absolute;
    width: 130%;
    background-image: linear-gradient(180deg, #3c2829, #3c342c);
    height: 52%;
    animation: rotBGimg 3s linear infinite;
    transition: all 0.2s linear;
}

@keyframes rotBGimg {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

.modal-content::after {
    content: '';
    position: absolute;
    background: #eee8e8;
    inset: 5px;
    border-radius: 15px;
}

/* comments */
.profile {
    text-decoration: none;
    color: inherit;
    outline: none;
    cursor: pointer;
    word-wrap: break-word;
}

.avatar_nav {
    display: inline-block;
    vertical-align: middle;
    margin-right: 10px;
    flex-shrink: 0;
}

.avatar_nav img {
    max-width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
}

/* Utility classes */
.card {
    word-wrap: break-word;
}

.image-comment {
    width: 100%;
    max-width: 100%;
    height: auto;
    max-height: 600px;
}

.collapse .card-body .form-div .formResponse {
    display: grid;
    grid-template-areas: 
        "title title"
        "descriptionComment1 imageComment1"
        "save save";
    grid-template-columns: 1fr 1fr;
    grid-template-rows: repeat(3, auto);
    gap: 15px;
    background-color: #bbbcb7;
    border: 2px solid rgba(255,255,255,0.5);
    border-radius: 20px;
    backdrop-filter: blur(15px);
    padding: 20px;
}

.collapse .card-body .form-div form {
    display: grid;
    grid-template-areas: 
        "title title"
        "titleComment imageComment"
        "descriptionComment imageComment"
        "save save";
    grid-template-columns: 1fr 1fr;
    grid-template-rows: repeat(4, auto);
    gap: 15px;
    background-color: #bbbcb7;
    border: 2px solid rgba(255,255,255,0.5);
    border-radius: 20px;
    backdrop-filter: blur(15px);
    padding: 20px;
}

#multiCollapseChat .card-body,
#multiCollapseDescription  .card-body {
    background: transparent;
    border: none;
}

#multiCollapseChat .card-body .card-comment,
#multiCollapseDescription  .card-body .card-comment {
    background-color: #bbbcb7;
    border: 2px solid rgba(255,255,255,0.5);
    border-radius: 20px;
    backdrop-filter: blur(15px);
}

.course-container {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    width: 100%;
}

.course-label {
    display: block;
    font-size: 1em; /* text-sm */
    font-weight: 500; /* font-medium */
    color: #3c342c; /* text-custom-brown */
    position: static;
    transform: none;
    margin: 0;
}

.course-image-container {
    margin-bottom: 0.5rem; /* mb-2 */
}

.course-image {
    width: 4rem; /* w-16 */
    object-fit: cover; /* object-cover */
}

/* Form */
.link-collapse{
    text-decoration: none;
    color: inherit;
}

.comment-collapse{
    display: flex;
    justify-content: flex-end;
}

.title {
    grid-area: title;
    display: flex;
    justify-content: center;
    align-content: center;
    font-size: 2em;
    color: #3c342c;
    text-align: center;
    padding: 10px;
}

.form-group2 {
    grid-area: descriptionComment1;
    position: relative;
}

.form-group3 {
    grid-area: imageComment1;
    position: relative;
    display: flex;
    align-items: center;
    flex-direction: column;        
    align-items: flex-start;          
    gap: 1rem; 
}

.form-group4 {
    grid-area: titleComment;
    position: relative;
    margin: 30px 0px;
    width: auto;
    border-bottom: 2px solid #3c342c;
}

.form-group5 {
    grid-area: descriptionComment;
    position: relative;
}

.form-group6 {
    grid-area: imageComment;
    position: relative;
    display: flex;
    align-items: center;
    flex-direction: column;        
    align-items: flex-start;          
    gap: 1rem; 
}

form input[type="submit"] {
    grid-area: save;
}

.form-group label{
    position: absolute;
    top: 50%;
    left: 5px;
    transform: translateY(-50%);
    color: #3c342c;
    font-size: 1em;
    pointer-events: none;
    transition: 0.5s;
}

.form-group .description-label{
    position: absolute;
    top: -5px;
    left: 5px;
    transform: translateY(-80%);
    color: #3c342c;
    font-size: 1em;
    pointer-events: none;
    transition: 0.5s;
}

.form-group select,
.form-group textarea {
    width: 100%;
    background: transparent;
    border: none;
    outline: none;
    font-size: 1em;
    padding: 0 35px 0 5px;
    color: #3c342c;
}

.form-group textarea {
    height: 70px;
    padding-top: 15px;
}

.form-group input:focus ~ label,
.form-group input:valid ~ label,
.form-group textarea:focus ~ label,
.form-group textarea:valid ~ label {
top: -5px;
}

.form-group input {
    width: 100%;
    height: 50px;
    background: transparent;
    border: none;
    outline: none;
    font-size: 1em;
    padding:0 35px 0 5px;
    color: #3c342c;
}

.form-group input:focus,
.form-group textarea:focus{
    outline: none;
    box-shadow: none;
}

.form-control:focus {
    outline: none;
    box-shadow: none;
    border-color: #3c342c;
}

.form-group ion-icon{
    position: absolute;
    right: 8px;
    color: #3c342c;
    font-size: 1.2em;
    top: 20px;
}

.btn-button2{
    width: 100%;
    height: 40px;
    border-radius: 40px;
    background: #fff;
    border: none;
    outline: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
    margin-bottom: 20px;
}

/* dropzone */
.dropzone-container {
    height: 16rem; 
    width: 100%;
    display: flex;
    flex-direction: column;
}

ngx-dropzone {
    flex: 1;
    width: 100%;
    border: 2px dashed #3c342c;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: transparent;
    overflow: hidden !important;
}

ngx-dropzone-label {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    cursor: pointer;
}

ngx-dropzone-label svg {
    height: 6rem;
    width: 6rem;
    color: #3c342c;
}

ngx-dropzone-label p {
    text-align: center;
    color: #3c342c;
    margin-top: 0.5rem;
}

ngx-dropzone-preview {
    background-color: transparent;
    border-radius: 0.375rem;
    padding: 0.5rem;
    max-width: 20rem;
    display: flex;
    align-items: center;
}

ngx-dropzone-preview ngx-dropzone-label {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
}

ngx-dropzone-preview ngx-dropzone-label svg {
    height: 1.5rem; /* h-6 */
    width: 1.5rem; /* w-6 */
    fill: #3c342c;
    margin-right: 0.5rem; /* mr-2 */
}

ngx-dropzone-preview ngx-dropzone-label span {
    flex: 1;
    font-size: 0.875rem; /* text-sm */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap; /* truncate */
}

.file-status-footer {
    margin-top: 0.5rem; /* mt-2 */
    background-color: transparent;
    width: 100%; /* w-full */
    height: 2.5rem; /* h-10 */
    padding: 0.5rem; /* p-2 */
    border-radius: 0.5rem; /* rounded-lg */
    display: flex;
    align-items: center;
    justify-content: space-between;
    color: #3c342c; /* text-custom-brown */
}

.file-status-footer svg.file-icon {
    height: 1.5rem; /* h-6 */
    width: 1.5rem; /* w-6 */
    fill: #3c342c; /* fill-custom-brown */
    background-color: transparent;
    border-radius: 9999px; /* rounded-full */
    padding: 0.125rem; /* p-0.5 */
}

.file-status-footer p {
    flex: 1;
    text-align: center;
    font-size: 0.875rem; /* text-sm */
}

.file-status-footer svg.delete-icon {
    height: 1.5rem; /* h-6 */
    width: 1.5rem; /* w-6 */
    color: #3c342c; /* text-custom-brown */
    cursor: pointer;
}

.file-status-footer svg.delete-icon:hover {
    color: #3c342c; /* hover:text-custom-brown - esto parece redundante pero mantengo la estructura */
    transition: colors 0.3s ease; /* transition-colors */
}

.upload-status {
    display: flex;
    align-items: center;
    margin-top: 0.5rem; /* mt-2 */
}

.upload-status span {
    color: #3c342c; /* text-custom-brown */
    font-size: 0.875rem; /* text-sm */
}

/* alerts */
.alert {
    margin-bottom: 20px;
    padding: 10px;
    border-radius: 5px;
}

.alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

/* froala editor */
:host ::ng-deep .fr-newline{
    background: transparent !important;
    border: transparent;
}

:host ::ng-deep .fr-view{
    background: transparent !important;
    border: transparent;
}

:host ::ng-deep .fr-box{
    background: transparent !important;
    border: 2px solid #3c342c;
    color: #3c342c;
    min-height: 150px; 
    max-width: 100%;
    width: 100%;
}

:host ::ng-deep .fr-toolbar {
    background: transparent !important;
    border-bottom: 2px solid #3c342c;
}

:host ::ng-deep #fr-logo>span,
:host ::ng-deep .fr-counter {
    color: #3c342c;
}

:host ::ng-deep .fr-logo {
    fill: #3c342c;
}

:host ::ng-deep .fr-wrapper {
    background: transparent !important;
    border: transparent;
    color: #3c342c;
    width: 100%;
    max-width: 100%;
}

:host ::ng-deep .fr-element {
    background: transparent !important;
    border: transparent;
    color: #3c342c;
    min-height: 120px;  
    max-height: 400px; 
    overflow-y: auto; 
    overflow-x: hidden; 
    word-wrap: break-word; 
    word-break: break-word; 
    white-space: pre-wrap;
    width: 100% !important;
    max-width: 100% !important;
    box-sizing: border-box;
    padding: 10px;
    resize: none;
}

:host ::ng-deep .fr-second-toolbar {
    background: transparent !important;
    border-top: 2px solid #3c342c;
    color: #3c342c;
}

/* checkbox */
.checkbox-container {
    cursor: pointer;
}

.checkbox-container input {
    display: none;
}

.checkbox-container svg {
    overflow: visible;
    width: 20px;
    height: 20px;
}

.path {
    fill: none;
    stroke: white;
    stroke-width: 6;
    stroke-linecap: round;
    stroke-linejoin: round;
    transition: stroke-dasharray 0.5s ease, stroke-dashoffset 0.5s ease;
    stroke-dasharray: 241 9999999;
    stroke-dashoffset: 0;
}

.checkbox-container input:checked~svg .path {
    stroke-dasharray: 70.5096664428711 9999999;
    stroke-dashoffset: -262.2723388671875;
}


Video-edit

import { Component } from '@angular/core';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { GLOBAL } from '../../services/global';
import { VideoService } from '../../services/video.service';
import { UserService } from '../../services/user.service';
import { CourseService } from '../../services/course.service';
import { FileUploadService } from '../../services/file.upload.service';
import { Video } from '../../models/Video';
import { CommonModule } from '@angular/common';
import { NgxDropzoneModule } from 'ngx-dropzone';
import { FormsModule } from '@angular/forms';
import { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';
import { finalize, switchMap, tap } from 'rxjs/operators';

// this is a global variable for iziToast
declare var iziToast: any;

@Component({
  selector: 'app-video-edit',
  imports: [CommonModule, NgxDropzoneModule, FormsModule, FroalaEditorModule, FroalaViewModule, RouterModule],
  templateUrl: '../video-new/video-new.component.html',
  styleUrl: '../video-new/video-new.component.css'
})
export class VideoEditComponent {
  public title: string;
  public url: string;
  public video_: Video;
  public video: any = {}; // Initialize as empty object to prevent null errors
  public token: any;
  public identity: any;
  public status: any;
  public edit: any;
  public course: any = { name: '' };
  public accordion: Array<any> = [];
  public uploading = false;
  public videos: any[];

  // froala_options
  public froala_options: Object = {
    charCounterCount: true,
    toolbarButtons: ['bold', 'italic', 'underline', 'paragraphFormat'],
    toolbarButtonsXS: ['bold', 'italic', 'underline', 'paragraphFormat'],
    toolbarButtonsSM: ['bold', 'italic', 'underline', 'paragraphFormat'],
    toolbarButtonsMD: ['bold', 'italic', 'underline', 'paragraphFormat'],
    colorsBackground: ['#61BD6D', '#1ABC9C', '#54ACD2', 'REMOVE'],
    events: {
      initialized: function () {
        console.log('Froala Editor Initialized');
      }
    }
  };

  // ngx-dropzone options
  files: File[] = [];

  constructor(
    private _route: ActivatedRoute,
    private _router: Router,
    private _videoService: VideoService,
    private _userService: UserService,
    private _courseService: CourseService,
    private fileUploadService: FileUploadService
  ) {
    this.title = 'Update a video';
    this.url = GLOBAL.url;
    this.identity = this._userService.getIdentity();
    this.token = this._userService.getToken();
    this.edit = true;
    this.videos = []; // Initialize videos array
    
    // Initialize with empty object - we'll populate it later
    this.video_ = new Video(
      0, // Default id
      0, // Default user_id
      0, // Default course_id
      '', // Default title
      '', // Default content
      '', // Default url
      '', // Default file
      0,  // Default section
      '' // Default accordion_title
    );
  }

  ngOnInit(): void {
    this.loadData();
  }
  
  // Load data in the correct sequence
  loadData(): void {
    this._route.params.subscribe(params => {
      let videoId = +params['id'];
      
      // First get the video info
      this._videoService.getVideo(videoId).subscribe({
        next: (response) => {
          if (response.status == 'success') {
            this.video = response.video;
            
            // After getting video, get the course info
            if (this.video && this.video.course_id) {
              this._courseService.getCourseInfo(this.video.course_id, this.token).subscribe({
                next: (courseResponse) => {
                  if (courseResponse.status == 'success') {
                    this.course = courseResponse.course;
                    this.accordion = courseResponse.accordion;
                    
                    // Now initialize the video_ object with proper values
                    this.video_ = new Video(
                      this.video.id,
                      this.video.user_id,
                      this.video.course_id,
                      this.video.title,
                      this.video.content,
                      this.video.url,
                      this.video.file,
                      this.video.section,
                      this.video.accordion_title
                    );
                    
                    // Cache in localStorage for redundancy
                    localStorage.setItem('Video', JSON.stringify(this.video));
                  } else {
                    this.handleError('Error loading course data');
                  }
                },
                error: (error) => {
                  console.error('Course loading error:', error);
                  this.handleError('Error loading course data');
                }
              });
            } else {
              this.handleError('Invalid video data - missing course ID');
            }
          } else {
            this.handleError('Error loading video data');
          }
        },
        error: (error) => {
          console.error('Video loading error:', error);
          this.handleError('Error loading video data');
        }
      });
    });
  }
  
  onSelect(event: any) {
    this.files.push(...event.addedFiles);
  }
  
  onRemove(event: any) {
    this.files.splice(this.files.indexOf(event), 1);
  }

  onRemoveAll(): void {
    this.files = [];
  }

  handleError(message: string): void {
    this.status = 'error';
    iziToast.show({
      title: 'Error',
      titleColor: '#FF0000',
      color: '#FFF',
      class: 'text-danger',
      position: 'topRight',
      message: message
    });
  }

  handleSuccess(message: string): void {
    this.status = 'success';
    iziToast.show({
      title: 'Success',
      titleColor: '#1DC74C',
      color: '#FFF',
      class: 'text-success',
      position: 'topRight',
      message: message
    });
  }

  // Upload video file
  uploadVideo(): Promise<void> {
    return new Promise((resolve, reject) => {
      if (this.files.length === 0) {
        resolve(); // No files to upload
        return;
      }
      
      this.uploading = true;
      this.fileUploadService.uploadVideo(this.files[0]).subscribe({
        next: (response: any) => {
          if (response.file) {
            this.video_.file = response.file;
            this.video.file = response.file;
            this.uploading = false;
            resolve();
          } else {
            this.uploading = false;
            reject('Error uploading file: No file received in response');
          }
        },
        error: (error) => {
          console.error('Upload error details:', error);
          this.uploading = false;
          reject(error);
        }
      });
    });
  }

  stripHtml(html: string): string {
    if (!html) return '';
    const temporalElement = document.createElement('div');
    temporalElement.innerHTML = html;
    return temporalElement.textContent || temporalElement.innerText || '';
  }

  async onSubmit(form: any) {
    if (!form.valid) {
      this.handleError('Please fill all required fields correctly');
      return;
    }
    
    try {
      // First upload the file if any
      if (this.files.length > 0) {
        await this.uploadVideo();
      }
      
      // Process the form data
      if (this.video.file === '') {
        this.video.file = null;
      }

      // Ensure numeric types
      this.video.course_id = Number(this.video.course_id);
      this.video.user_id = Number(this.video.user_id);
      this.video.section = Number(this.video.section);

      // Sanitize YouTube URL by removing the app=desktop parameter
      const sanitizedUrl = form.value.url.replace('?app=desktop&', '?');
      this.video.url = sanitizedUrl;
      
      // Clean HTML content
      if (this.video.content) {
        this.video.content = this.stripHtml(this.video.content);
      }

      // Get all videos for this course
      this._videoService.getVideosByCourse(this.video.course_id).subscribe({
        next: (response) => {
          if (response.status === 'success') {
            this.status = 'success';
            
            // Fix: Check if videos exist in the response and assign them properly
            // The API returns "video" (singular) not "videos" (plural)
            if (response.videos) {
              this.videos = response.videos;
            } else if (response.video && Array.isArray(response.video)) {
              this.videos = response.video;
            } else {
              this.videos = []; // Initialize as empty array if no videos found
            }
            
            // Handle accordion title updates if needed
            if (form.value.accordion_title == '') {
              form.value.accordion_title = null;
            }
            
            if (form.value.accordion_title == '' || form.value.accordion_title == null) {
              // No accordion title to process
            } else {
              // Make sure this.videos is iterable before using forEach or for...of
              if (Array.isArray(this.videos)) {
                for (const vid of this.videos) {
                  if (form.value.section == vid['section'] && vid['accordion_title'] != null) {
                    this.update_title(vid['id']);
                    break;
                  }
                }
              }
            }
            
            localStorage.setItem('Video', JSON.stringify(this.video));
            // Update the video
            this.update_video();
            setTimeout(() => {
              // Scroll to the top of the page in a smooth way
              window.scrollTo({ top: 0, behavior: 'smooth' });
              // wait to reload the page
              setTimeout(() => {
                this._router.navigate(['/video-detail/', this.video.id]).then(() => {
                  window.location.reload();
                  localStorage.removeItem('Video');
                });
              }, 1000);
            }, 100);
          } else {
            this.status = 'error';
            this.handleError('Failed to get videos for this course');
          }
        },
        error: (error) => {
          console.error('Error fetching videos:', error);
          this.handleError('Failed to get videos for this course');
        }
      });
    } catch (error) {
      console.error('Error during submission:', error);
      this.handleError('An error occurred during submission');
    }
  }

  update_title(id: any) {
    this._videoService.updateTitle(this.token, this.video, id).subscribe({
      next: (response) => {
        if (response.status !== 'success') {
          console.warn('Title update was not successful');
        }
      },
      error: (error) => {
        console.error('Error updating title:', error);
      }
    });
  }

  update_video() {
    this._videoService.update(this.token, this.video, this.video.id).subscribe({
      next: (response) => {
        if (response.status === 'success') {
          this.handleSuccess('The video has been updated successfully');
        } else {
          console.log(response);
          this.handleError('The video has not been updated');
        }
      },
      error: (error) => {
        console.error('Error updating video:', error);
        this.handleError('Error updating video: ' + (error.message || 'Unknown error'));
      }
    });
  }
}


Video-new

<div class="general" data-aos="flip-up" data-aos-easing="ease-out-cubic" data-aos-duration="2000">
    <div class="form-box">
        <div class="form-value">
            <div class="alert alert-success" *ngIf="status == 'success' && !edit">
                <p style="text-align: center;">
                    <strong>Video created successfully!</strong>
                </p>
            </div>
            <div class="alert alert-success" *ngIf="status == 'success' && edit">
                <p style="text-align: center;">
                    <strong>Video updated successfully!</strong>
                </p>
            </div>
            <div class="alert alert-danger" *ngIf="status == 'error' && !edit">
                <p style="text-align: center;">
                    <strong>Error!</strong> Video not created. 
                </p>
            </div>
            <div class="alert alert-danger" *ngIf="status == 'error' && edit">
                <p style="text-align: center;">
                    <strong>Error!</strong> Video not updated. 
                </p>
            </div>
            <!-- Video create form -->
            <form #videoForm="ngForm" (ngSubmit)="onSubmit(videoForm)">
                <h1 >
                    {{ title }}
                    <br>
                    for the course:
                    <br>
                    {{course.name}}
                </h1>
                <p *ngIf="status != 'success' && !edit">
                    Create a new video to start teaching.
                </p>
                <p *ngIf="edit">
                    Modify your video: {{video.title}}.
                </p>
                <div class="form-group">
                    <input type="text" name="name" #name="ngModel" class="form-control" [(ngModel)]="video.title" required pattern="^[a-zA-Z0-9 ]{1,20}$" maxlength="20">
                    <label for="name">Video title</label>
                    <small *ngIf="!name.valid && name.touched" class="invalid-feedback d-block">
                        Video title is required and must contain only letters (Max.Length 20).
                    </small>
                </div>
                <div class="form-group" style="border: transparent;">
                    <textarea type="text" name="content" class="form-control" #content="ngModel" [froalaEditor]="froala_options" [froalaModel]="video.content" [(ngModel)]="video.content" required></textarea>
                    <label for="content" class="description-label">Content</label>
                    <small *ngIf="!content.valid && content.touched" class="invalid-feedback d-block">
                        Content is required.
                    </small>
                </div>
                <div class="form-group">
                    <input type="text" name="url" #url="ngModel" [(ngModel)]="video.url" class="form-control" required>
                    <label for="url">URL of the video</label>
                    <small *ngIf="!url.valid && url.touched" class="invalid-feedback d-block">
                        Invalid URL.
                    </small>
                </div>
                <div class="form-group">        
                    <!-- Dropzone -->
                    <div class="dropzone-container">
                        <ngx-dropzone [multiple]="false" [maxFileSize]="600000000" [accept]="'.txt,.docx,.doc,.pdf,.rar'" (change)="onSelect($event)">
                            <ngx-dropzone-label>
                                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M7 10V9C7 6.23858 9.23858 4 12 4C14.7614 4 17 6.23858 17 9V10C19.2091 10 21 11.7909 21 14C21 15.4806 20.1956 16.8084 19 17.5M7 10C4.79086 10 3 11.7909 3 14C3 15.4806 3.8044 16.8084 5 17.5M7 10C7.43285 10 7.84965 10.0688 8.24006 10.1959M12 12V21M12 12L15 15M12 12L9 15" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                                </svg>
                                <p>Browse File to upload!</p>
                            </ngx-dropzone-label>
                            <ngx-dropzone-preview *ngFor="let f of files" [removable]="true" (removed)="onRemove(f)">
                                <ngx-dropzone-label>
                                    <svg fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                        <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                                    </svg>
                                    <span>{{ f.name }} ({{ f.size / 1024 | number:'1.0-2' }} KB)</span>
                                </ngx-dropzone-label>
                            </ngx-dropzone-preview>
                        </ngx-dropzone>

                        <!-- File status footer -->
                        <div class="file-status-footer">
                            <svg class="file-icon" fill="currentColor" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                <path d="M15.331 6H8.5v20h15V14.154h-8.169z"></path>
                                <path d="M18.153 6h-.009v5.342H23.5v-.002z"></path>
                            </svg>
                            <p>
                                <span *ngIf="files?.length === 0">Not selected file</span>
                                <span *ngIf="files?.length === 1">{{ files[0].name }}</span>
                                <span *ngIf="files && files.length > 1">{{ files.length }} files selected</span>
                            </p>
                            <svg class="delete-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" (click)="onRemoveAll()">
                                <path d="M5.16565 10.1534C5.07629 8.99181 5.99473 8 7.15975 8H16.8402C18.0053 8 18.9237 8.9918 18.8344 10.1534L18.142 19.1534C18.0619 20.1954 17.193 21 16.1479 21H7.85206C6.80699 21 5.93811 20.1954 5.85795 19.1534L5.16565 10.1534Z" stroke="currentColor" stroke-width="2"></path>
                                <path d="M19.5 5H4.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                                <path d="M10 3C10 2.44772 10.4477 2 11 2H13C13.5523 2 14 2.44772 14 3V5H10V3Z" stroke="currentColor" stroke-width="2"></path>
                            </svg>
                        </div>

                        <div class="upload-status">
                            <span *ngIf="!uploading">Upload file</span>
                            <span *ngIf="uploading">Uploading...</span>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <select name="section" #section="ngModel" [(ngModel)]="video.section" class="form-control">
                        <option *ngFor="let item of accordion" value="{{ item }}">
                            Section: {{ item }}
                        </option>
                    </select>
                    <label for="section">Sections of the course</label>
                    <small *ngIf="!section.valid && section.touched" class="invalid-feedback d-block">
                        Must select a section.
                    </small>
                </div>
                <div class="form-group">
                    <input type="text" name="accordion_title" #accordion_title="ngModel" [(ngModel)]="video.accordion_title" class="form-control" required>
                    <label for="accordion_title">Section title</label>
                    <small *ngIf="!accordion_title.valid && accordion_title.touched" class="invalid-feedback d-block">
                        Section title is required. <small>(if a section has not been created, create it first. If a section has been created, let this field blank.)</small>
                    </small>
                </div>
                <input *ngIf="status != 'success' && !edit" type="submit" name="" value="Save" class="btn btn-button" [disabled]="videoForm.invalid || uploading">
                <input *ngIf="edit" type="submit" name="" value="Save Changes" class="btn btn-button" [disabled]="videoForm.invalid || uploading">
            </form>
        </div>
    </div>
</div>

import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { GLOBAL } from '../../services/global';
import { VideoService } from '../../services/video.service';
import { UserService } from '../../services/user.service';
import { CourseService } from '../../services/course.service';
import { FileUploadService } from '../../services/file.upload.service';
import { Video } from '../../models/Video';
import { CommonModule } from '@angular/common';
import { NgxDropzoneModule } from 'ngx-dropzone';
import { FormsModule } from '@angular/forms';
import { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';

// this is a global variable for iziToast
declare var iziToast: any;

@Component({
  selector: 'app-video-new',
  imports: [CommonModule, NgxDropzoneModule, FormsModule, FroalaEditorModule, FroalaViewModule],
  templateUrl: './video-new.component.html',
  styleUrl: './video-new.component.css',
  providers: [VideoService, UserService, CourseService, FileUploadService]
})
export class VideoNewComponent {
  public title: string;
  public url: string;
  public video_: Video;
  public video: any;
  public token: any;
  public identity: any;
  public status: any;
  public edit: any;
  public course: any = { name: ''};
  public accordion: Array<any> = [];
  public uploading = false;
  public videos: any[] = [];

  // froala_options
  public froala_options: Object = {
    charCounterCount: true,
    toolbarButtons: ['bold', 'italic', 'underline', 'paragraphFormat'],
    toolbarButtonsXS: ['bold', 'italic', 'underline', 'paragraphFormat'],
    toolbarButtonsSM: ['bold', 'italic', 'underline', 'paragraphFormat'],
    toolbarButtonsMD: ['bold', 'italic', 'underline', 'paragraphFormat'],
    colorsBackground: ['#61BD6D', '#1ABC9C', '#54ACD2', 'REMOVE'],
    events: {
      initialized: function () {
        console.log('Froala Editor Initialized');
      }
    }
  };

  // ngx-dropzone options
  files: File[] = [];

  constructor(
    private _route: ActivatedRoute,
    private _videoService: VideoService,
    private _userService: UserService,
    private _courseService: CourseService,
    private fileUploadService: FileUploadService
  ){
    this.title = 'Save a new video';
    this.url = GLOBAL.url;
    this.video = this._videoService.getVideos();
    this.identity = this._userService.getIdentity();
    this.token = this._userService.getToken();
    this.edit = false;

    this.video_ = new Video(
      this.video.id,
      this.video.user_id = this.identity.sub,
      this.video.course_id,
      this.video.title,
      this.video.content,
      this.video.url,
      this.video.file,
      this.video.section,
      this.video.accordion_title);
  }

  ngOnInit(): void {
    this.loadData();
  }
  
  loadData(): void {
    this._route.params.subscribe(params => {
      let id = +params['id'];
      this._courseService.getCourseInfo(id, this.token).subscribe({
        next: (response) => {
          if (response.status == 'success') {
            this.course = response.course;
            this.accordion = response.accordion;
            this.video.course_id = id;
            this.getVideos();
          } else {
            this.handleError('Error loading course data');
          }
        },
        error: (error) => {
          console.error('Course loading error:', error);
          this.handleError('Error loading course data');
        }
      });
    });
  }
  
  onSelect(event: any) {
    this.files.push(...event.addedFiles);
  }
  
  onRemove(event: any) {
    this.files.splice(this.files.indexOf(event), 1);
  }

  onRemoveAll(): void {
    this.files = [];
  }

  handleError(message: string): void {
    this.status = 'error';
    iziToast.show({
      title: 'Error',
      titleColor: '#FF0000',
      color: '#FFF',
      class: 'text-danger',
      position: 'topRight',
      message: message
    });
  }

  handleSuccess(message: string): void {
    this.status = 'success';
    iziToast.show({
      title: 'Success',
      titleColor: '#1DC74C',
      color: '#FFF',
      class: 'text-success',
      position: 'topRight',
      message: message
    });
  }

  uploadVideo(): Promise<void> {
    return new Promise((resolve, reject) => {
      if (this.files.length === 0) {
        resolve(); // No files to upload
        return;
      }
      
      this.uploading = true;
      this.fileUploadService.uploadVideo(this.files[0]).subscribe({
        next: (response: any) => {
          if (response.file) {
            this.video_.file = response.file;
            this.video.file = response.file;
            this.uploading = false;
            resolve();
          } else {
            this.uploading = false;
            reject('Error uploading file: No file received in response');
          }
        },
        error: (error) => {
          console.error('Upload error details:', error);
          this.uploading = false;
          reject(error);
        }
      });
    });
  }

  stripHtml(html: string): string {
    if (!html) return '';
    const temporalElement = document.createElement('div');
    temporalElement.innerHTML = html;
    return temporalElement.textContent || temporalElement.innerText || '';
  }

  async onSubmit(form: any) {
    if (!form.valid) {
      this.handleError('Please fill all required fields correctly');
      return;
    }
    
    localStorage.setItem('Video', JSON.stringify(this.video));
    
    try {
      // First upload the file if any
      if (this.files.length > 0) {
        await this.uploadVideo();
      }
      
      this._route.params.subscribe(params => {
        let id = +params['id'];
        this.video.course_id = id;

        // Process the form data
        if (this.video.file === '') {
          this.video.file = null;
        }

        // Ensure numeric types
        this.video.course_id = Number(this.video.course_id);
        this.video.user_id = Number(this.video.user_id);
        this.video.section = Number(this.video.section);

        // Sanitize YouTube URL by removing the app=desktop parameter
        const sanitizedUrl = form.value.url.replace('?app=desktop&', '?');
        this.video.url = sanitizedUrl;
        
        // Clean HTML content
        if (this.video.content) {
          this.video.content = this.stripHtml(this.video.content);
        }

        // Get all videos for this course and check for accordion title
        this._videoService.getVideosByCourse(this.video.course_id).subscribe({
          next: (response) => {
            if (response.status === 'success') {
              // Assign videos
              if (response.videos) {
                this.videos = response.videos;
              } else if (response.video && Array.isArray(response.video)) {
                this.videos = response.video;
              } else {
                this.videos = [];
              }
              
              // Handle accordion title updates
              if (form.value.accordion_title === '') {
                form.value.accordion_title = null;
                this.video.accordion_title = null;
              }
              
              // Check if we need to clear accordion titles for other videos
              if (form.value.accordion_title !== '' && form.value.accordion_title !== null) {
                this.checkAndClearAccordionTitles(form.value.section);
              }
              
              // Save the video
              this.create_video();
            } else {
              this.handleError('Failed to get videos for this course');
            }
          },
          error: (error) => {
            console.error('Error fetching videos:', error);
            this.handleError('Failed to get videos for this course');
          }
        });
      });
    } catch (error) {
      console.error('Error during submission:', error);
      this.handleError('An error occurred during submission');
    }
  }

  checkAndClearAccordionTitles(section: number): void {
    if (!Array.isArray(this.videos) || this.videos.length === 0) {
      return;
    }

    // Find videos in the same section with accordion_title
    for (const vid of this.videos) {
      if (vid.section == section && vid.accordion_title != null) {
        this.update_title(vid.id);
        break;
      }
    }
  }

  create_video() {
    // Save the video data
    this._videoService.create(this.token, this.video).subscribe({
      next: (response) => {
        if (!response.video || !response || response.status == 'error') {
          this.handleError('The video has not been created.');
        } else {
          this.handleSuccess('The video has been created successfully.');
          
          localStorage.setItem('Video', JSON.stringify(this.video));
          
          // Smooth scroll to top and reload page
          setTimeout(() => {
            window.scrollTo({ top: 0, behavior: 'smooth' });
            setTimeout(() => {
              window.location.reload();
              localStorage.removeItem('Video');
            }, 1000);
          }, 100);
        }
      },
      error: (error) => {
        console.error('Error creating video:', error);
        this.handleError('Error creating video: ' + (error.message || 'Unknown error'));
      }
    });
  }

  update_title(id: any) {
    this._videoService.updateTitle(this.token, this.video, id).subscribe({
      next: (response) => {
        if (response.status !== 'success') {
          console.warn('Title update was not successful');
        }
      },
      error: (error) => {
        console.error('Error updating title:', error);
      }
    });
  }

  getVideos() {
    // Get all videos for this course
    this._videoService.getVideosByCourse(this.video.course_id).subscribe({
      next: (response) => {
        if (response.status === 'success') {
          if (response.videos) {
            this.videos = response.videos;
          } else if (response.video && Array.isArray(response.video)) {
            this.videos = response.video;
          } else {
            this.videos = [];
          }
        } else {
          this.handleError('The videos have not been loaded.');
        }
      },
      error: (error) => {
        console.error('Error fetching videos:', error);
      }
    });
  }
}

/* All  */
*{
    margin: 0;
    padding: 0;
}

.general{
    padding-top: 30px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-position: center;
    background-size: cover;
    background-color: #bcb4bc;
}

/* Form */
.form-box{
    position: relative;
    width: 400px;
    min-height: 650px;
    height: auto;
    background-color: #bbbcb7;
    border: 2px solid rgba(255,255,255,0.5);
    border-radius: 20px;
    backdrop-filter: blur(15px);
    display: flex;
    justify-content: center;
    align-items: center;
}

h1{
    font-size: 2em;
    color: #3c342c;
    text-align: center;
    padding: 10px;
}

p {
    text-align: center; 
}

.course-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
}

/* Etiqueta para el avatar */
.course-label {
    display: block;
    font-size: 1em; /* text-sm */
    font-weight: 500; /* font-medium */
    color: #3c342c; /* text-custom-brown */
    position: absolute;
    transform: translateY(-160%);
}

/* Contenedor de la imagen del avatar */
.course-image-container {
    margin-bottom: 0.5rem; /* mb-2 */
}

/* Imagen del avatar */
.course-image {
    width: 4rem; /* w-16 */
    object-fit: cover; /* object-cover */
}

.form-group{
    position: relative;
    margin: 30px 0px;
    width: 310px;
    border-bottom: 2px solid #3c342c;
}

.form-group label{
    position: absolute;
    top: 50%;
    left: 5px;
    transform: translateY(-50%);
    color: #3c342c;
    font-size: 1em;
    pointer-events: none;
    transition: 0.5s;
}

.form-group .description-label{
    position: absolute;
    top: -5px;
    left: 5px;
    transform: translateY(-80%);
    color: #3c342c;
    font-size: 1em;
    pointer-events: none;
    transition: 0.5s;
}

.form-group select,
.form-group textarea {
    width: 100%;
    background: transparent;
    border: none;
    outline: none;
    font-size: 1em;
    padding: 0 35px 0 5px;
    color: #3c342c;
}

.form-group textarea {
    height: 70px;
    padding-top: 15px;
}

.form-group select {
    height: 50px;
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    padding-right: 20px;
    background-image: url("data:image/svg+xml;utf8,<svg fill='%233c342c' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>");
    background-repeat: no-repeat;
    background-position: right 5px center;
}

.form-group input:focus ~ label,
.form-group input:valid ~ label,
.form-group textarea:focus ~ label,
.form-group textarea:valid ~ label,
.form-group select:focus ~ label,
.form-group select ~ label{
top: -5px;
}

.form-group input {
    width: 100%;
    height: 50px;
    background: transparent;
    border: none;
    outline: none;
    font-size: 1em;
    padding:0 35px 0 5px;
    color: #3c342c;
}

.form-group input:focus,
.form-group textarea:focus,
.form-group select:focus {
    outline: none;
    box-shadow: none;
}

.form-control:focus {
    outline: none;
    box-shadow: none;
    border-color: #3c342c;
}

.form-group ion-icon{
    position: absolute;
    right: 8px;
    color: #3c342c;
    font-size: 1.2em;
    top: 20px;
}

.btn-button{
    width: 100%;
    height: 40px;
    border-radius: 40px;
    background: #fff;
    border: none;
    outline: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
    margin-bottom: 20px;
}

/* dropzone */
.dropzone-container {
    height: 16rem; 
    width: 100%;
    display: flex;
    flex-direction: column;
}

ngx-dropzone {
    flex: 1;
    width: 100%;
    border: 2px dashed #3c342c;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: transparent;
    overflow: hidden !important;
}

ngx-dropzone-label {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    cursor: pointer;
}

ngx-dropzone-label svg {
    height: 6rem;
    width: 6rem;
    color: #3c342c;
}

ngx-dropzone-label p {
    text-align: center;
    color: #3c342c;
    margin-top: 0.5rem;
}

ngx-dropzone-preview {
    background-color: transparent;
    border-radius: 0.375rem;
    padding: 0.5rem;
    max-width: 20rem;
    display: flex;
    align-items: center;
}

ngx-dropzone-preview ngx-dropzone-label {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
}

ngx-dropzone-preview ngx-dropzone-label svg {
    height: 1.5rem; /* h-6 */
    width: 1.5rem; /* w-6 */
    fill: #3c342c;
    margin-right: 0.5rem; /* mr-2 */
}

ngx-dropzone-preview ngx-dropzone-label span {
    flex: 1;
    font-size: 0.875rem; /* text-sm */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap; /* truncate */
}

.file-status-footer {
    margin-top: 0.5rem; /* mt-2 */
    background-color: transparent;
    width: 100%; /* w-full */
    height: 2.5rem; /* h-10 */
    padding: 0.5rem; /* p-2 */
    border-radius: 0.5rem; /* rounded-lg */
    display: flex;
    align-items: center;
    justify-content: space-between;
    color: #3c342c; /* text-custom-brown */
}

.file-status-footer svg.file-icon {
    height: 1.5rem; /* h-6 */
    width: 1.5rem; /* w-6 */
    fill: #3c342c; /* fill-custom-brown */
    background-color: transparent;
    border-radius: 9999px; /* rounded-full */
    padding: 0.125rem; /* p-0.5 */
}

.file-status-footer p {
    flex: 1;
    text-align: center;
    font-size: 0.875rem; /* text-sm */
}

.file-status-footer svg.delete-icon {
    height: 1.5rem; /* h-6 */
    width: 1.5rem; /* w-6 */
    color: #3c342c; /* text-custom-brown */
    cursor: pointer;
}

.file-status-footer svg.delete-icon:hover {
    color: #3c342c; /* hover:text-custom-brown - esto parece redundante pero mantengo la estructura */
    transition: colors 0.3s ease; /* transition-colors */
}

.upload-status {
    display: flex;
    align-items: center;
    margin-top: 0.5rem; /* mt-2 */
}

.upload-status span {
    color: #3c342c; /* text-custom-brown */
    font-size: 0.875rem; /* text-sm */
}

/* alerts */
.alert {
    margin-bottom: 20px;
    padding: 10px;
    border-radius: 5px;
}

.alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

/* froala editor */
:host ::ng-deep .fr-newline{
    background: transparent !important;
    border: transparent;
}

:host ::ng-deep .fr-view{
    background: transparent !important;
    border: transparent;
}

:host ::ng-deep .fr-box{
    background: transparent !important;
    border: 2px solid #3c342c;
    color: #3c342c;
}

:host ::ng-deep .fr-toolbar {
    background: transparent !important;
    border-bottom: 2px solid #3c342c;
}

:host ::ng-deep #fr-logo>span,
:host ::ng-deep .fr-counter {
    color: #3c342c;
}

:host ::ng-deep .fr-logo {
    fill: #3c342c;
}

:host ::ng-deep .fr-wrapper {
    background: transparent !important;
    border: transparent;
    color: #3c342c;
}

:host ::ng-deep .fr-element {
    background: transparent !important;
    border: transparent;
    color: #3c342c;
}

:host ::ng-deep .fr-second-toolbar {
    background: transparent !important;
    border-top: 2px solid #3c342c;
    color: #3c342c;
}


GUARDS

import { CanActivateFn, Router } from '@angular/router';
import { inject } from '@angular/core';
import { UserService } from '../services/user.service';

export const identityGuard: CanActivateFn = (route, state) => {
  const router = inject(Router);
  const userService = inject(UserService);
  
  let identity: any = userService.getIdentity();
  
  if (identity && identity.sub) {
    return true;
  } else {
    router.navigate(['/home']);
    return false;
  }
};


SERVICES

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GLOBAL } from './global';

@Injectable({
  providedIn: 'root'
})
export class CartService {
  public url: string;
  constructor(
    private _http: HttpClient
  ) {
    this.url = GLOBAL.url;
  }

  // index
  index(token: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
      .set('Authorization', token);
    return this._http.get(this.url + 'carts', { headers: headers });
  }

  // store
  store(token: any, cart: any): Observable<any> {
    let json = JSON.stringify(cart);
    let params = 'json=' + json;
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
      .set('Authorization', token);
    return this._http.post(this.url + 'carts', params, { headers: headers });
  }

  // delete
  delete(token: any, id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
      .set('Authorization', token);
    return this._http.delete(this.url + 'carts/' + id, { headers: headers });
  }

  //delete all
  deleteAll(token: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
      .set('Authorization', token);
    return this._http.delete(this.url + 'carts/deleteCart', { headers: headers });
  }
}


// this import injectable is used to inject the service into other components
import { Injectable } from "@angular/core";
// this import httpclient is used to make http requests
// this import httpheaders is used to set headers for the http requests
import { HttpClient, HttpHeaders } from "@angular/common/http";
// this import observable is used to subscribe to the http requests
import { Observable } from "rxjs";
// this import category is used to define the category model
import { Category } from "../models/Category";
import { GLOBAL } from "./global";

@Injectable({
  providedIn: "root"
})

export class CategoryService {
  public apiUrl: string = GLOBAL.url;

  constructor(public http: HttpClient) {
    this.apiUrl
  }

  getCategories(): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');
    return this.http.get(this.apiUrl + 'categories', { headers: headers });
  }

  // create category
  createCategory(token: any, category: Category): Observable<any> {
    let json = JSON.stringify(category);
    let params = 'json=' + json;
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
      .set('Authorization', token);
    return this.http.post(this.apiUrl + 'categories', params, { headers: headers });
  }

  // update category
  updateCategory(token: any, id: any, category: any): Observable<any> {
    let json = JSON.stringify(category);
    let params = 'json=' + json;
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
      .set('Authorization', token); 
    return this.http.put(this.apiUrl + 'categories/' + id, params, { headers: headers });
  }

  // get one category
  getCategory(id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');
    return this.http.get(this.apiUrl + 'categories/' + id, { headers: headers });
  }

  // delete category
  deleteCategory(token: any, id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
      .set('Authorization', token);
    return this.http.delete(this.apiUrl + 'categories/' + id, { headers: headers });
  }
}

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { GLOBAL } from './global';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class CheckboxService {
  public url: string;

  constructor(
    private _http: HttpClient
  ) {
    this.url = GLOBAL.url;
  }

  // store checkbox
  storeCheckbox(token: any, checkbox: any): Observable<any> {
    let json = JSON.stringify(checkbox);
    let params = 'json=' + json;

    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                   .set('Authorization', token);

    return this._http.post(this.url + 'checkboxes', params, { headers: headers });
  }

  // get checkboxes
  getCheckboxes(token: any, id:any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                    .set('Authorization', token);

    return this._http.get(this.url + 'checkboxes/' + id, { headers: headers });
  }

  // delete checkbox
  deleteCheckbox(token: any, id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                   .set('Authorization', token);

    return this._http.delete(this.url + 'checkboxes/' + id, { headers: headers });
  }
}


import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GLOBAL } from './global';

@Injectable({
  providedIn: 'root'
})
export class CommentService {
  public url: string;

  constructor(
    private _http: HttpClient
  ) {
    this.url = GLOBAL.url;
  }

  // get comments
  getComments(videoId: any, token: string): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                   .set('Authorization', token);

    return this._http.get(this.url + 'comments/' + videoId, { headers: headers });
  }

  // add comment
  create(token: string, comment: any): Observable<any> {
    if(comment.comment) {
      comment.comment = GLOBAL.htmlEntities(comment.comment);
    }
    let json = JSON.stringify(comment);
    let params = 'json=' + json;
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                  .set('Authorization', token);

    return this._http.post(this.url + 'comments', params, { headers: headers });
  }

  // update comment
  update(token: string, comment: any): Observable<any> {
    if(comment.comment) {
      comment.comment = GLOBAL.htmlEntities(comment.comment);
    }
    let json = JSON.stringify(comment);
    let params = 'json=' + json;
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                 .set('Authorization', token);

    return this._http.put(this.url + 'comments/' + comment.id, params, { headers: headers });
  }

  // delete comment
  delete(token: string, id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                  .set('Authorization', token);

    return this._http.delete(this.url + 'comments/' + id, { headers: headers });
  }
}


import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GLOBAL } from './global';

@Injectable({
  providedIn: 'root'
})
export class CourseService {
  public url: string;
  public course: any;

  constructor(
    public http: HttpClient
  ) {
    this.url = GLOBAL.url;
  }

  getCourse(): Observable<any> {
    let course = JSON.parse(localStorage.getItem('Course') || '{}');
    if (course && course != 'undefined') {
        this.course = course;
    } else {
        this.course = null;
    }
    return this.course;
  }

  // create method
  create(token: string, course: any): Observable<any> {
    // clean htmlentities
    if (course.detail) {
      course.detail = GLOBAL.htmlEntities(course.detail);
    }
    if (course.url) {
      course.url = GLOBAL.htmlEntities(course.url);
    }
    let json = JSON.stringify(course);
    let params = 'json=' + json;
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                    .set('Authorization', token);
    return this.http.post(this.url + 'courses', params, { headers: headers });
  }

  // get courses for the home
  getCourses(): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
    return this.http.get(this.url + 'courses', { headers: headers });
  }

  // update the course
  update(token: any, course: any, id: any): Observable<any> {
    if (course.detail) {
      course.detail = GLOBAL.htmlEntities(course.detail);
    }
    if (course.url) {
      course.url = GLOBAL.htmlEntities(course.url);
    }
    let json = JSON.stringify(course);
    let params = 'json=' + json;
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                   .set('Authorization', token);
    return this.http.put(this.url + 'courses/' + id, params, { headers: headers });
  }

  // get course info
  getCourseInfo(id: any, token: any): Observable<any> {
    if (token) {
      let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                    .set('Authorization', token);
      return this.http.get(this.url + 'courses/' + id, { headers: headers });
    } else {
      return this.getCourseInfo_2(id);
    }
  }

  // get courses without the token
  getCourseInfo_2(id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');
      return this.http.get(this.url + 'courses/getCourse/' + id, { headers: headers });
  }

  // delete course
  delete(token: any, id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                  .set('Authorization', token);
    return this.http.delete(this.url + 'courses/' + id, { headers: headers });
  }

  // get courses by catogory
  getCoursesByCategory(id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');
    return this.http.get(this.url + 'courses/getCoursesByCategory/' + id, { headers: headers });
  }

  // get courses by text
  getCoursesByText(text: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');
    return this.http.get(this.url + 'courses/search/' + text, { headers: headers });
  }
}


import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GLOBAL } from './global';
import { UserService } from './user.service';
import { CategoryService } from './category.service';

@Injectable({
  providedIn: 'root'
})
export class FileUploadService {

  constructor(
    private http: HttpClient,
    private userService: UserService,
    private categoryService: CategoryService
  ) { }

  uploadFile(file: File): Observable<any> {
    // Create a FormData object to hold the file data
    const formData = new FormData();
    formData.append('file0', file, file.name);
    
    // Obtain the token from the UserService
    const token = this.userService.getToken();
    
    // Configure the headers for the request
    const headers = new HttpHeaders({
      'Authorization': token
    });
    
    // Make the POST request to upload the file
    return this.http.post(GLOBAL.url + 'upload', formData, { headers });
  }

  uploadCourse(file: File): Observable<any> {
    // Create a FormData object to hold the file data
    const formData = new FormData();
    formData.append('file0', file, file.name);
    
    // Obtain the token from the UserService
    const token = this.userService.getToken();
    
    // Configure the headers for the request
    const headers = new HttpHeaders({
      'Authorization': token
    });
    
    // Make the POST request to upload the file
    return this.http.post(GLOBAL.url + 'courses/upload', formData, { headers });
  }

  uploadVideo(file: File): Observable<any> {
    // Create a FormData object to hold the file data
    const formData = new FormData();
    formData.append('file0', file, file.name);

    // Obtain the token from the UserService
    const token = this.userService.getToken();

    // Configure the headers for the request
    const headers = new HttpHeaders({
      'Authorization': token
    });

    // Make the POST request to upload the file
    return this.http.post(GLOBAL.url + 'videos/doc', formData, { headers });
  }

  uploadComment(file: File): Observable<any> {
    // Create a FormData object to hold the file data
    const formData = new FormData();
    formData.append('file0', file, file.name);

    // Obtain the token from the UserService
    const token = this.userService.getToken();

    // Configure the headers for the request
    const headers = new HttpHeaders({
      'Authorization': token
    });

    // Make the POST request to upload the file
    return this.http.post(GLOBAL.url + 'comments/upload', formData, { headers });
  }

  uploadResponse(file: File): Observable<any> {
    // Create a FormData object to hold the file data
    const formData = new FormData();
    formData.append('file0', file, file.name);

    // Obtain the token from the UserService
    const token = this.userService.getToken();

    // Configure the headers for the request
    const headers = new HttpHeaders({
      'Authorization': token
    });

    // Make the POST request to upload the file
    return this.http.post(GLOBAL.url + 'responses/upload', formData, { headers });
  }
}


export var GLOBAL = {
    url: 'http://backend-rest.com/api/',
    url_front: 'http://localhost:4200/',
    htmlEntities: (str: string): string => {
        // Usar un objeto para mapear entidades (más mantenible)
        const entities: { [key: string]: string } = {
            '&amp;': '&',  // Primero reemplazar &amp; para evitar doble procesamiento
            '&ntilde;': 'ñ',
            '&Ntilde;': 'Ñ',
            '&Agrave;': 'À',
            '&Aacute;': 'Á',
            '&Acirc;': 'Â',
            '&Atilde;': 'Ã',
            '&Auml;': 'Ä',
            '&Aring;': 'Å',
            '&AElig;': 'Æ',
            '&Ccedil;': 'Ç',
            '&Egrave;': 'È',
            '&Eacute;': 'É',
            '&Ecirc;': 'Ê',
            '&Euml;': 'Ë',
            '&Igrave;': 'Ì',
            '&Iacute;': 'Í',
            '&Icirc;': 'Î',
            '&Iuml;': 'Ï',
            '&ETH;': 'Ð',
            // Removed duplicate '&Ntilde;' entry as it was already defined above
            '&Ograve;': 'Ò',
            '&Oacute;': 'Ó',
            '&Ocirc;': 'Ô',
            '&Otilde;': 'Õ',
            '&Ouml;': 'Ö',
            '&Oslash;': 'Ø',
            '&Ugrave;': 'Ù',
            '&Uacute;': 'Ú',
            '&Ucirc;': 'Û',
            '&Uuml;': 'Ü',
            '&Yacute;': 'Ý',
            '&THORN;': 'Þ',
            '&szlig;': 'ß',
            '&agrave;': 'à',
            '&aacute;': 'á',
            '&acirc;': 'â',
            '&atilde;': 'ã',
            '&auml;': 'ä',
            '&aring;': 'å',
            '&aelig;': 'æ',
            '&ccedil;': 'ç',
            '&egrave;': 'è',
            '&eacute;': 'é',
            '&ecirc;': 'ê',
            '&euml;': 'ë',
            '&igrave;': 'ì',
            '&iacute;': 'í',
            '&icirc;': 'î',
            '&iuml;': 'ï',
            '&eth;': 'ð',
            // Removed duplicate '&ntilde;' entry as it was already defined above
            '&ograve;': 'ò',
            '&oacute;': 'ó',
            '&ocirc;': 'ô',
            '&otilde;': 'õ',
            '&ouml;': 'ö',
            '&oslash;': 'ø',
            '&ugrave;': 'ù',
            '&uacute;': 'ú',
            '&ucirc;': 'û',
            '&uuml;': 'ü',
            '&yacute;': 'ý',
            '&thorn;': 'þ',
            '&yuml;': 'ÿ',
            '&nbsp;': ' ',
            'nbsp;': ' ' // No estándar, pero por si acaso
        };

        // Crear una expresión regular global para todas las entidades
        const regex = new RegExp(Object.keys(entities).join('|'), 'g');
        
        return str.replace(regex, (match) => entities[match]);
    }
};


import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ProgressService {
  private progressSource = new BehaviorSubject<number>(0);
  public progress$ = this.progressSource.asObservable();

  constructor() { }

  setProgress(value: number) {
    console.log('Setting progress to:', value); // for debug
    this.progressSource.next(value);
  }

  getCurrentProgress(): number {
    return this.progressSource.value;
  }

  resetProgress(): void {
    this.progressSource.next(0);
  }
}


import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GLOBAL } from './global';

@Injectable({
  providedIn: 'root'
})
export class ReponseService {
  public url: string;

  constructor(
    public _http: HttpClient
  ) {
    this.url = GLOBAL.url;
  }

  // get reponse
  getReponses(token: any, id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                    .set('Authorization', token);
    return this._http.get(this.url + 'responses/' + id, { headers: headers });
  }

  // add a response
  createResponse(token: any, response: any): Observable<any> {
    if (response.response) {
      response.response = GLOBAL.htmlEntities(response.response);
    }
    
    let json = JSON.stringify(response);
    let params = 'json=' + json;
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                   .set('Authorization', token);
    return this._http.post(this.url + 'responses', params, { headers: headers });
  }

  // update a response
  updateResponse(token: any, response: any): Observable<any> {
    if (response.response) {
      response.response = GLOBAL.htmlEntities(response.response);
    }

    let json = JSON.stringify(response);
    let params = 'json=' + json;
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                  .set('Authorization', token);
    return this._http.put(this.url +'responses/' + response.id, params, { headers: headers });
  }

  // delete a response
  deleteResponse(token: any, id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                   .set('Authorization', token);
    return this._http.delete(this.url +'responses/' + id, { headers: headers });
  }
}


import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GLOBAL } from './global';

@Injectable({
  providedIn: 'root'
})
export class SaleService {
  public url: string;

  constructor(
    public _http: HttpClient
  ) {
    this.url = GLOBAL.url;
  }

  // create sale
  createSale(token: any, user: any): Observable<any> {
    const json = JSON.stringify(user);
    const params = 'json=' + json
    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);
    return this._http.post(this.url + 'sales', params, { headers: headers });
  }

  // get sales
  getSales(token: any): Observable<any> {
    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);
    return this._http.get(this.url + 'sales' , { headers: headers });
  }

  // update sale
  updateSaleProgress(token: any, sale: any, id: any): Observable<any> {
    const json = JSON.stringify(sale);
    const params = 'json=' + json
    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);
    return this._http.put(this.url +'sales/' + id, params, { headers: headers });
  }

  // get sale by category
  getSalesByCategory(token: any, category: any): Observable<any> {
    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);
    return this._http.get(this.url +'sales/getSalesByCategory/' + category, { headers: headers });
  }

  // get sale by text
  getSalesByText(token: any, text: any): Observable<any> {
    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);
    return this._http.get(this.url +'sales/getSalesByText/' + text, { headers: headers });
  }

  // get the courses of a sale
  myCourses(token: any): Observable<any> {
    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);
    return this._http.get(this.url +'sales/getMyCourses', { headers: headers });
  }
}


import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { User } from '../models/User';
import { GLOBAL } from './global';

@Injectable({
    providedIn: "root"
})
export class UserService {
    public apiUrl: string = GLOBAL.url;
    public identity: any;
    public token: any;

    constructor(public http: HttpClient) {
        this.apiUrl;
    }

    login(user:any, getToken:any = null): Observable<any> {
        // Check if getToken is set to true
        if (getToken != null) {
            user.getToken = 'true';
        }
        // Convert the user object to a JSON string
        let json = JSON.stringify(user);
        // Convert the JSON string to a string that can read
        let params = 'json=' + json;
        // Set the headers
        let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');
        // Make the POST request to the API
        return this.http.post(this.apiUrl + 'login', params, { headers: headers });
    }

    getIdentity(): Observable<any> {
        let identity = JSON.parse(localStorage.getItem('identity') || '{}');
        if (identity && identity != 'undefined') {
            this.identity = identity;
        } else {
            this.identity = null;
        }
        return this.identity;
    }

    getToken(): string {
        let token = localStorage.getItem('token');
        if (token && token != 'undefined') {
            this.token = token;
        } else {
            this.token = null;
        }
        return this.token;
    }

    signup(user:any): Observable<any> {
        // Convert the user object to a JSON string
        let json = JSON.stringify(user);
        // Convert the JSON string to a string that can read
        let params = 'json=' + json;
        // Set the headers
        let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');
        // Make the POST request to the API
        return this.http.post(this.apiUrl + 'register', params, { headers: headers });
    }

    update(token:any, user:any): Observable<any> {
        // Convert the user object to a JSON string
        let json = JSON.stringify(user);
        // Convert the JSON string to a string that can read
        let params = 'json=' + json;
        // Set the headers
        let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);
        // Make the PUT request to the API
        return this.http.put(this.apiUrl + 'update', params, { headers: headers });
    }
}


import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { GLOBAL } from './global';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class VideoService {
  public url: any;
  public video: any;

  constructor(
    public _http: HttpClient
  ) {
    this.url = GLOBAL.url;
  }

  // get videos
  getVideos(): Observable<any> {
    let video = JSON.parse(localStorage.getItem('Video') || '{}');
    if (video && video != 'undefined') {
        this.video = video;
    } else {
        this.video = null;
    }
    return this.video;
  }

  // create de course
  create(token: any, video: any): Observable<any> {
    if (video.url){
      video.url = GLOBAL.htmlEntities(video.url);
    }
    if (video.content) {
      video.content = GLOBAL.htmlEntities(video.content);
    }

    let json = JSON.stringify(video);
    let params = 'json=' + json;

    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
      .set('Authorization', token);

    return this._http.post(this.url + 'videos', params, { headers: headers });
  }

  //get videos by course
  getVideosByCourse(id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');

    return this._http.get(this.url + 'videos/getVideosByCourse/' + id, { headers: headers });
  }

  // get video
  getVideo(id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');
    return this._http.get(this.url + 'videos/' + id, { headers: headers });
  }

  // update video
  update(token: any, video: any, id: any): Observable<any> {
    if (video.content) {
      video.content = GLOBAL.htmlEntities(video.content);
    }
    if (video.url) {
      video.url = GLOBAL.htmlEntities(video.url);
    }
    let json = JSON.stringify(video);
    let params = 'json=' + json;
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                   .set('Authorization', token);
    return this._http.put(this.url + 'videos/' + id, params, { headers: headers });
  }

  // update title
  updateTitle(token: any, video: any, id: any): Observable<any> {
    let json = JSON.stringify(video);
    let params = 'json=' + json;
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                  .set('Authorization', token);
    return this._http.put(this.url + 'videos/updateTitle/' + id, params, { headers: headers });
  }

  // delete video
  delete(token: any, id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                   .set('Authorization', token);
    return this._http.delete(this.url + 'videos/' + id, { headers: headers });
  }

  // get video with progress 
  getVideoWithProgress(token: any, id: any): Observable<any> {
    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                                  .set('Authorization', token);
    return this._http.get(this.url + 'videos/getVideosWithProgress/' + id, { headers: headers });
  }
}


MODELS

export class Cart {
    constructor (
        public id: number,
        public user_id: number,
        public course_id: number,
        public quantity: number,
    ) {}
}

export class Category {
    constructor(
        public id: number,
        public name: string,
    ){}
}

export class Checkbox{
    constructor(
        public id:number,
        public user_id:number,
        public course_id: number,
        public video_id:number,
        public checkbox: number,
    ){}
}


export class Comment{
    constructor(
        public id: number,
        public user_id: number,
        public video_id: number,
        public title: string,
        public comment: string,
        public image: string,
    ){}
}

export class Course {
    constructor(
        public id: number,
        public name: string,
        public category_id: number,
        public detail: string,
        public image: string,
        public url: string,
        public accordion: number,
        public current_price: number,
        public previous_price: number,
        public num_sales: number,
    ){}
}

export class Responxe {
    constructor(
        public id: number,
        public user_id: number,
        public comment_id: number,
        public response: string,
        public image: string,
    ){}
}

export class Sale {
  constructor(
    public id: number,
    public user_id: number,
    public course_id: number,
    public video: number,
    public progress: number
  ) {}
}

export class User {
    constructor(
        public sub: number,
        public name: string,
        public surname: string,
        public role: string,
        public email: string,
        public password: string,
        public description: string,
        public image: string,
    ) {}
}

export class Video {
    constructor(
        public id: number,
        public user_id: number,
        public course_id: number,
        public title: string,
        public content: string,
        public url: string,
        public file: string,
        public section: number,
        public accordion_title: string,
    ){}
}